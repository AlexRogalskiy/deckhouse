stages:
  - build
  - testing
  - deploy
  - cleanup_registry
  - cleanup_builder

Build:
  stage: build
  script:
    - ./modules_images bp --write-tags=modules/images_tags.json
    - type multiwerf && source <(multiwerf use 1.0 beta)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - werf build-and-publish --stages-storage :local --images-repo=${CI_REGISTRY_IMAGE} dev
    - werf build --stages-storage :local tests
    - if [[ -n ${CI_COMMIT_TAG} ]]; then werf publish --stages-storage :local --tag-custom ${CI_COMMIT_TAG} --images-repo=${CI_REGISTRY_IMAGE}; fi
  except:
    - schedules
  tags:
    - build

Tests:
  stage: testing
  script:
    - pwd
    - ./modules_images bp --write-tags=modules/images_tags.json
    - type multiwerf && source <(multiwerf use 1.0 beta)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - >
      werf run tests --docker-options="-v $(pwd):/deckhouse" --stages-storage :local --
      bash -c "cd /deckhouse/testing/global-hooks/ && ginkgo -vet off -r . && cd /deckhouse/testing/modules/ && ginkgo -vet off -r ."
    - cat kcov-report/kcov-merged/coverage.json | grep '  "percent_covered"'
  except:
    - schedules
  artifacts:
    when: always
    paths:
    - kcov-report
    expire_in: 10 days
  tags:
    - build

pages:
  stage: deploy
  dependencies:
  - Tests
  script:
  - mv kcov-report/ public/
  artifacts:
    paths:
    - public
    expire_in: 1 year
  when: always
  tags:
    - build

Matrix Tests:
  stage: testing
  script:
    - pwd
    - type multiwerf && source <(multiwerf use 1.0 beta)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - werf run tests --docker-options="-v $(pwd):/deckhouse" --stages-storage :local -- bash -c "cd /deckhouse/testing/; ginkgo -r ./matrix/ --slowSpecThreshold=30s;"
  except:
    - schedules
  tags:
    - build

.base_deploy: &base_deploy
  stage: deploy
  variables:
    SOURCE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    DESTINATION_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_JOB_NAME}
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username="$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY > /dev/null
    - docker image pull $SOURCE_IMAGE
    - docker image tag $SOURCE_IMAGE $DESTINATION_IMAGE
    - docker image push $DESTINATION_IMAGE
  after_script:
    - docker image rmi $SOURCE_IMAGE
    - docker image rmi $DESTINATION_IMAGE
    - git checkout ${CI_JOB_NAME} && git reset ${CI_COMMIT_SHA}
    - git push --force $(echo ${CI_REPOSITORY_URL} | sed -r "s/^(.+gitlab-ci-token:).+(\@.+)$/\1${REGISTRY_CLEANER_TOKEN}\2/") ${CI_JOB_NAME}
  when: manual
  tags:
    - build

alpha (pre-release):
  <<: *base_deploy
  variables:
    SOURCE_IMAGE: ${CI_REGISTRY_IMAGE}/dev:${CI_COMMIT_REF_NAME}
    DESTINATION_IMAGE: ${CI_REGISTRY_IMAGE}:alpha
  environment:
    name: alpha
  only:
    - master
    - /^release-.*$/
  except:
    - schedules

alpha:
  <<: *base_deploy
  environment:
    name: alpha
  only:
    - tags

beta:
  <<: *base_deploy
  environment:
    name: beta
  only:
    - tags

rc:
  <<: *base_deploy
  environment:
    name: rc
  only:
    - tags

stable:
  <<: *base_deploy
  environment:
    name: stable
  only:
    - tags

rock-solid:
  <<: *base_deploy
  environment:
    name: rock-solid
  only:
    - tags

Cleanup registry:
  stage: cleanup_registry
  script:
    - set -x
    - type multiwerf && source <(multiwerf use 1.0 alpha)
    - docker login -u sample-user -p ${REGISTRY_CLEANER_TOKEN} ${CI_REGISTRY_IMAGE}
    - werf cleanup --stages-storage :local --images-repo ${CI_REGISTRY_IMAGE}/dev
  only:
  - schedules
  tags:
    - build
  retry: 2

Cleanup modules images:
  stage: cleanup_builder
  script:
    - ./modules_images cleanup --registry-user=sample-user --registry-password=$REGISTRY_CLEANER_TOKEN
  only:
    - schedules
  tags:
    - build
