#!/bin/bash

source /antiopa/shell_lib.sh

function __config__() {
  echo '
{
   "schedule": [
      {
         "allowFailure": true,
         "crontab": "0 3 * * *"
      }
   ]
}'
}

function __main__() {
  # Добавляем во все namespace secret из default namespace, если вдруг их там не оказалось
  for secret in $(kubectl -n default get secret -l antiopa-secret-copier=yes -o name);
    do
    # для каждого Namespace, кроме "default"
    for namespace in $(kubectl get namespace -o json |
                        jq -r '.items[] |
                          select((.metadata.name == "default" | not) and .status.phase == "Active") | .metadata.name')
    do
      # копируем секрет, предварительно удалив лишние поля из metadata
      kubectl -n default get $secret -o json | \
        jq -r "include \"remove_empty\"; .metadata.namespace=\"${namespace}\" | remove_empty |
                .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\", \"labels\"])))" \
        | kubectl::replace_or_create
    done
  done

  # Получаем список имен из default Namespace с лейблами, проходимся далее по всем секретам в кластере
  # и получаем список тех, у которых лейбл присутствует, а имя не входит в массив имён, полученных из
  # default Namespace
  # Финальный список скармливаем `kubectl delete`
  kubectl get secret --all-namespaces -o json | \
    jq -r '([.items[] | select(.metadata.labels."antiopa-secret-copier" == "yes" and .metadata.namespace == "default").metadata.name]) as $secrets |
             .items[] | select(.metadata.labels."antiopa-secret-copier" == "yes" and .metadata.namespace != "default" and ([.metadata.name] | inside($secrets) | not)) |
             "\(.metadata.namespace) secret \(.metadata.name)"' | \
    while read -r secret
    do
      kubectl delete -n $secret
    done
}

hook::run $@
