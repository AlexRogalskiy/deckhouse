DESCRIPTION: This patch adds InternalNetworkNames and
ExternalNetworkNames parameters to VirtualCenter configuration
section. Both of them we use to explicitly define what networks
are external/internal to properly provide IP Addresses in
the status of Node objects.
~~~
Index: pkg/cloudprovider/vsphere/nodemanager.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/cloudprovider/vsphere/nodemanager.go b/pkg/cloudprovider/vsphere/nodemanager.go
--- a/pkg/cloudprovider/vsphere/nodemanager.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/cloudprovider/vsphere/nodemanager.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -212,6 +212,23 @@
 		klog.Warningf("Unable to find vcInstance for %s. Defaulting to ipv4.", tenantRef)
 	}

+	externalNetworkMap := make(map[string]struct{})
+	internalNetworkMap := make(map[string]struct{})
+	if vcInstance != nil {
+		if len(vcInstance.Cfg.InternalNetworkNames) != 0 && len(vcInstance.Cfg.ExternalNetworkNames) != 0 {
+			for _, intName := range vcInstance.Cfg.InternalNetworkNames {
+				internalNetworkMap[strings.ToLower(intName)] = struct{}{}
+			}
+			for _, extName := range vcInstance.Cfg.ExternalNetworkNames {
+				externalNetworkMap[strings.ToLower(extName)] = struct{}{}
+			}
+		} else {
+			klog.V(2).Infof("InternalNetworkNames or ExternalNetworkNames not specified, skipping networkName-based IP address detection")
+		}
+	} else {
+		klog.V(2).Infof("Unable to find vcInstance for %s, skipping networkName-based IP address detection", tenantRef)
+	}
+
 	var internalNetworkSubnet *net.IPNet
 	var externalNetworkSubnet *net.IPNet
 	var internalVMNetworkName string
@@ -256,6 +273,48 @@
 		klog.V(6).Infof("externalVMNetworkName = %s", externalVMNetworkName)
 		klog.V(6).Infof("v.Network = %s", v.Network)

+		// match network name by collections
+		if (len(internalNetworkMap) > 0) && (len(externalNetworkMap) > 0) {
+			if v.Network == "" {
+				klog.V(4).Info("Skipping device because networkName-based IP address detection is enabled and the \"Network\" field is not set on vNIC")
+				continue
+			}
+			for _, family := range ipFamily {
+
+				ips := returnIPsFromSpecificFamily(family, v.IpAddress)
+
+				for _, ip := range ips {
+					parsedIP := net.ParseIP(ip)
+					if parsedIP == nil {
+						return fmt.Errorf("can't parse IP: %s", ip)
+					}
+
+					if _, ok := internalNetworkMap[strings.ToLower(v.Network)]; !foundInternal && ok {
+						klog.V(2).Infof("Adding Internal IP by NetworkNames collection: %s", ip)
+						v1helper.AddToNodeAddresses(&addrs,
+							v1.NodeAddress{
+								Type:    v1.NodeInternalIP,
+								Address: ip,
+							},
+						)
+						foundInternal = true
+					}
+					if _, ok := externalNetworkMap[strings.ToLower(v.Network)]; !foundExternal && ok {
+						klog.V(2).Infof("Adding External IP by NetworkNames collection: %s", ip)
+						v1helper.AddToNodeAddresses(&addrs,
+							v1.NodeAddress{
+								Type:    v1.NodeExternalIP,
+								Address: ip,
+							},
+						)
+						foundExternal = true
+					}
+				}
+			}
+			// skip other address discovery logic
+			continue
+		}
+
 		if (internalVMNetworkName != "" && !strings.EqualFold(internalVMNetworkName, v.Network)) &&
 			(externalVMNetworkName != "" && !strings.EqualFold(externalVMNetworkName, v.Network)) {
 			klog.V(4).Infof("Skipping device because vNIC Network=%s doesn't match internal=%s or external=%s network names",
@@ -360,6 +419,10 @@
 			return fmt.Errorf("unable to find suitable IP address for node %s with IP family %s", nodeID, ipFamily)
 		}
 	}
+
+	if !foundInternal && !foundExternal {
+		return fmt.Errorf("unable to find suitable IP address for node %s with IP family %s", nodeID, ipFamily)
+	}

 	klog.V(2).Infof("Found node %s as vm=%+v in vc=%s and datacenter=%s",
 		nodeID, vmDI.VM, vmDI.VcServer, vmDI.DataCenter.Name())
Index: pkg/cloudprovider/vsphere/nodemanager_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/cloudprovider/vsphere/nodemanager_test.go b/pkg/cloudprovider/vsphere/nodemanager_test.go
--- a/pkg/cloudprovider/vsphere/nodemanager_test.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/cloudprovider/vsphere/nodemanager_test.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -201,3 +201,70 @@
 		t.Errorf("IPv6 does not match. expected: 10.161.34.192, actual: %s", ips[0])
 	}
 }
+
+func TestDiscoverNodeAddressByCollections(t *testing.T) {
+	cfg, ok := configFromEnvOrSim(true)
+	defer ok()
+
+	cfg.VirtualCenter["127.0.0.1"].ExternalNetworkNames = []string{
+		"extnet1",
+	}
+
+	cfg.VirtualCenter["127.0.0.1"].InternalNetworkNames = []string{
+		"intnet1",
+	}
+
+	connMgr := cm.NewConnectionManager(cfg, nil, nil)
+	defer connMgr.Logout()
+
+	nm := newNodeManager(nil, connMgr)
+
+	vm := simulator.Map.Any("VirtualMachine").(*simulator.VirtualMachine)
+	vm.Guest.HostName = strings.ToLower(vm.Name) // simulator.SearchIndex.FindByDnsName matches against the guest.hostName property
+	vm.Guest.Net = []vimtypes.GuestNicInfo{
+		{
+			Network:   "foo-bar",
+			IpAddress: []string{"10.0.0.1"},
+		},
+		{
+			Network:   "extnet1",
+			IpAddress: []string{"100.0.0.1"},
+		},
+		{
+			Network:   "intnet1",
+			IpAddress: []string{"192.168.0.1"},
+		},
+	}
+	name := vm.Name
+
+	err := connMgr.Connect(context.Background(), connMgr.VsphereInstanceMap[cfg.Global.VCenterIP])
+	if err != nil {
+		t.Errorf("Failed to Connect to vSphere: %s", err)
+	}
+
+	err = nm.DiscoverNode(name, cm.FindVMByName)
+	if err != nil {
+		t.Errorf("Failed DiscoverNode: %s", err)
+	}
+
+	if len(nm.nodeNameMap) != 1 {
+		t.Errorf("Failed: nodeNameMap should be a length of 1")
+	}
+
+	discoveredNode := nm.nodeNameMap[strings.ToLower(name)]
+
+	foundInternal := false
+	foundExternal := false
+	for _, address := range discoveredNode.NodeAddresses {
+		if address.Type == v1.NodeExternalIP && address.Address == "100.0.0.1" {
+			foundExternal = true
+		}
+		if address.Type == v1.NodeInternalIP && address.Address == "192.168.0.1" {
+			foundInternal = true
+		}
+	}
+
+	if !foundInternal || !foundExternal {
+		t.Errorf("Unable to find proper IP addresses for node")
+	}
+}
Index: pkg/common/config/config.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config.go b/pkg/common/config/config.go
--- a/pkg/common/config/config.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/common/config/config.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -223,6 +223,21 @@
 				iPFamilyPriority = []string{ipFamily}
 			}

+			var internalNetworkNames []string
+			_, internalNetworkNamesEnv, errInternalNetworkNames := getEnvKeyValue("VCENTER_"+id+"_INTERNAL_NETWORK_NAMES", false)
+			if errInternalNetworkNames != nil {
+				internalNetworkNames = cfg.Global.InternalNetworkNames
+			} else {
+				internalNetworkNames = strings.Split(strings.TrimSpace(internalNetworkNamesEnv), ",")
+			}
+			var externalNetworkNames []string
+			_, externalNetworkNamesEnv, errExternalNetworkNames := getEnvKeyValue("VCENTER_"+id+"_EXTERNAL_NETWORK_NAMES", false)
+			if errExternalNetworkNames != nil {
+				externalNetworkNames = cfg.Global.ExternalNetworkNames
+			} else {
+				externalNetworkNames = strings.Split(strings.TrimSpace(externalNetworkNamesEnv), ",")
+			}
+
 			// If server is explicitly set, that means the vcenter value above is the TenantRef
 			vcenterIP := vcenter
 			tenantRef := vcenter
@@ -253,6 +268,8 @@
 			vcc.SecretName = secretName
 			vcc.SecretNamespace = secretNamespace
 			vcc.IPFamilyPriority = iPFamilyPriority
+			vcc.InternalNetworkNames = internalNetworkNames
+			vcc.ExternalNetworkNames = externalNetworkNames
 		}
 	}

Index: pkg/common/config/config_yaml.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config_yaml.go b/pkg/common/config/config_yaml.go
--- a/pkg/common/config/config_yaml.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/common/config/config_yaml.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -51,23 +51,27 @@
 	cfg.Global.SecretsDirectory = ccy.Global.SecretsDirectory
 	cfg.Global.APIDisable = ccy.Global.APIDisable
 	cfg.Global.APIBinding = ccy.Global.APIBinding
+	cfg.Global.InternalNetworkNames = ccy.Global.InternalNetworkNames
+	cfg.Global.ExternalNetworkNames = ccy.Global.ExternalNetworkNames

 	for keyVcConfig, valVcConfig := range ccy.Vcenter {
 		cfg.VirtualCenter[keyVcConfig] = &VirtualCenterConfig{
-			User:              valVcConfig.User,
-			Password:          valVcConfig.Password,
-			TenantRef:         valVcConfig.TenantRef,
-			VCenterIP:         valVcConfig.VCenterIP,
-			VCenterPort:       fmt.Sprint(valVcConfig.VCenterPort),
-			InsecureFlag:      valVcConfig.InsecureFlag,
-			Datacenters:       strings.Join(valVcConfig.Datacenters, ","),
-			RoundTripperCount: valVcConfig.RoundTripperCount,
-			CAFile:            valVcConfig.CAFile,
-			Thumbprint:        valVcConfig.Thumbprint,
-			SecretRef:         valVcConfig.SecretRef,
-			SecretName:        valVcConfig.SecretName,
-			SecretNamespace:   valVcConfig.SecretNamespace,
-			IPFamilyPriority:  valVcConfig.IPFamilyPriority,
+			User:                 valVcConfig.User,
+			Password:             valVcConfig.Password,
+			TenantRef:            valVcConfig.TenantRef,
+			VCenterIP:            valVcConfig.VCenterIP,
+			VCenterPort:          fmt.Sprint(valVcConfig.VCenterPort),
+			InsecureFlag:         valVcConfig.InsecureFlag,
+			Datacenters:          strings.Join(valVcConfig.Datacenters, ","),
+			RoundTripperCount:    valVcConfig.RoundTripperCount,
+			CAFile:               valVcConfig.CAFile,
+			Thumbprint:           valVcConfig.Thumbprint,
+			SecretRef:            valVcConfig.SecretRef,
+			SecretName:           valVcConfig.SecretName,
+			SecretNamespace:      valVcConfig.SecretNamespace,
+			IPFamilyPriority:     valVcConfig.IPFamilyPriority,
+			InternalNetworkNames: valVcConfig.InternalNetworkNames,
+			ExternalNetworkNames: valVcConfig.ExternalNetworkNames,
 		}
 	}

@@ -108,20 +112,22 @@
 	// VirtualCenter does not already exist in the map
 	if ccy.Global.VCenterIP != "" && ccy.Vcenter[ccy.Global.VCenterIP] == nil {
 		ccy.Vcenter[ccy.Global.VCenterIP] = &VirtualCenterConfigYAML{
-			User:              ccy.Global.User,
-			Password:          ccy.Global.Password,
-			TenantRef:         ccy.Global.VCenterIP,
-			VCenterIP:         ccy.Global.VCenterIP,
-			VCenterPort:       ccy.Global.VCenterPort,
-			InsecureFlag:      ccy.Global.InsecureFlag,
-			Datacenters:       ccy.Global.Datacenters,
-			RoundTripperCount: ccy.Global.RoundTripperCount,
-			CAFile:            ccy.Global.CAFile,
-			Thumbprint:        ccy.Global.Thumbprint,
-			SecretRef:         DefaultCredentialManager,
-			SecretName:        ccy.Global.SecretName,
-			SecretNamespace:   ccy.Global.SecretNamespace,
-			IPFamilyPriority:  ccy.Global.IPFamilyPriority,
+			User:                 ccy.Global.User,
+			Password:             ccy.Global.Password,
+			TenantRef:            ccy.Global.VCenterIP,
+			VCenterIP:            ccy.Global.VCenterIP,
+			VCenterPort:          ccy.Global.VCenterPort,
+			InsecureFlag:         ccy.Global.InsecureFlag,
+			Datacenters:          ccy.Global.Datacenters,
+			RoundTripperCount:    ccy.Global.RoundTripperCount,
+			CAFile:               ccy.Global.CAFile,
+			Thumbprint:           ccy.Global.Thumbprint,
+			SecretRef:            DefaultCredentialManager,
+			SecretName:           ccy.Global.SecretName,
+			SecretNamespace:      ccy.Global.SecretNamespace,
+			IPFamilyPriority:     ccy.Global.IPFamilyPriority,
+			InternalNetworkNames: ccy.Global.InternalNetworkNames,
+			ExternalNetworkNames: ccy.Global.ExternalNetworkNames,
 		}
 	}

@@ -190,6 +196,13 @@
 		if !insecure {
 			vcConfig.InsecureFlag = ccy.Global.InsecureFlag
 		}
+
+		if len(vcConfig.InternalNetworkNames) == 0 {
+			vcConfig.InternalNetworkNames = ccy.Global.InternalNetworkNames
+		}
+		if len(vcConfig.ExternalNetworkNames) == 0 {
+			vcConfig.ExternalNetworkNames = ccy.Global.ExternalNetworkNames
+		}
 	}

 	return nil
Index: pkg/common/config/config_yaml_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config_yaml_test.go b/pkg/common/config/config_yaml_test.go
--- a/pkg/common/config/config_yaml_test.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/common/config/config_yaml_test.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -43,6 +43,10 @@
 global:
   port: 443
   insecureFlag: true
+  externalNetworkNames:
+    - extglobalnet1
+  internalNetworkNames:
+    - intglobalnet1

 vcenter:
   tenant1:
@@ -63,6 +67,11 @@
       - vicdc
     secretName: eu-secret
     secretNamespace: kube-system
+    externalNetworkNames:
+      - extnet1
+    internalNetworkNames:
+      - intnet1
+      - intnet2
 `

 func TestReadConfigYAMLGlobal(t *testing.T) {
@@ -122,6 +131,12 @@
 	if !strings.EqualFold(vcConfig2.SecretRef, "kube-system/tenant2-secret") {
 		t.Errorf("vcConfig2 SecretRef should be kube-system/tenant2-secret but actual=%s", vcConfig2.SecretRef)
 	}
+	if !strings.EqualFold(vcConfig2.ExternalNetworkNames[0], "extglobalnet1") {
+		t.Errorf("vcConfig3 ExternalNetworkNames[0] should be extglobalnet1 but actual=%s", vcConfig2.ExternalNetworkNames[0])
+	}
+	if !strings.EqualFold(vcConfig2.InternalNetworkNames[0], "intglobalnet1") {
+		t.Errorf("vcConfig3 InternalNetworkNames[0] should be intglobalnet1 but actual=%s", vcConfig2.InternalNetworkNames[0])
+	}

 	vcConfig3 := cfg.VirtualCenter["10.0.0.3"]
 	if vcConfig3 == nil {
@@ -136,4 +151,13 @@
 	if !strings.EqualFold(vcConfig3.SecretRef, "kube-system/eu-secret") {
 		t.Errorf("vcConfig3 SecretRef should be kube-system/eu-secret but actual=%s", vcConfig3.SecretRef)
 	}
+	if !strings.EqualFold(vcConfig3.ExternalNetworkNames[0], "extnet1") {
+		t.Errorf("vcConfig3 ExternalNetworkNames[0] should be extnet1 but actual=%s", vcConfig3.SecretRef)
+	}
+	if !strings.EqualFold(vcConfig3.InternalNetworkNames[0], "intnet1") {
+		t.Errorf("vcConfig3 InternalNetworkNames[0] should be intnet1 but actual=%s", vcConfig3.InternalNetworkNames[0])
+	}
+	if !strings.EqualFold(vcConfig3.InternalNetworkNames[1], "intnet2") {
+		t.Errorf("vcConfig3 InternalNetworkNames[0] should be intnet2 but actual=%s", vcConfig3.InternalNetworkNames[1])
+	}
 }
Index: pkg/common/config/types_common.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/types_common.go b/pkg/common/config/types_common.go
--- a/pkg/common/config/types_common.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/common/config/types_common.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -59,6 +59,10 @@
 	// Configurable vSphere CCM API port
 	// Default: 43001
 	APIBinding string
+	// VirtualMachine network interfaces backed by the following vSphere Networks
+	// will be used in respective status.addresses fields
+	InternalNetworkNames []string
+	ExternalNetworkNames []string
 }

 // VirtualCenterConfig struct
@@ -100,6 +104,10 @@
 	// ipv4 - IPv4 addresses only (Default)
 	// ipv6 - IPv6 addresses only
 	IPFamilyPriority []string
+	// VirtualMachine network interfaces backed by the following vSphere Networks
+	// will be used in respective status.addresses fields
+	InternalNetworkNames []string
+	ExternalNetworkNames []string
 }

 // Labels struct
Index: pkg/common/config/types_yaml.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/types_yaml.go b/pkg/common/config/types_yaml.go
--- a/pkg/common/config/types_yaml.go	(revision 52978b832d1fb542f0f3b8c29674ca9e99a70027)
+++ b/pkg/common/config/types_yaml.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
@@ -69,6 +69,10 @@
 	// ipv4 - IPv4 addresses only (Default)
 	// ipv6 - IPv6 addresses only
 	IPFamilyPriority []string `yaml:"ipFamily"`
+	// VirtualMachine network interfaces backed by the following vSphere Networks
+	// will be used in respective status.addresses fields
+	InternalNetworkNames []string `yaml:"internalNetworkNames"`
+	ExternalNetworkNames []string `yaml:"externalNetworkNames"`
 }

 // VirtualCenterConfigYAML contains information used to access a remote vCenter
@@ -111,6 +115,10 @@
 	// ipv4 - IPv4 addresses only (Default)
 	// ipv6 - IPv6 addresses only
 	IPFamilyPriority []string `yaml:"ipFamily"`
+	// VirtualMachine network interfaces backed by the following vSphere Networks
+	// will be used in respective status.addresses fields
+	InternalNetworkNames []string `yaml:"internalNetworkNames"`
+	ExternalNetworkNames []string `yaml:"externalNetworkNames"`
 }

 // LabelsYAML tags categories and tags which correspond to "built-in node labels: zones and region"
