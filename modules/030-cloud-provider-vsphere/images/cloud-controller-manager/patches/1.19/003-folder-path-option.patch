DESCRIPTION: This patch adds vmFolderPath parameter to
VirtualCenter configuration section. This option acts like a
filter when CCM searches VM in vSphere.
~~~
Index: pkg/common/config/config.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config.go b/pkg/common/config/config.go
--- a/pkg/common/config/config.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/config/config.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -145,6 +145,10 @@
 		cfg.Labels.Zone = v
 	}

+	if v := os.Getenv("VSPHERE_VM_FOLDER_PATH"); v != "" {
+		cfg.Global.VmFolderPath = v
+	}
+
 	//Build VirtualCenter from ENVs
 	for _, e := range os.Environ() {
 		pair := strings.Split(e, "=")
@@ -238,6 +242,11 @@
 				externalNetworkNames = strings.Split(strings.TrimSpace(externalNetworkNamesEnv), ",")
 			}

+			_, vmFolderPath, errVmFolderPath := getEnvKeyValue("VCENTER_"+id+"_VM_FOLDER_PATH", false)
+			if errVmFolderPath != nil {
+				vmFolderPath = cfg.Global.VmFolderPath
+			}
+
 			// If server is explicitly set, that means the vcenter value above is the TenantRef
 			vcenterIP := vcenter
 			tenantRef := vcenter
@@ -270,6 +279,7 @@
 			vcc.IPFamilyPriority = iPFamilyPriority
 			vcc.InternalNetworkNames = internalNetworkNames
 			vcc.ExternalNetworkNames = externalNetworkNames
+			vcc.VmFolderPath = vmFolderPath
 		}
 	}

Index: pkg/common/config/config_yaml.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config_yaml.go b/pkg/common/config/config_yaml.go
--- a/pkg/common/config/config_yaml.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/config/config_yaml.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -53,6 +53,7 @@
 	cfg.Global.APIBinding = ccy.Global.APIBinding
 	cfg.Global.InternalNetworkNames = ccy.Global.InternalNetworkNames
 	cfg.Global.ExternalNetworkNames = ccy.Global.ExternalNetworkNames
+	cfg.Global.VmFolderPath = ccy.Global.VmFolderPath

 	for keyVcConfig, valVcConfig := range ccy.Vcenter {
 		cfg.VirtualCenter[keyVcConfig] = &VirtualCenterConfig{
@@ -72,6 +73,7 @@
 			IPFamilyPriority:     valVcConfig.IPFamilyPriority,
 			InternalNetworkNames: valVcConfig.InternalNetworkNames,
 			ExternalNetworkNames: valVcConfig.ExternalNetworkNames,
+			VmFolderPath:         valVcConfig.VmFolderPath,
 		}
 	}

@@ -128,6 +130,7 @@
 			IPFamilyPriority:     ccy.Global.IPFamilyPriority,
 			InternalNetworkNames: ccy.Global.InternalNetworkNames,
 			ExternalNetworkNames: ccy.Global.ExternalNetworkNames,
+			VmFolderPath:         ccy.Global.VmFolderPath,
 		}
 	}

@@ -203,6 +206,10 @@
 		if len(vcConfig.ExternalNetworkNames) == 0 {
 			vcConfig.ExternalNetworkNames = ccy.Global.ExternalNetworkNames
 		}
+
+		if vcConfig.VmFolderPath == "" {
+			vcConfig.VmFolderPath = ccy.Global.VmFolderPath
+		}
 	}

 	return nil
Index: pkg/common/config/config_yaml_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/config_yaml_test.go b/pkg/common/config/config_yaml_test.go
--- a/pkg/common/config/config_yaml_test.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/config/config_yaml_test.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -55,6 +55,7 @@
       - vic0dc
     secretName: tenant1-secret
     secretNamespace: kube-system
+    vmFolderPath: test/folder
   tenant2:
     server: 10.0.0.2
     datacenters:
@@ -117,6 +118,9 @@
 	if !strings.EqualFold(vcConfig1.SecretRef, "kube-system/tenant1-secret") {
 		t.Errorf("vcConfig1 SecretRef should be kube-system/tenant1-secret but actual=%s", vcConfig1.SecretRef)
 	}
+	if !strings.EqualFold(vcConfig1.VmFolderPath, "test/folder") {
+		t.Errorf("vcConfig1 VmFolderPath should be test/folder but actual=%s", vcConfig1.VmFolderPath)
+	}

 	vcConfig2 := cfg.VirtualCenter["tenant2"]
 	if vcConfig2 == nil {
Index: pkg/common/config/types_common.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/types_common.go b/pkg/common/config/types_common.go
--- a/pkg/common/config/types_common.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/config/types_common.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -63,6 +63,8 @@
 	// will be used in respective status.addresses fields
 	InternalNetworkNames []string
 	ExternalNetworkNames []string
+	// VmFolderPath (e.g. "production/ubuntu-test-runners") is a path (relative to root datacenter VM folder), in which Kubernetes VMs reside
+	VmFolderPath string
 }

 // VirtualCenterConfig struct
@@ -108,6 +110,8 @@
 	// will be used in respective status.addresses fields
 	InternalNetworkNames []string
 	ExternalNetworkNames []string
+	// VmFolderPath (e.g. "production/ubuntu-test-runners") is a path (relative to root datacenter VM folder), in which Kubernetes VMs reside
+	VmFolderPath string
 }

 // Labels struct
Index: pkg/common/config/types_yaml.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/config/types_yaml.go b/pkg/common/config/types_yaml.go
--- a/pkg/common/config/types_yaml.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/config/types_yaml.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -73,6 +73,8 @@
 	// will be used in respective status.addresses fields
 	InternalNetworkNames []string `yaml:"internalNetworkNames"`
 	ExternalNetworkNames []string `yaml:"externalNetworkNames"`
+	// VmFolderPath (e.g. "production/ubuntu-test-runners") is a path (relative to root datacenter VM folder), in which Kubernetes VMs reside
+	VmFolderPath string `yaml:"vmFolderPath"`
 }

 // VirtualCenterConfigYAML contains information used to access a remote vCenter
@@ -119,6 +121,8 @@
 	// will be used in respective status.addresses fields
 	InternalNetworkNames []string `yaml:"internalNetworkNames"`
 	ExternalNetworkNames []string `yaml:"externalNetworkNames"`
+	// VmFolderPath (e.g. "production/ubuntu-test-runners") is a path (relative to root datacenter VM folder), in which Kubernetes VMs reside
+	VmFolderPath string `yaml:"vmFolderPath"`
 }

 // LabelsYAML tags categories and tags which correspond to "built-in node labels: zones and region"
Index: pkg/common/connectionmanager/search.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/connectionmanager/search.go b/pkg/common/connectionmanager/search.go
--- a/pkg/common/connectionmanager/search.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/connectionmanager/search.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -168,13 +168,25 @@
 				var vm *vclib.VirtualMachine
 				var err error

-				switch searchBy {
-				case FindVMByUUID:
-					vm, err = res.datacenter.GetVMByUUID(ctx, myNodeID)
-				case FindVMByIP:
-					vm, err = res.datacenter.GetVMByIP(ctx, myNodeID)
-				default:
-					vm, err = res.datacenter.GetVMByDNSName(ctx, myNodeID)
+				folderPath := cm.VsphereInstanceMap[res.tenantRef].Cfg.VmFolderPath
+				if len(folderPath) == 0 {
+					switch searchBy {
+					case FindVMByUUID:
+						vm, err = res.datacenter.GetVMByUUID(ctx, myNodeID)
+					case FindVMByIP:
+						vm, err = res.datacenter.GetVMByIP(ctx, myNodeID)
+					default:
+						vm, err = res.datacenter.GetVMByDNSName(ctx, myNodeID)
+					}
+				} else {
+					switch searchBy {
+					case FindVMByUUID:
+						vm, err = res.datacenter.GetVMByUUIDInFolder(ctx, myNodeID, folderPath)
+					case FindVMByIP:
+						vm, err = res.datacenter.GetVMByIPInFolder(ctx, myNodeID, folderPath)
+					default:
+						vm, err = res.datacenter.GetVMByDNSNameInFolder(ctx, myNodeID, folderPath)
+					}
 				}

 				if err != nil {
Index: pkg/common/vclib/datacenter.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/vclib/datacenter.go b/pkg/common/vclib/datacenter.go
--- a/pkg/common/vclib/datacenter.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/vclib/datacenter.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -20,6 +20,7 @@
 	"context"
 	"errors"
 	"fmt"
+	"path"
 	"path/filepath"
 	"strings"

@@ -93,6 +94,55 @@
 	virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
 	return &virtualMachine, nil
 }
+
+// GetVMByIPInFolder gets the VM object from the given IP address and folder path
+func (dc *Datacenter) GetVMByIPInFolder(ctx context.Context, ipAddy, folderPath string) (*VirtualMachine, error) {
+	finder := find.NewFinder(dc.Client())
+
+	vmFolder, err := finder.Folder(ctx, path.Join("/", dc.Name(), "vm", folderPath))
+
+	s := object.NewSearchIndex(dc.Client())
+	ipAddy = strings.ToLower(strings.TrimSpace(ipAddy))
+
+	vmRefs, err := s.FindAllByIp(ctx, dc.Datacenter, ipAddy, true)
+	if err != nil {
+		klog.Errorf("Can't find VMs by IP %s: %s", ipAddy, err)
+		return nil, err
+	}
+	if len(vmRefs) == 0 {
+		klog.Errorf("Can't find VMs by IP %s: %s", ipAddy, err)
+		return nil, ErrNoVMFound
+	}
+
+	var matchingChildRef *types.ManagedObjectReference
+	for _, vmRef := range vmRefs {
+		hasAncestor, err := ObjectHasAncestor(ctx, dc.Client(), vmRef, vmFolder.Reference())
+		if err != nil {
+			klog.Errorf("can't find whether %+v has %+v ancestor: %s", vmRef, vmFolder.Reference(), err)
+			return nil, err
+		}
+
+		if hasAncestor {
+			childRef := vmRef.Reference()
+			matchingChildRef = &childRef
+			break
+		}
+	}
+
+	if matchingChildRef != nil {
+		svm := object.NewReference(s.Client(), matchingChildRef.Reference())
+		if svm == nil {
+			klog.Errorf("Unable to find VM by IP. VM IP: %s", ipAddy)
+			return nil, ErrNoVMFound
+		}
+
+		virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
+		return &virtualMachine, nil
+	} else {
+		klog.Errorf("Unable to find VM by IP. VM IP: %s", ipAddy)
+		return nil, ErrNoVMFound
+	}
+}

 // GetVMByDNSName gets the VM object from the given dns name
 func (dc *Datacenter) GetVMByDNSName(ctx context.Context, dnsName string) (*VirtualMachine, error) {
@@ -110,6 +160,55 @@
 	virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
 	return &virtualMachine, nil
 }
+
+// GetVMByDNSNameInFolder gets the VM object from the given dns name in folder path
+func (dc *Datacenter) GetVMByDNSNameInFolder(ctx context.Context, dnsName, folderPath string) (*VirtualMachine, error) {
+	finder := find.NewFinder(dc.Client())
+
+	vmFolder, err := finder.Folder(ctx, path.Join("/", dc.Name(), "vm", folderPath))
+
+	s := object.NewSearchIndex(dc.Client())
+	dnsName = strings.ToLower(strings.TrimSpace(dnsName))
+
+	vmRefs, err := s.FindAllByDnsName(ctx, dc.Datacenter, dnsName, true)
+	if err != nil {
+		klog.Errorf("Can't find VMs by DNS Name %s: %s", dnsName, err)
+		return nil, err
+	}
+	if len(vmRefs) == 0 {
+		klog.Errorf("Can't find VMs by DNS Name %s: %s", dnsName, err)
+		return nil, ErrNoVMFound
+	}
+
+	var matchingChildRef *types.ManagedObjectReference
+	for _, vmRef := range vmRefs {
+		hasAncestor, err := ObjectHasAncestor(ctx, dc.Client(), vmRef, vmFolder.Reference())
+		if err != nil {
+			klog.Errorf("can't find whether %+v has %+v ancestor: %s", vmRef, vmFolder.Reference(), err)
+			return nil, err
+		}
+
+		if hasAncestor {
+			childRef := vmRef.Reference()
+			matchingChildRef = &childRef
+			break
+		}
+	}
+
+	if matchingChildRef != nil {
+		svm := object.NewReference(s.Client(), matchingChildRef.Reference())
+		if svm == nil {
+			klog.Errorf("Unable to find VM by DNS Name. VM DNS Name: %s", dnsName)
+			return nil, ErrNoVMFound
+		}
+
+		virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
+		return &virtualMachine, nil
+	} else {
+		klog.Errorf("Unable to find VM by DNS Name. VM DNS Name: %s", dnsName)
+		return nil, ErrNoVMFound
+	}
+}

 // GetVMByUUID gets the VM object from the given vmUUID
 func (dc *Datacenter) GetVMByUUID(ctx context.Context, vmUUID string) (*VirtualMachine, error) {
@@ -127,6 +226,58 @@
 	virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
 	return &virtualMachine, nil
 }
+
+// GetVMByUUIDInFolder gets the VM object from the given vmUUID address and folder path
+func (dc *Datacenter) GetVMByUUIDInFolder(ctx context.Context, vmUUID, folderPath string) (*VirtualMachine, error) {
+	finder := find.NewFinder(dc.Client())
+
+	vmFolder, err := finder.Folder(ctx, path.Join("/", dc.Name(), "vm", folderPath))
+	if err != nil {
+		return nil, err
+	}
+
+	s := object.NewSearchIndex(dc.Client())
+	vmUUID = strings.ToLower(strings.TrimSpace(vmUUID))
+
+	vmRefs, err := s.FindAllByUuid(ctx, dc.Datacenter, vmUUID, true, nil)
+	if err != nil {
+		klog.Errorf("Can't find VMs by UUID %s: %s", vmUUID, err)
+		return nil, err
+	}
+	if len(vmRefs) == 0 {
+		klog.Errorf("Can't find VMs by UUID %s: %s", vmUUID, err)
+		return nil, ErrNoVMFound
+	}
+
+	var matchingChildRef *types.ManagedObjectReference
+	for _, vmRef := range vmRefs {
+		hasAncestor, err := ObjectHasAncestor(ctx, dc.Client(), vmRef, vmFolder.Reference())
+		if err != nil {
+			klog.Errorf("can't find whether %+v has %+v ancestor: %s", vmRef, vmFolder.Reference(), err)
+			return nil, err
+		}
+
+		if hasAncestor {
+			childRef := vmRef.Reference()
+			matchingChildRef = &childRef
+			break
+		}
+	}
+
+	if matchingChildRef != nil {
+		svm := object.NewReference(s.Client(), matchingChildRef.Reference())
+		if svm == nil {
+			klog.Errorf("Unable to find VM by UUID. VM UUID: %s", vmUUID)
+			return nil, ErrNoVMFound
+		}
+
+		virtualMachine := VirtualMachine{svm.(*object.VirtualMachine), dc}
+		return &virtualMachine, nil
+	} else {
+		klog.Errorf("Unable to find VM by UUID. VM UUID: %s", vmUUID)
+		return nil, ErrNoVMFound
+	}
+}

 // GetVMByPath gets the VM object from the given vmPath
 // vmPath should be the full path to VM and not just the name
Index: pkg/common/vclib/utils.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/common/vclib/utils.go b/pkg/common/vclib/utils.go
--- a/pkg/common/vclib/utils.go	(revision 2e4610dbef94d74ca6b27a3cf8a84b069be8e148)
+++ b/pkg/common/vclib/utils.go	(revision 9282f97b80c32eee16be28b732dd32773d26fc21)
@@ -17,7 +17,10 @@
 package vclib

 import (
+	"context"
 	"fmt"
+	"github.com/vmware/govmomi/property"
+	"github.com/vmware/govmomi/vim25"
 	"path/filepath"
 	"regexp"
 	"strings"
@@ -218,3 +221,21 @@
 	}
 	return false
 }
+
+// ObjectHasAncestor checks if requiredAncestor present in object
+func ObjectHasAncestor(ctx context.Context, client *vim25.Client, object object.Reference, requiredAncestor object.Reference) (bool, error) {
+	ancestors, err := mo.Ancestors(ctx, client.Client, property.DefaultCollector(client).Reference(), object.Reference())
+	if err != nil {
+		return false, fmt.Errorf("can't collect ancestors for vm %+v", object.Reference())
+	}
+
+	var found bool
+	for _, ancestor := range ancestors {
+		if ancestor.Reference() == requiredAncestor.Reference() {
+			found = true
+			break
+		}
+	}
+
+	return found, nil
+}
