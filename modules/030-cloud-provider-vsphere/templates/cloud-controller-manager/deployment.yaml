{{- $kubernetesSemVer := semver .Values.global.discovery.kubernetesVersion }}
{{- $ccmImageName := join "" (list "cloudControllerManager" $kubernetesSemVer.Major $kubernetesSemVer.Minor ) }}
{{- if hasKey .Values.global.modulesImages.tags.cloudProviderVsphere $ccmImageName }}
  {{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: cloud-controller-manager
  namespace: d8-cloud-provider-vsphere
{{ include "helm_lib_module_labels" (list . (dict "app" "cloud-controller-manager" "workload-resource-policy.deckhouse.io" "master")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: cloud-controller-manager
  updatePolicy:
    updateMode: "Auto"
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
  namespace: d8-cloud-provider-vsphere
{{ include "helm_lib_module_labels" (list . (dict "app" "cloud-controller-manager")) | indent 2 }}
spec:
{{- include "helm_lib_deployment_on_master_strategy_and_replicas_for_ha" . | indent 2 }}
  selector:
    matchLabels:
      app: cloud-controller-manager
  template:
    metadata:
      labels:
        app: cloud-controller-manager
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cloud-controller-manager/secret.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
      - name: deckhouse-registry
{{- include "helm_lib_priority_class" (tuple . "cluster-critical") | indent 6 }}
{{- include "helm_lib_pod_anti_affinity_for_ha" (list . (dict "app" "cloud-controller-manager")) | indent 6 }}
{{- include "helm_lib_node_selector" (tuple . "master") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "wildcard") | indent 6 }}
      hostNetwork: true
      securityContext:
        runAsUser: 1001
      serviceAccountName: cloud-controller-manager
      containers:
        - name: vsphere-cloud-controller-manager
          image: {{ .Values.global.modulesImages.registry }}/cloud-provider-vsphere/cloud-controller-manager-{{ $kubernetesSemVer.Major }}-{{ $kubernetesSemVer.Minor }}:{{ index .Values.global.modulesImages.tags.cloudProviderVsphere $ccmImageName }}
          args:
          - --leader-elect=true
          - --cloud-config=/etc/cloud-contoller-manager-config/cloud-config
          - --cloud-provider=vsphere
          - --bind-address=0.0.0.0
          - --secure-port=10871
          - --v=4
          ports:
          - name: https
            containerPort: 10871
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
          volumeMounts:
            - mountPath: /etc/kubernetes/pki
              name: k8s-certs
              readOnly: true
            - mountPath: /etc/cloud-contoller-manager-config
              name: config
              readOnly: true
      volumes:
      - hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate
        name: k8s-certs
      - name: config
        secret:
          secretName: cloud-controller-manager
{{- end }}
