#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: bootstrap_tokens
      queue: /modules/cloud_instance_manager
      includeSnapshotsFrom: [bootstrap_tokens]
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          heritage: deckhouse
          module: cloud-instance-manager
      jqFilter: |
        {
          "validFor": (
            if (.type == "bootstrap.kubernetes.io/token") and (.data | has("expiration"))
            then
              .data.expiration | @base64d | (fromdateiso8601 - now)
            else null end
          ),
          "name": .metadata.name,
          "bootstrapToken": (
            if (.data | has("token-id")) and (.data | has("token-secret"))
            then
              (.data."token-id" | @base64d) + "." + (.data."token-secret" | @base64d)
            else null end
          ),
          "creationTimestamp": .metadata.creationTimestamp
        }
    schedule:
    - queue: /modules/cloud_instance_manager/order_bootstrap_token
      crontab: "23 * * * *"
      includeSnapshotsFrom: [bootstrap_tokens]
EOF
}

function __main__() {
  # Remove all expired tokens
  expiredTokens="$(context::jq -r '.snapshots.bootstrap_tokens[] | select(.filterResult.validFor != null and .filterResult.validFor <= 0) | .filterResult.name')"
  for s in $expiredTokens; do
    kubernetes::delete kube-system secret/$s
  done

  latestToken="$(context::jq -r '[.snapshots.bootstrap_tokens[] | select(.filterResult.validFor != null)] | sort_by(.filterResult.creationTimestamp) | last')"
  if jq -e '.filterResult.validFor > 10800' <<< "$latestToken" > /dev/null; then
    # token is valid for more than 3 hours — we can use it
    values::set cloudInstanceManager.internal.bootstrapToken "$(jq -r '.filterResult.bootstrapToken' <<< "$latestToken")"
  else
    # token is not valid for more than 3 hours or doesn't exist — we must generate the new one
    token_id=$(pwgen -sA 6 1 | tr -d '\n')
    token_secret=$(pwgen -sA 16 1 | tr -d '\n')

    kubernetes::create_yaml <<END
apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-token-$token_id
  namespace: kube-system
  labels:
    heritage: deckhouse
    module: cloud-instance-manager
type: bootstrap.kubernetes.io/token
data:
  expiration: $(date +"%Y-%m-%dT%H:%M:%SZ" -d @$(expr "$(date +'%s')" + 14400) | tr -d '\n' | base64 -w0)
  token-id: $(echo -n $token_id | base64 -w0)
  token-secret: $(echo -n $token_secret | base64 -w0)
  auth-extra-groups: $(echo -n system:bootstrappers:kubeadm:default-node-token,system:bootstrappers:cloud-instance-manager:machine-bootstrap | base64 -w0)
  usage-bootstrap-authentication: $(echo -n true | base64 -w0)
  usage-bootstrap-signing: $(echo -n true | base64 -w0)
END

  values::set cloudInstanceManager.internal.bootstrapToken "$token_id.$token_secret"
  fi
}

hook::run "$@"
