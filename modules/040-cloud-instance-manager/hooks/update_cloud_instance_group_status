#!/bin/bash

source /antiopa/shell_lib.sh

function __config__() {
  echo '
{
  "onKubernetesEvent": [
    {
      "kind": "MachineDeployment",
      "event": ["add", "update"],
      "namespaceSelector": {
        "matchNames": [
          "d8-cloud-instance-manager"
        ]
      },
      "jqFilter": ".status | del(.conditions) | del(.observedGeneration)"
    }
  ]
}'
}

function __main__() {
  name=$(hook::context_jq -r '.[0].resourceName')
  if ! ig=$(kubectl -n d8-cloud-instance-manager get machinedeployment "$name" -ojsonpath="{.metadata.labels.instance-group}" 2>/dev/null); then
    # MachineDeployment object was deleted or has no associated instance-group
    exit 0
  fi
  if ! ig_specs=$(kubectl get cig "$ig" -o json 2>/dev/null | jq -cr '.spec') ; then
    # CloudInstanceGroup object was deleted
    exit 0
  fi

  desired=$(kubectl -n d8-cloud-instance-manager get -l instance-group="$ig" machinedeployment -o json \
    | jq -r '.items[] | .spec.replicas' | jq -s 'reduce .[] as $num (0; .+$num)')

  machines_in_ig=$(kubectl -n d8-cloud-instance-manager get machine -o json \
    | jq "[ .items[] | select(.metadata.labels.\"instance-group\" | test(\"$ig.+\") ) ]")
  machines=$(echo "$machines_in_ig" | jq 'length')

  nodes=$(echo "$machines_in_ig" | jq '[.[] | .status.node | select(. != null) ] | length')
  ready=$(kubectl get nodes -l cloud-instance-manager.deckhouse.io/cloud-instance-group="$ig" -o json \
    | jq -r '[.items[] | select(.status.conditions[-1].type == "Ready")] | length')

  zones=$(values::get --required cloudInstanceManager.internal.cloudProvider.zones | jq 'length')

  max=$(( $(echo "$ig_specs" | jq -r '.maxInstancesPerZone') * zones ))
  min=$(( $(echo "$ig_specs" | jq -r '.minInstancesPerZone') * zones ))

  curl -XPATCH \
    -H "Content-Type: application/json-patch+json" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
    "https://kubernetes.default.svc/apis/deckhouse.io/v1alpha1/cloudinstancegroups/$ig/status" \
    --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
    --data "[{\"op\":\"add\",\"path\":\"/status\",\"value\":{\"desired\":$desired,\"machines\":$machines,\"nodes\":$nodes,\"ready\":$ready,\"max\":$max,\"min\":$min}}]" \
  >/dev/null 2>/dev/null
}

hook::run "$@"
