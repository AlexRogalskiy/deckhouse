#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    afterHelm: 10
    kubernetes:
    - name: cigs
      queue: /modules/cloud_instance_manager/update_cigs_statuses
      includeSnapshotsFrom: [cigs,cloud_provider_secret,mds,machines,nodes]
      watchEvent: ["Added", "Modified"]
      apiVersion: deckhouse.io/v1alpha1
      kind: CloudInstanceGroup
      jqFilter: |
        {
          "name": .metadata.name,
          "maxInstancesPerZone": .spec.maxInstancesPerZone,
          "minInstancesPerZone": .spec.minInstancesPerZone,
          "zonesNum": (if (.spec | has("zones")) then (.spec.zones | length) else null end)
        }
    - name: cloud_provider_secret
      queue: /modules/cloud_instance_manager/update_cigs_statuses
      includeSnapshotsFrom: [cigs,cloud_provider_secret,mds,machines,nodes]
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-cloud-instance-manager-cloud-provider]
      jqFilter: |
        (.data | [to_entries[] | (.value |= (. | @base64d))] | from_entries)
        +
        (.data | [to_entries[] | try(.value |= (. | @base64d | fromjson))] | from_entries)
        | {"zonesNum": (.zones | length)}
    - name: mds
      queue: /modules/cloud_instance_manager/update_cigs_statuses
      includeSnapshotsFrom: [cigs,cloud_provider_secret,mds,machines,nodes]
      watchEvent: ["Added", "Modified"]
      apiVersion: machine.sapcloud.io/v1alpha1
      kind: MachineDeployment
      namespace:
        nameSelector:
          matchNames: [d8-cloud-instance-manager]
      jqFilter: '{"instanceGroup": .metadata.labels."instance-group", "replicas": .spec.replicas}'
    - name: machines
      queue: /modules/cloud_instance_manager/update_cigs_statuses
      includeSnapshotsFrom: [cigs,cloud_provider_secret,mds,machines,nodes]
      watchEvent: ["Added", "Modified"]
      apiVersion: machine.sapcloud.io/v1alpha1
      kind: Machine
      namespace:
        nameSelector:
          matchNames: [d8-cloud-instance-manager]
      jqFilter: '{"instanceGroup": .metadata.labels."instance-group"}'
    - name: nodes
      queue: /modules/cloud_instance_manager/update_cigs_statuses
      includeSnapshotsFrom: [cigs,cloud_provider_secret,mds,machines,nodes]
      apiVersion: v1
      kind: Node
      labelSelector:
        matchExpressions:
        - key: "cloud-instance-manager.deckhouse.io/cloud-instance-group"
          operator: Exists
      jqFilter: |
        {
          "name": .metadata.name,
          "cloudInstanceGroup": .metadata.labels."cloud-instance-manager.deckhouse.io/cloud-instance-group",
          "isReady": ([.status.conditions[] | select(.type == "Ready")][-1].status == "True")
        }
EOF
}

function __main__() {
  if context::has snapshots.cloud_provider_secret.0; then
    default_zones_num="$(context::jq -r '.snapshots.cloud_provider_secret[0].filterResult.zonesNum')"
  else
    >&2 echo "ERROR: can't find '.data.zones' in secret kube-system/d8-cloud-instance-manager-cloud-provider."
    return 1
  fi

  for i in $(context::jq -r '.snapshots.cigs | keys[]'); do
    cig_name="$(context::get snapshots.cigs.$i.filterResult.name)"

    desired_machines="$(context::jq -r --arg cig_name "${cig_name}" '[.snapshots.mds[] | select(.filterResult.instanceGroup == $cig_name) | .filterResult.replicas] | add // 0')"
    machines="$(context::jq -r --arg cig_name "${cig_name}" '[.snapshots.machines[] | select(.filterResult.instanceGroup | test("^" + $cig_name + "-.+"))] | length')"
    nodes="$(context::jq -r --arg cig_name "${cig_name}" '[.snapshots.nodes[] | select(.filterResult.cloudInstanceGroup == $cig_name)] | length')"
    ready_nodes="$(context::jq -r --arg cig_name "${cig_name}" '[.snapshots.nodes[] | select(.filterResult.cloudInstanceGroup == $cig_name and .filterResult.isReady)] | length')"

    status_patch="$(context::jq -c \
      --arg i $i \
      --arg default_zones_num $default_zones_num \
      --arg desired_machines_num "$desired_machines" \
      --arg machines_num "$machines" \
      --arg nodes_num "$nodes" \
      --arg ready_nodes_num "$ready_nodes" \
      '.snapshots.cigs[$i | tonumber].filterResult |
        {
          "max": (.maxInstancesPerZone * (.zonesNum // ($default_zones_num | tonumber))),
          "min": (.minInstancesPerZone * (.zonesNum // ($default_zones_num | tonumber))),
          "desired": ($desired_machines_num | tonumber),
          "machines": ($machines_num | tonumber),
          "nodes": ($nodes_num | tonumber),
          "ready": ($ready_nodes_num | tonumber)
        }
    ')"

    kubernetes::status::patch "" "deckhouse.io/v1alpha1" "cloudinstancegroups" "${cig_name}" "${status_patch}"
  done
}

hook::run "$@"
