#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: mds
      queue: /modules/cloud_instance_manager/set_replicas_on_machine_deployment
      includeSnapshotsFrom: [mds,cigs]
      apiVersion: machine.sapcloud.io/v1alpha1
      kind: MachineDeployment
      namespace:
        nameSelector:
          matchNames: [d8-cloud-instance-manager]
      jqFilter: '{"name": .metadata.name, "instanceGroup": .metadata.labels."instance-group", "replicas": .spec.replicas}'
    - name: cigs
      queue: /modules/cloud_instance_manager/set_replicas_on_machine_deployment
      includeSnapshotsFrom: [mds,cigs]
      apiVersion: deckhouse.io/v1alpha1
      kind: CloudInstanceGroup
      jqFilter: '{"name": .metadata.name, "min": .spec.minInstancesPerZone, "max": .spec.maxInstancesPerZone}'
EOF
}

function __main__() {
  for i in $(context::jq -r '.snapshots.mds | keys[]'); do
    name="$(context::get snapshots.mds.$i.filterResult.name)"
    ig_name="$(context::get snapshots.mds.$i.filterResult.instanceGroup)"
    replicas="$(context::get snapshots.mds.$i.filterResult.replicas)"

    ig_index="$(context::jq -r --arg ig_name "$ig_name" '.snapshots.cigs | to_entries[] | select(.value.filterResult.name == $ig_name) | .key')"
    ig_min_instances="$(context::get snapshots.cigs.$ig_index.filterResult.min)"
    ig_max_instances="$(context::get snapshots.cigs.$ig_index.filterResult.max)"

    replicas_should_be=""
    if [[ $ig_min_instances -ge $ig_max_instances ]] ; then
      replicas_should_be=$ig_max_instances
    elif [[ "$replicas" == "null" || $replicas -eq 0 ]] ; then
      replicas_should_be=$ig_min_instances
    elif [[ $replicas -le $ig_min_instances ]] ; then
      replicas_should_be=$ig_min_instances
    elif [[ $replicas -gt $ig_max_instances ]] ; then
      replicas_should_be=$ig_max_instances
    fi

    kubernetes::patch_jq d8-cloud-instance-manager machinedeployment/$name '.spec.replicas = '${replicas_should_be}
  done
}

hook::run "$@"
