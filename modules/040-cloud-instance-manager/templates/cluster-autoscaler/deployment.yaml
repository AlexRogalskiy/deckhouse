{{- define "cluster_autoscaler_enabled" }}
  {{- range $ig := .Values.cloudInstanceManager.internal.instanceGroups }}
    {{- if lt (int $ig.minInstancesPerZone) (int $ig.maxInstancesPerZone) }}
      1
    {{- end }}
  {{- end }}
{{- end }}

{{- define "cluster_autoscaler_nodes" }}
  {{- range $ig := .Values.cloudInstanceManager.internal.instanceGroups }}
    {{- range $zone_name := $ig.zones }}
      {{- if $.Values.cloudInstanceManager.instancePrefix }}
- --nodes={{ $ig.minInstancesPerZone }}:{{ $ig.maxInstancesPerZone }}:d8-cloud-instance-manager.{{ $.Values.cloudInstanceManager.instancePrefix }}-{{ $ig.name }}-{{ printf "%v%v" $.Values.global.discovery.clusterUUID $zone_name | sha256sum | trunc 8 }}
      {{- else }}
- --nodes={{ $ig.minInstancesPerZone }}:{{ $ig.maxInstancesPerZone }}:d8-cloud-instance-manager.{{ $ig.name }}-{{ printf "%v%v" $.Values.global.discovery.clusterUUID $zone_name | sha256sum | trunc 8 }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- if include "cluster_autoscaler_enabled" . }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: d8-cloud-instance-manager
{{ include "helm_lib_module_labels" (list . (dict "app" "cluster-autoscaler")) | indent 2 }}
spec:
  selector:
    matchLabels:
      app: cluster-autoscaler
  revisionHistoryLimit: 0
  replicas: 1
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
{{- include "helm_lib_priority_class" (tuple . "cluster-critical") | indent 6 }}
      serviceAccountName: cluster-autoscaler
      terminationGracePeriodSeconds: 5
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - operator: Exists
      imagePullSecrets:
      - name: deckhouse-registry
      containers:
      - name: cluster-autoscaler
        image: {{ .Values.global.modulesImages.registry }}/cloud-instance-manager/cluster-autoscaler:{{ .Values.global.modulesImages.tags.cloudInstanceManager.clusterAutoscaler }}
        args:
        - --namespace=d8-cloud-instance-manager
        - --cloud-provider=mcm
        - --write-status-configmap=false
{{ include "cluster_autoscaler_nodes" . | indent 8 }}
        - --stderrthreshold=info
        - --skip-nodes-with-system-pods=false
        - --skip-nodes-with-local-storage=false
        - --min-replica-count=1
        - --expander=least-waste
        - --expendable-pods-priority-cutoff=-10
        - --scale-down-unneeded-time=2m
        - --scale-down-unready-time=4m
        - --scale-down-delay-after-failure=1m
        - --scale-down-utilization-threshold=0.6
        - --unremovable-node-recheck-timeout=30s
        - --scale-down-delay-after-add=2m
        - --address=127.0.0.1:8085
        - --v=2
        env:
        - name: CONTROL_NAMESPACE
          value: d8-cloud-instance-manager
        resources:
          limits:
            cpu: 150m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
      - name: kube-rbac-proxy
        image: {{ .Values.global.modulesImages.registry }}/common/kube-rbac-proxy:{{ .Values.global.modulesImages.tags.common.kubeRbacProxy }}
        args:
        - "--secure-listen-address=$(KUBE_RBAC_PROXY_LISTEN_ADDRESS):443"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: KUBE_RBAC_PROXY_LISTEN_ADDRESS
          value: "0.0.0.0"
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            upstreams:
            - upstream: http://127.0.0.1:8085/metrics
              path: /metrics
              authorization:
                resourceAttributes:
                  namespace: d8-cloud-instance-manager
                  apiGroup: apps
                  apiVersion: v1
                  resource: deployments
                  subresource: prometheus-metrics
                  name: cluster-autoscaler
        ports:
        - containerPort: 443
          name: https-metrics
        livenessProbe:
          tcpSocket:
            port: 443
        readinessProbe:
          tcpSocket:
            port: 443
        resources:
          requests:
            memory: 50Mi
            cpu: 25m
{{- end }}
