#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 30
    kubernetes:
    - name: module_storageclasses
      group: main
      keepFullObjectsInMemory: false
      apiVersion: storage.k8s.io/v1
      kind: Storageclass
      labelSelector:
        matchLabels:
          heritage: deckhouse
      jqFilter: |
        {
          "name": .metadata.name,
          "type": .parameters.type,
          "iopsPerGB": (if .parameters.iopsPerGB == null then null else .parameters.iopsPerGB | tonumber end),
          "iops": (if .parameters.iops == null then null else .parameters.iops | tonumber end),
          "throughput": (if .parameters.throughput == null then null else .parameters.throughput | tonumber end)
        }
EOF
}

function __main__() {
  storage_classes="$(jq '
    [.[] |
      {
        "type": .,
        "name": .
      }
    ]
    ' <<< '["gp3","gp2","sc1","st1"]')"

  if values::has cloudProviderAws.storageClass.provision; then
    provision="$(values::get cloudProviderAws.storageClass.provision)"

    # Exclude provision storage class names from the default list to prevent duplicates.
    storage_classes="$(jq --arg exclude "$(jq -r '[.[].name] | join("|")' <<< "$provision")" '
      map(select(.name | test("^(\($exclude))$") | not))
      ' <<< "$storage_classes")"

    storage_classes="$(jq --argjson provision "$provision" '
      . + $provision
      ' <<< "$storage_classes")"
  fi

  if values::has cloudProviderAws.storageClass.exclude; then
    storage_classes="$(jq --arg exclude "$(values::get cloudProviderAws.storageClass.exclude | jq -r 'join("|")')" '
      map(select(.name | test("^(\($exclude))$") | not))
      ' <<< "$storage_classes")"
  fi
  storage_classes="$(jq 'sort_by(.name)' <<< "$storage_classes")"
  values::set cloudProviderAws.internal.storageClasses "$storage_classes"

  if values::has cloudProviderAws.storageClass.default; then
    values::set cloudProviderAws.internal.defaultStorageClass "$(values::get cloudProviderAws.storageClass.default)"
  else
    values::unset cloudProviderAws.internal.defaultStorageClass
  fi

  # Delete StorageClasses with modified `.parameters` from the cluster because updates to parameters are forbidden.
  for exist_sc in $(context::jq -c '.snapshots.module_storageclasses[].filterResult | del(.[] | nulls)'); do
    # Seems that `--sort-keys` not work with del(), so we have to apply sorting separately.
    exist_sc=$(jq -c --sort-keys <<< "$exist_sc")
    exist_sc_name="$(jq -r '.name' <<< "$exist_sc")"
    new_sc="$(jq -c --sort-keys --arg sc_name "$exist_sc_name" '.[] | select(.name == $sc_name)' <<< "$storage_classes")"
    if [[ "$new_sc" == "" || "$new_sc" == "$exist_sc" ]]; then
      continue
    fi
    echo "Deleting storageclass/$exist_sc_name because its parameters has been changed from $exist_sc to $new_sc"

    kubernetes::delete_if_exists "" "storageclass/$exist_sc_name"
  done
}

hook::run "$@"
