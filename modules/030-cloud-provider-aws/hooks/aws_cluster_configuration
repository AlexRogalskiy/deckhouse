#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    kubernetes:
    - name: provider_cluster_configuration
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-provider-cluster-configuration]
      jqFilter: |
        .data."cloud-provider-cluster-configuration.yaml" //= "" | .data."cloud-provider-discovery-data.json" //= "" |
        {
          "provider_cluster_configuration": (.data."cloud-provider-cluster-configuration.yaml" | @base64d),
          "provider_discovery_data": (.data."cloud-provider-discovery-data.json" | @base64d)
        }
EOF
}

function set_values_from_provider_cluster_configuration() {
  error="false"
  provider='{}'
  provider_cluster_configuration_yaml=$(echo "$1" | jq -r .provider_cluster_configuration)
  if [[ "$provider_cluster_configuration_yaml" != "null" ]]; then
    provider=$(echo "$provider_cluster_configuration_yaml" | deckhouse-controller helper cluster-configuration | jq '.providerClusterConfiguration.provider | . //= {}')
  fi

  provider_discovery_data=$(echo "$1" | jq -r '
    if (.provider_discovery_data=="" or .provider_discovery_data==null) then .provider_discovery_data={
      "instances": {}
    } end | .provider_discovery_data')

  values::set cloudProviderAws.internal "$provider_discovery_data"

  if i="$(jq -ner --argjson provider "$provider" '$provider.region')"
  then values::set cloudProviderAws.internal.region "$i"
  else
    echo >&2 "ERROR: region is not configured in kube-system/d8-provider-cluster-configuration Secret"
    error="true"
  fi

  if i="$(jq -ner --argjson provider "$provider" '$provider.providerAccessKeyId')"
  then values::set cloudProviderAws.internal.providerAccessKeyId "$i"
  else
    echo >&2 "ERROR: providerAccessKeyId is not configured in kube-system/d8-provider-cluster-configuration Secret"
    error="true"
  fi

  if i="$(jq -ner --argjson provider "$provider" '$provider.providerSecretAccessKey')"
  then values::set cloudProviderAws.internal.providerSecretAccessKey "$i"
  else
    echo >&2 "ERROR: providerSecretAccessKey is not configured in kube-system/d8-provider-cluster-configuration Secret"
    error="true"
  fi

  if [[ "$error" == "true" ]]; then
    return 1
  fi
}

function __main__() {
  if context::has snapshots.provider_cluster_configuration.0; then
    set_values_from_provider_cluster_configuration "$(context::get snapshots.provider_cluster_configuration.0.filterResult)"
  else
    set_values_from_provider_cluster_configuration "{}"
  fi
}

hook::run "$@"
