#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    kubernetes:
    - name: provider_cluster_configuration
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-provider-cluster-configuration]
      jqFilter: |
        .data."cloud-provider-cluster-configuration.yaml" //= "" | .data."cloud-provider-discovery-data.json" //= "" |
        {
          "provider_cluster_configuration": (.data."cloud-provider-cluster-configuration.yaml" | @base64d),
          "provider_discovery_data": (.data."cloud-provider-discovery-data.json" | @base64d)
        }
EOF
}

function __main__() {
  if context::has snapshots.provider_cluster_configuration.0; then
    provider="$(
      context::get snapshots.provider_cluster_configuration.0.filterResult.provider_cluster_configuration | \
      deckhouse-controller helper cluster-configuration | \
      jq '.providerClusterConfiguration.provider'
    )"

    provider_discovery_data="$(
      context::get snapshots.provider_cluster_configuration.0.filterResult.provider_discovery_data | \
      deckhouse-controller helper cloud-discovery-data | \
      jq 'del(.kind) | del(.apiVersion)'
    )"

    values::set cloudProviderAws.internal "$provider_discovery_data"
    values::set cloudProviderAws.internal.region "$(jq -ner --argjson provider "$provider" '$provider.region')"
    values::set cloudProviderAws.internal.providerAccessKeyId "$(jq -ner --argjson provider "$provider" '$provider.providerAccessKeyId')"
    values::set cloudProviderAws.internal.providerSecretAccessKey "$(jq -ner --argjson provider "$provider" '$provider.providerSecretAccessKey')"
    values::set cloudProviderAws.internal.tags "$(jq -ner --argjson provider "$provider" '$provider.tags // {}')"
  else
    >&2 echo "ERROR: Can't find Secret d8-provider-cluster-configuration in Namespace kube-system"
    exit 1
  fi
}

hook::run "$@"
