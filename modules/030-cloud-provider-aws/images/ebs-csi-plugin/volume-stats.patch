--- a/pkg/driver/node.go	(revision be783b200e8736861f5530d7d5167b9d278024d1)
+++ b/pkg/driver/node.go	(date 1582885604743)
@@ -19,6 +19,7 @@
 import (
 	"context"
 	"fmt"
+	"k8s.io/kubernetes/pkg/volume/util/fs"
 	"os"
 	"path/filepath"
 	"regexp"
@@ -64,6 +65,7 @@
 	nodeCaps = []csi.NodeServiceCapability_RPC_Type{
 		csi.NodeServiceCapability_RPC_STAGE_UNSTAGE_VOLUME,
 		csi.NodeServiceCapability_RPC_EXPAND_VOLUME,
+		csi.NodeServiceCapability_RPC_GET_VOLUME_STATS,
 	}
 )

@@ -331,8 +333,54 @@
 	return &csi.NodeUnpublishVolumeResponse{}, nil
 }

-func (d *nodeService) NodeGetVolumeStats(ctx context.Context, req *csi.NodeGetVolumeStatsRequest) (*csi.NodeGetVolumeStatsResponse, error) {
-	return nil, status.Error(codes.Unimplemented, "NodeGetVolumeStats is not implemented yet")
+// TODO: support raw block devices
+func (ns *nodeService) NodeGetVolumeStats(_ context.Context, req *csi.NodeGetVolumeStatsRequest) (*csi.NodeGetVolumeStatsResponse, error) {
+	klog.V(4).Infof("NodeGetVolumeStats: called with args %+v", *req)
+
+	volumeID := req.GetVolumeId()
+	if len(volumeID) == 0 {
+		return nil, status.Error(codes.InvalidArgument, "Volume Id not provided")
+	}
+
+	volumePath := req.GetVolumePath()
+	if len(volumePath) == 0 {
+		return nil, status.Error(codes.InvalidArgument, "Volume path not provided")
+	}
+
+	if err := verifyTargetPath(volumePath); err != nil {
+		return nil, err
+	}
+
+	available, capacity, usage, inodes, inodesFree, inodesUsed, err := fs.FsInfo(volumePath)
+	if err != nil {
+		return nil, status.Errorf(codes.Internal,
+			"Unable to statfs target %s, err: %s", volumePath, err)
+	}
+	return &csi.NodeGetVolumeStatsResponse{
+		Usage: []*csi.VolumeUsage{
+			{Total: capacity, Available: available, Used: usage, Unit: csi.VolumeUsage_BYTES},
+			{Total: inodes, Available: inodesFree, Used: inodesUsed, Unit: csi.VolumeUsage_INODES},
+		},
+	}, nil
+}
+
+func verifyTargetPath(target string) error {
+	if target == "" {
+		return status.Error(codes.InvalidArgument,
+			"target path required")
+	}
+
+	_, err := os.Stat(target)
+	if err != nil {
+		if os.IsNotExist(err) {
+			return status.Errorf(codes.NotFound,
+				"target: %s not found", target)
+		}
+		return status.Errorf(codes.Internal,
+			"failed to stat target, err: %s", err.Error())
+	}
+
+	return nil
 }

 func (d *nodeService) NodeGetCapabilities(ctx context.Context, req *csi.NodeGetCapabilitiesRequest) (*csi.NodeGetCapabilitiesResponse, error) {
