Index: pkg/features/kube_features.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/features/kube_features.go b/pkg/features/kube_features.go
--- a/pkg/features/kube_features.go	(revision 8f9e096bc2a7602e4981a477476526856ebe288c)
+++ b/pkg/features/kube_features.go	(revision d98a8c12cdacc2d869fe339b12c07e6983b27461)
@@ -628,6 +628,13 @@
 	// Enable Terminating condition in Endpoint Slices.
 	EndpointSliceTerminatingCondition featuregate.Feature = "EndpointSliceTerminatingCondition"

+	// owner: @andrewsykim
+	// kep: http://kep.k8s.io/1669
+	// alpha: v1.22
+	//
+	// Enable kube-proxy to handle terminating ednpoints when externalTrafficPolicy=Local
+	ProxyTerminatingEndpoints featuregate.Feature = "ProxyTerminatingEndpoints"
+
 	// owner: @robscott
 	// alpha: v1.20
 	//
@@ -827,6 +834,7 @@
 	EndpointSlice:                                  {Default: true, PreRelease: featuregate.GA, LockToDefault: true}, // remove in 1.25
 	EndpointSliceProxying:                          {Default: true, PreRelease: featuregate.Beta},
 	EndpointSliceTerminatingCondition:              {Default: false, PreRelease: featuregate.Alpha},
+	ProxyTerminatingEndpoints:                      {Default: false, PreRelease: featuregate.Alpha},
 	EndpointSliceNodeName:                          {Default: true, PreRelease: featuregate.GA, LockToDefault: true}, //remove in 1.25
 	WindowsEndpointSliceProxying:                   {Default: true, PreRelease: featuregate.Beta},
 	StartupProbe:                                   {Default: true, PreRelease: featuregate.GA, LockToDefault: true}, // remove in 1.23
Index: pkg/proxy/iptables/proxier.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/proxy/iptables/proxier.go b/pkg/proxy/iptables/proxier.go
--- a/pkg/proxy/iptables/proxier.go	(revision 8f9e096bc2a7602e4981a477476526856ebe288c)
+++ b/pkg/proxy/iptables/proxier.go	(revision d98a8c12cdacc2d869fe339b12c07e6983b27461)
@@ -985,6 +985,11 @@
 	//   slice = append(slice[:0], ...)
 	endpoints := make([]*endpointsInfo, 0)
 	endpointChains := make([]utiliptables.Chain, 0)
+	readyEndpoints := make([]*endpointsInfo, 0)
+	readyEndpointChains := make([]utiliptables.Chain, 0)
+	localReadyEndpointChains := make([]utiliptables.Chain, 0)
+	localServingTerminatingEndpointChains := make([]utiliptables.Chain, 0)
+
 	// To avoid growing this slice, we arbitrarily set its size to 64,
 	// there is never more than that many arguments for a single line.
 	// Note that even if we go over 64, it will still be correct - it
@@ -1025,16 +1030,7 @@
 		// Service does not have conflicting configuration such as
 		// externalTrafficPolicy=Local.
 		allEndpoints = proxy.FilterEndpoints(allEndpoints, svcInfo, proxier.nodeLabels)
-
-		readyEndpoints := make([]proxy.Endpoint, 0, len(allEndpoints))
-		for _, endpoint := range allEndpoints {
-			if !endpoint.IsReady() {
-				continue
-			}
-
-			readyEndpoints = append(readyEndpoints, endpoint)
-		}
-		hasEndpoints := len(readyEndpoints) > 0
+		hasEndpoints := len(allEndpoints) > 0

 		svcChain := svcInfo.servicePortChainName
 		if hasEndpoints {
@@ -1351,7 +1347,7 @@
 		endpoints = endpoints[:0]
 		endpointChains = endpointChains[:0]
 		var endpointChain utiliptables.Chain
-		for _, ep := range readyEndpoints {
+		for _, ep := range allEndpoints {
 			epInfo, ok := ep.(*endpointsInfo)
 			if !ok {
 				klog.ErrorS(err, "Failed to cast endpointsInfo", "endpointsInfo", ep.String())
@@ -1387,16 +1383,33 @@
 			}
 		}

+		// Firstly, categorize each endpoint into three buckets:
+		//   1. all endpoints that are ready and NOT terminating.
+		//   2. all endpoints that are local, ready and NOT terminating, and externalTrafficPolicy=Local
+		//   3. all endpoints that are local, serving and terminating, and externalTrafficPolicy=Local
+		readyEndpointChains = readyEndpointChains[:0]
+		readyEndpoints := readyEndpoints[:0]
+		localReadyEndpointChains := localReadyEndpointChains[:0]
+		localServingTerminatingEndpointChains := localServingTerminatingEndpointChains[:0]
+		for i, endpointChain := range endpointChains {
+			if endpoints[i].Ready {
+				readyEndpointChains = append(readyEndpointChains, endpointChain)
+				readyEndpoints = append(readyEndpoints, endpoints[i])
+			}
+
+			if svc.NodeLocalExternal() && endpoints[i].IsLocal {
+				if endpoints[i].Ready {
+					localReadyEndpointChains = append(localReadyEndpointChains, endpointChain)
+				} else if endpoints[i].Serving && endpoints[i].Terminating {
+					localServingTerminatingEndpointChains = append(localServingTerminatingEndpointChains, endpointChain)
+				}
+			}
+		}
+
 		// Now write loadbalancing & DNAT rules.
-		n := len(endpointChains)
-		localEndpointChains := make([]utiliptables.Chain, 0)
-		for i, endpointChain := range endpointChains {
-			// Write ingress loadbalancing & DNAT rules only for services that request OnlyLocal traffic.
-			if svcInfo.NodeLocalExternal() && endpoints[i].IsLocal {
-				localEndpointChains = append(localEndpointChains, endpointChains[i])
-			}
-
-			epIP := endpoints[i].IP()
+		numReadyEndpoints := len(readyEndpointChains)
+		for i, endpointChain := range readyEndpointChains {
+			epIP := readyEndpoints[i].IP()
 			if epIP == "" {
 				// Error parsing this endpoint has been logged. Skip to next endpoint.
 				continue
@@ -1405,16 +1418,26 @@
 			// Balancing rules in the per-service chain.
 			args = append(args[:0], "-A", string(svcChain))
 			args = proxier.appendServiceCommentLocked(args, svcNameString)
-			if i < (n - 1) {
+			if i < (numReadyEndpoints - 1) {
 				// Each rule is a probabilistic match.
 				args = append(args,
 					"-m", "statistic",
 					"--mode", "random",
-					"--probability", proxier.probability(n-i))
+					"--probability", proxier.probability(numReadyEndpoints-i))
 			}
 			// The final (or only if n == 1) rule is a guaranteed match.
 			args = append(args, "-j", string(endpointChain))
 			utilproxy.WriteLine(proxier.natRules, args...)
+		}
+
+		// Every endpoint gets a chain, regardless of its state. This is required later since we may
+		// want to jump to endpoint chains that are terminating.
+		for i, endpointChain := range endpointChains {
+			epIP := endpoints[i].IP()
+			if epIP == "" {
+				// Error parsing this endpoint has been logged. Skip to next endpoint.
+				continue
+			}

 			// Rules in the per-endpoint chain.
 			args = append(args[:0], "-A", string(endpointChain))
@@ -1460,6 +1483,12 @@
 			"-m", "comment", "--comment", fmt.Sprintf(`"route LOCAL traffic for %s LB IP to service chain"`, svcNameString),
 			"-m", "addrtype", "--src-type", "LOCAL", "-j", string(svcChain))...)

+		// Prefer local ready endpoint chains, but fall back to ready terminating if none exist
+		localEndpointChains := localReadyEndpointChains
+		if utilfeature.DefaultFeatureGate.Enabled(features.ProxyTerminatingEndpoints) && len(localEndpointChains) == 0 {
+			localEndpointChains = localServingTerminatingEndpointChains
+		}
+
 		numLocalEndpoints := len(localEndpointChains)
 		if numLocalEndpoints == 0 {
 			// Blackhole all traffic since there are no local endpoints
Index: pkg/proxy/topology.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/proxy/topology.go b/pkg/proxy/topology.go
--- a/pkg/proxy/topology.go	(revision 8f9e096bc2a7602e4981a477476526856ebe288c)
+++ b/pkg/proxy/topology.go	(revision d98a8c12cdacc2d869fe339b12c07e6983b27461)
@@ -36,7 +36,7 @@
 	}

 	if utilfeature.DefaultFeatureGate.Enabled(features.ServiceInternalTrafficPolicy) && svcInfo.NodeLocalInternal() {
-		return filterEndpointsInternalTrafficPolicy(svcInfo.InternalTrafficPolicy(), endpoints)
+		return FilterLocalEndpoint(endpoints)
 	}

 	if utilfeature.DefaultFeatureGate.Enabled(features.TopologyAwareHints) {
@@ -150,20 +150,8 @@
 	return filteredEndpoints
 }

-// filterEndpointsInternalTrafficPolicy returns the node local endpoints based
-// on configured InternalTrafficPolicy.
-//
-// If ServiceInternalTrafficPolicy feature gate is off, returns the original
-// EndpointSlice.
-// Otherwise, if InternalTrafficPolicy is Local, only return the node local endpoints.
-func filterEndpointsInternalTrafficPolicy(internalTrafficPolicy *v1.ServiceInternalTrafficPolicyType, endpoints []Endpoint) []Endpoint {
-	if !utilfeature.DefaultFeatureGate.Enabled(features.ServiceInternalTrafficPolicy) {
-		return endpoints
-	}
-	if internalTrafficPolicy == nil || *internalTrafficPolicy == v1.ServiceInternalTrafficPolicyCluster {
-		return endpoints
-	}
-
+// FilterLocalEndpoint returns the node local endpoints
+func FilterLocalEndpoint(endpoints []Endpoint) []Endpoint {
 	var filteredEndpoints []Endpoint

 	// Get all the local endpoints
@@ -173,7 +161,5 @@
 		}
 	}

-	// When internalTrafficPolicy is Local, only return the node local
-	// endpoints
 	return filteredEndpoints
 }
