apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: dexproviders.deckhouse.io
  labels:
    heritage: deckhouse
    module: user-authn
spec:
  group: deckhouse.io
  scope: Cluster
  names:
    plural: dexproviders
    singular: dexprovider
    kind: DexProvider
  preserveUnknownFields: false
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: ['spec']
          description: |
            Описывает конфигурацию подключения стороннего провайдера. С его помощью можно гибко настроить интеграцию каталога учетных записей с Kubernetes.
          properties:
            spec:
              type: object
              required: ['displayName', 'type']
              properties:
                type:
                  type: string
                  description: 'Type of authentication provider.'
                  enum: ['Github', 'Gitlab', 'BitbucketCloud', 'Crowd', 'OIDC', 'LDAP']
                displayName:
                  type: string
                  description: |
                    Имя провайдера, которое будет отображено на странице выбора провайдера для аутентификации. Если настроен всего один провайдер, страница выбора провайдера показываться не будет.
                github:
                  type: object
                  required: ['clientID', 'clientSecret']
                  description: |
                    Параметры провайдера GitHub (можно указывать только если `type: Github`).
                  properties:
                    clientID:
                      type: string
                      description: 'Organization application ID from GitHub.'
                    clientSecret:
                      type: string
                      description: 'Organization application secret key from GitHub.'
                    teamNameField:
                      type: string
                      enum: ['name', 'slug', 'both']
                      default: 'name'
                      description: |
                        As an example, group claims for member of 'Site Reliability Engineers' in
                        Acme organization would yield:
                         - ['acme:Site Reliability Engineers'] for 'name'
                         - ['acme:site-reliability-engineers'] for 'slug'
                         - ['acme:Site Reliability Engineers', 'acme:site-reliability-engineers'] for 'both'

                        'name' will be used by default.
                    useLoginAsID:
                      type: boolean
                      description: |
                        Flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
                        It is possible for a user to change their own user name but it is very rare for them to do so.

                        Equals to false by default.
                    orgs:
                      type: array
                      description: |
                        Filter for user organizations. ID token will contain only organizations from this list.
                        If the user is not in any organization from this list, an authorization will fail.

                        By default, all organizations allowed.
                      items:
                        type: object
                        required: ['name']
                        properties:
                          name:
                            type: string
                            description: 'Name of organization.'
                          teams:
                            type: array
                            description: |
                              Список команд, допустимых для приема из GitHub.
                              Токен пользователя будет содержать объединенное множество команд из GitHub и команд из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                              Если параметр не указан, токен пользователя будет содержать все команды из GitHub.
                            items:
                              type: string
                gitlab:
                  type: object
                  required: ['clientID', 'clientSecret']
                  description: |
                    Параметры провайдера GitLab (можно указывать только если `type: Gitlab`).
                  properties:
                    clientID:
                      type: string
                      description: 'Application ID from GitLab.'
                    clientSecret:
                      type: string
                      description: 'Application secret key from GitLab.'
                    baseURL:
                      type: string
                      example: 'https://gitlab.example.com'
                      description: |
                        Base part of GitLab URL.
                    groups:
                      type: array
                      description: |
                        Список групп (**пути групп — path**, а не имена), допустимых для приема из GitLab.
                        Токен пользователя будет содержать объединенное множество групп из GitLab и групп из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                        Если параметр не указан, токен пользователя будет содержать все группы из GitLab'а;
                      items:
                        type: string
                    useLoginAsID:
                      type: boolean
                      description: |
                        Flag which will switch from using the internal GitLab id to the users handle (@mention) as the user id.
                        It is possible for a user to change their own user name but it is very rare for them to do so.

                        Equals to false by default.
                bitbucketCloud:
                  type: object
                  required: ['clientID', 'clientSecret']
                  description: |
                    Параметры провайдера Bitbucket Cloud (можно указывать только если `type: BitbucketCloud`).
                  properties:
                    clientID:
                      type: string
                      description: 'Team application ID from BitbucketCloud (Key).'
                    clientSecret:
                      type: string
                      description: 'Team application secret key from BitbucketCloud.'
                    teams:
                      type: array
                      description: |
                        Список команд, допустимых для приема из Bitbucket Cloud'а.
                        Токен пользователя будет содержать объединенное множество команд из Bitbucket Cloud и команд из этого списка. Если если множество окажется пустым, авторизация не будет считаться не успешной

                        Токен будет содержать команды пользователя в claim `groups`, как и у других провайдеров.
                      items:
                        type: string
                    includeTeamGroups:
                      type: boolean
                      default: false
                      description: |
                        Optional parameter to include team groups.
                        If enabled, the groups claim of dex id_token will looks like this:
                        ["my_team", "my_team/administrators", "my_team/members"]
                crowd:
                  type: object
                  required: ['clientID', 'clientSecret', 'baseURL']
                  description: |
                    Параметры провайдера Crowd (можно указывать только если `type: Crowd`).
                  properties:
                    clientID:
                      type: string
                      description: 'Application ID from Atlassian Crowd (Application Name).'
                    clientSecret:
                      type: string
                      description: 'Application secret key from Atlassian Crowd (Password).'
                    baseURL:
                      type: string
                      example: 'https://crowd.example.com/crowd'
                      description: |
                        Base part of Attlassian Crowd URL.
                    groups:
                      type: array
                      description: |
                        Список групп, допустимых для приема из Crowd.
                        Токен пользователя будет содержать объединенное множество групп из Crowd и групп из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                        Если параметр не указан, токен пользователя будет содержать все группы из Crowd.
                      items:
                        type: string
                    usernamePrompt:
                      type: string
                      description: 'Prompt for username field.'
                      default: 'Crowd username'
                    enableBasicAuth:
                      type: boolean
                      description: |
                        Включает возможность basic-авторизации для Kubernetes API server.

                        В качестве credentials для basic-авторизации указываются логин и пароль пользователя из приложения, созданного в Crowd (возможно включить при указании только одного провайдера с типом Crowd).
                        Работает **только** при включенном `publishAPI`.

                        Полученные от Crowd данные авторизации и групп сохраняются в кэш на 10 секунд.
                oidc:
                  type: object
                  required: ['clientID', 'clientSecret', 'issuer']
                  description: |
                    Параметры провайдера OIDC (можно указывать только если `type: OIDC`).
                  properties:
                    clientID:
                      type: string
                      description: 'OIDC issuer application ID.'
                    clientSecret:
                      type: string
                      description: 'OIDC issuer application secret key.'
                    issuer:
                      type: string
                      example: 'https://accounts.google.com'
                      description: |
                        Canonical URL of the provider, also used for configuration discovery.
                        This value MUST match the value returned in the provider config discovery.
                    insecureSkipEmailVerified:
                      type: boolean
                      default: false
                      description: |
                        Allow authentication for clients without verified email address.
                    basicAuthUnsupported:
                      type: boolean
                      description: |
                        Использовать POST-запросы для общения с провайдером, вместо добавления токена в Basic Authorization header.
                        В большинстве случаев dex сам определяет, какой запрос ему нужно сделать, но иногда включение этого параметра может помочь.
                      default: false
                    getUserInfo:
                      type: boolean
                      description: |
                        Запрашивать дополнительные данные об успешно подключенном пользователе.

                        [Подробнее](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)...
                      default: false
                    userIDKey:
                      type: string
                      default: 'sub'
                      description: |
                        The set [claim](https://openid.net/specs/openid-connect-core-1_0.html#Claims) is used as user id.
                    userNameKey:
                      type: string
                      default: 'name'
                      description: |
                        The set [claim](https://openid.net/specs/openid-connect-core-1_0.html#Claims) is used as user name.
                    scopes:
                      type: array
                      default: ["openid", "profile", "email", "groups", "offline_access"]
                      description: |
                        List of [additional scopes](https://github.com/dexidp/website/blob/main/content/docs/custom-scopes-claims-clients.md) to request in token response.
                      items:
                        type: string
                    promptType:
                      type: string
                      default: 'consent'
                      description: |
                        Определяет — должен ли Issuer запрашивать подтверждение и давать подсказки при аутентификации.

                        По умолчанию будет запрошено подтверждение при первой аутентификации. Допустимые значения могут изменяться в зависимости от Issuer.
                ldap:
                  type: object
                  required: ['host', 'userSearch']
                  description: |
                    Параметры провайдера LDAP.
                  properties:
                    host:
                      type: string
                      example: ldap.example.com:636
                      description: |
                        Host and optional port of the LDAP server in the form "host:port".
                        If the port is not supplied, it will be guessed based on "insecureNoSSL",
                        and "startTLS" flags. 389 for insecure or StartTLS connections, 636
                        otherwise.
                    insecureNoSSL:
                      type: boolean
                      default: false
                      description: |
                        Following field is required if the LDAP host is not using TLS (port 389).
                        This option inherently leaks passwords to anyone on the same network as dex.
                        Equals to false by default.
                    startTLS:
                      type: boolean
                      default: false
                      description: |
                        When connecting to the server, connect using the ldap:// protocol then issue
                        a [StartTLS](https://www.digitalocean.com/community/tutorials/how-to-encrypt-openldap-connections-using-starttls) command. If unspecified, connections will use the ldaps:// protocol
                    usernamePrompt:
                      type: string
                      default: 'LDAP username'
                      description: |
                        The attribute to display in the provided password prompt. If unset, will display "LDAP Username".
                      example: SSO Username
                    rootCAData:
                      type: string
                      description: |
                        A raw certificate file can also be provided inline.
                        Example:
                        ```
                        -----BEGIN CERTIFICATE-----
                        MIIFaDC...
                        -----END CERTIFICATE-----
                        ```
                    insecureSkipVerify:
                      type: boolean
                      default: false
                      description: |
                        If a custom certificate isn't provide, this option can be used to turn on
                        TLS certificate checks. As noted, it is insecure and shouldn't be used outside
                        of explorative phases.
                    bindDN:
                      type: string
                      example: 'uid=serviceaccount,cn=users,dc=example,dc=com'
                      description: |
                        The DN for an application service account. The connector uses
                        these credentials to search for users and groups. Not required if the LDAP
                        server provides access for anonymous auth.
                    bindPW:
                      type: string
                      example: password
                      description: |
                        Password for read-only service account.
                        Please note that if the bind password contains a `$`, it has to be saved in an
                        environment variable which should be given as the value to `bindPW`.
                    userSearch:
                      type: object
                      required: ['baseDN', 'username', 'idAttr', 'emailAttr']
                      description: 'User search maps a username and password entered by a user to a LDAP entry. [Details...](https://github.com/dexidp/dex/blob/3b7292a08fd2c61900f5e6c67f3aa2ee81827dea/Documentation/connectors/ldap.md#example-mapping-a-schema-to-a-search-config)'
                      properties:
                        baseDN:
                          type: string
                          example: 'cn=users,dc=example,dc=com'
                          description: 'BaseDN to start the search from.'
                        filter:
                          type: string
                          example: '(objectClass=person)'
                          description: 'Optional filter to apply when searching the directory.'
                        username:
                          type: string
                          example: 'uid'
                          description: |
                            Username attribute used for comparing user entries. This will be translated
                            and combined with the other filter as "(<attr>=<username>)".
                        idAttr:
                          type: string
                          example: 'uid'
                          description: |
                            LDAP attribute that will be matched to dex user id entry.
                        emailAttr:
                          type: string
                          example: 'mail'
                          description: |
                            LDAP attribute that will be matched to dex user email entry.
                            When an email address is not available, use another value unique to the user, like uid.
                        nameAttr:
                          type: string
                          example: 'name'
                          description: |
                            LDAP attribute that will be matched to dex user name entry.
                            No default value provided.
                    groupSearch:
                      type: object
                      required: ['baseDN', 'userMatchers', 'nameAttr']
                      description: 'Group search queries for groups given a user entry. [Details](https://github.com/dexidp/dex/blob/3b7292a08fd2c61900f5e6c67f3aa2ee81827dea/Documentation/connectors/ldap.md#example-mapping-a-schema-to-a-search-config)'
                      properties:
                        baseDN:
                          type: string
                          example: 'cn=users,dc=example,dc=com'
                          description: 'BaseDN to start the search from.'
                        filter:
                          type: string
                          example: '(objectClass=person)'
                          description: 'Optional filter to apply when searching the directory.'
                        nameAttr:
                          type: string
                          example: 'name'
                          description: |
                            Represents group name.
                        userMatchers:
                          type: array
                          description: |
                            Following list contains field pairs that are used to match a user to a group. It adds a
                            requirement to the filter that an attribute in the group must match the user's
                            attribute value.
                          items:
                            type: object
                            required: ['userAttr', 'groupAttr']
                            properties:
                              userAttr:
                                type: string
                                example: uid
                                description: |
                                  The name of the attribute that stores the user name.
                              groupAttr:
                                type: string
                                example: member
                                description: |
                                  The name of the attribute that stores the group member names.
              oneOf:
                - properties:
                    inlet:
                      enum: ['Github']
                    github: {}
                  required: ['github']
                - properties:
                    inlet:
                      enum: ['Gitlab']
                    gitlab: {}
                  required: ['gitlab']
                - properties:
                    inlet:
                      enum: ['BitbucketCloud']
                    bitbucketCloud: {}
                  required: ['bitbucketCloud']
                - properties:
                    inlet:
                      enum: ['Crowd']
                    crowd: {}
                  required: ['crowd']
                - properties:
                    inlet:
                      enum: ['OIDC']
                    oidc: {}
                  required: ['oidc']
                - properties:
                    inlet:
                      enum: ['LDAP']
                    ldap: {}
                  required: ['ldap']
      additionalPrinterColumns:
        - jsonPath: .spec.type
          name: Type
          description: 'Type of authentication provider.'
          type: string
        - jsonPath: .spec.displayName
          name: Display Name
          description: 'Name that will be displayed on the providers selection screen.'
          type: string
