---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: dexproviders.deckhouse.io
  labels:
    heritage: deckhouse
    module: user-authn
spec:
  group: deckhouse.io
  scope: Cluster
  names:
    plural: dexproviders
    singular: dexprovider
    kind: DexProvider
  version: v1alpha1
  additionalPrinterColumns:
    - JSONPath: .spec.type
      name: Type
      description: 'Type of authentication provider.'
      type: string
    - JSONPath: .spec.displayName
      name: Display Name
      description: 'Name that will be displayed on the providers selection screen.'
      type: string
  validation:
    openAPIV3Schema:
      type: object
      required: ['spec']
      description: |
        Описывает конфигурацию подключения стороннего провайдера. С его помощью можно гибко настроить интеграцию каталога учетных записей с Kubernetes.
      properties:
        spec:
          type: object
          required: ['displayName','type']
          properties:
            type:
              type: string
              x-description: 'Type of authentication provider.'
              description: |
                Тип внешнего провайдера.
              enum: ['Github', 'Gitlab', 'BitbucketCloud', 'Crowd', 'OIDC', 'LDAP']
            displayName:
              type: string
              x-description: 'Name that will be displayed on the providers selection screen.'
              description: |
                Имя провайдера, которое будет отображено на странице выбора провайдера для аутентификации. Если настроен всего один провайдер, страница выбора провайдера показываться не будет.
            github:
              type: object
              required: ['clientID', 'clientSecret']
              description: |
                Параметры провайдера GitHub (можно указывать только если `type: Github`).
              properties:
                clientID:
                  type: string
                  x-description: 'Organization application ID from GitHub.'
                  description: |
                    ID организации на GitHub.
                clientSecret:
                  type: string
                  x-description: 'Organization application secret key from GitHub.'
                  description: |
                    Secret организации на GitHub.
                teamNameField:
                  type: string
                  enum: ['name', 'slug', 'both']
                  default: 'name'
                  x-description: |
                    As an example, group claims for member of 'Site Reliability Engineers' in
                    Acme organization would yield:
                     - ['acme:Site Reliability Engineers'] for 'name'
                     - ['acme:site-reliability-engineers'] for 'slug'
                     - ['acme:Site Reliability Engineers', 'acme:site-reliability-engineers'] for 'both'

                    'name' will be used by default.
                  description: |
                    Формат команд, которые будут получены из GitHub.

                    Если в организации `acme` есть группа `Site Reliability Engineers`, то в случае:
                    * `name` будет получена группа с именем `['acme:Site Reliability Engineers']`;
                    * `slug` будет получена группа с именем `['acme:site-reliability-engineers']`;
                    * `both` будут получены группы с именами `['acme:Site Reliability Engineers', 'acme:site-reliability-engineers']`.
                useLoginAsID:
                  type: boolean
                  description: |
                    Позволяет вместо использования внутреннего GitHub ID, использовать имя пользователя.
                  x-description: |
                    Flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
                    It is possible for a user to change their own user name but it is very rare for them to do so.

                    Equals to false by default.
                orgs:
                  type: array
                  description: |
                    Массив названий организаций в GitHub.
                  x-description: |
                    Filter for user organizations. ID token will contain only organizations from this list.
                    If the user is not in any organization from this list, an authorization will fail.

                    By default, all organizations allowed.
                  items:
                    type: object
                    required: ['name']
                    properties:
                      name:
                        type: string
                        x-description: 'Name of organization.'
                        description: |
                          Название организации.
                      teams:
                        type: array
                        x-description: 'A white list of teams. Only include group claims for these teams.'
                        description: |
                          Список команд, допустимых для приема из GitHub.
                          Токен пользователя будет содержать объединенное множество команд из GitHub и команд из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                          Если параметр не указан, токен пользователя будет содержать все команды из GitHub.
                        items:
                          type: string
            gitlab:
              type: object
              required: ['clientID', 'clientSecret']
              description: |
                Параметры провайдера GitLab (можно указывать только если `type: Gitlab`).
              properties:
                clientID:
                  type: string
                  x-description: 'Application ID from GitLab.'
                  description: |
                    ID приложения созданного в GitLab (Application ID).
                clientSecret:
                  type: string
                  x-description: 'Application secret key from GitLab.'
                  description: |
                    Secret приложения созданного в GitLab (Secret).
                baseURL:
                  type: string
                  example: 'https://gitlab.example.com'
                  description: |
                    Адрес GitLab.
                  x-description: |
                    Base part of GitLab URL.
                groups:
                   type: array
                   x-description: 'A white list of groups. Only include group claims for these groups.'
                   description: |
                     Список групп (**пути групп — path**, а не имена), допустимых для приема из GitLab.
                     Токен пользователя будет содержать объединенное множество групп из GitLab и групп из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                     Если параметр не указан, токен пользователя будет содержать все группы из GitLab'а;
                   items:
                     type: string
                useLoginAsID:
                  type: boolean
                  x-description: |
                    Flag which will switch from using the internal GitLab id to the users handle (@mention) as the user id.
                    It is possible for a user to change their own user name but it is very rare for them to do so.

                    Equals to false by default.
                  description: |
                    Позволяет вместо использования внутреннего GitLab ID, использовать имя пользователя.
            bitbucketCloud:
              type: object
              required: ['clientID', 'clientSecret']
              description: |
                Параметры провайдера Bitbucket Cloud (можно указывать только если `type: BitbucketCloud`).
              properties:
                clientID:
                  type: string
                  x-description: 'Team application ID from BitbucketCloud.'
                  description: |
                    ID приложения созданного в Bitbucket Cloud (Key).
                clientSecret:
                  type: string
                  x-description: 'Team application secret key from BitbucketCloud.'
                  description: |
                    Secret приложения созданного в Bitbucket Cloud (Secret).
                teams:
                  type: array
                  x-description: 'A white list of teams. Only include group claims for these teams.'
                  description: |
                    Список команд, допустимых для приема из Bitbucket Cloud'а.
                    Токен пользователя будет содержать объединенное множество команд из Bitbucket Cloud и команд из этого списка. Если если множество окажется пустым, авторизация не будет считаться не успешной

                    Токен будет содержать команды пользователя в claim `groups`, как и у других провайдеров.
                  items:
                    type: string
                includeTeamGroups:
                  type: boolean
                  default: false
                  description: |
                    Включает в список команд все группы команды, в которых состоит пользователь.

                    Пример групп пользователя с включенной опцией:
                    ```yaml
                    groups=["my_team", "my_team/administrators", "my_team/members"]
                    ```
                  x-description: |
                    Optional parameter to include team groups.
                    If enabled, the groups claim of dex id_token will looks like this:
                    ["my_team", "my_team/administrators", "my_team/members"]

                    Equals to false by default.
            crowd:
              type: object
              required: ['clientID', 'clientSecret', 'baseURL']
              description: |
                Параметры провайдера Crowd (можно указывать только если `type: Crowd`).
              properties:
                clientID:
                  type: string
                  x-description: 'Application ID from Atlassian Crowd.'
                  description: |
                    ID приложения созданного в Crowd (Application Name).
                clientSecret:
                  type: string
                  x-description: 'Application secret key from Atlassian Crowd.'
                  description: |
                    Пароль приложения созданного в Crowd (Password).
                baseURL:
                  type: string
                  example: 'https://crowd.example.com/crowd'
                  description: |
                    Адрес Crowd.
                  x-description: |
                    Base part of Attlassian Crowd URL.
                groups:
                  type: array
                  x-description: 'A white list of groups. Only include group claims for these groups.'
                  description: |
                    Список групп, допустимых для приема из Crowd.
                    Токен пользователя будет содержать объединенное множество групп из Crowd и групп из этого списка. Если множество окажется пустым, авторизация не будет считаться успешной.

                    Если параметр не указан, токен пользователя будет содержать все группы из Crowd.
                  items:
                    type: string
                usernamePrompt:
                  type: string
                  x-description: 'Prompt for username field. Equals to "Crowd username" by default.'
                  description: |
                    Строка, которая будет отображаться возле поля для имени пользователя в форме ввода логина и пароля.
                  default: 'Crowd username'
                enableBasicAuth:
                  type: boolean
                  description: |
                    Включает возможность basic-авторизации для Kubernetes API server.

                    В качестве credentials для basic-авторизации указываются логин и пароль пользователя из приложения, созданного в Crowd (возможно включить при указании только одного провайдера с типом Crowd).
                    Работает **только** при включенном `publishAPI`.

                    Полученные от Crowd данные авторизации и групп сохраняются в кэш на 10 секунд.
                  x-description: |
                    It enables basic auth proxy for crowd. Works only if there is a single Crowd provider in your Kubernetes cluster.
                    Equals to false by default.
            oidc:
              type: object
              required: ['clientID', 'clientSecret', 'issuer']
              description: |
                Параметры провайдера OIDC (можно указывать только если `type: OIDC`).
              properties:
                clientID:
                  type: string
                  description: |
                    ID приложения, созданного в OIDC провайдере.
                  x-description: 'OIDC issuer application ID.'
                clientSecret:
                  type: string
                  description: |
                    Пароль приложения, созданного в OIDC провайдере.
                  x-description: 'OIDC issuer application secret key.'
                issuer:
                  type: string
                  example: 'https://accounts.google.com'
                  description: |
                    Адрес OIDC-провайдера.
                  x-description: |
                    Canonical URL of the provider, also used for configuration discovery.
                    This value MUST match the value returned in the provider config discovery.
                insecureSkipEmailVerified:
                  type: boolean
                  description: |
                    Игнорировать информацию о статусе подтверждения e-mail пользователя.
                    Как именно подтверждается e-mail решает сам провайдер. В ответе от провайдера приходит лишь информация — подтвержден e-mail или нет.
                  default: false
                  x-description: |
                    Allow authentication for clients without verified email address.
                    Equals to false by default.
                basicAuthUnsupported:
                  type: boolean
                  description: |
                    Использовать POST-запросы для общения с провайдером, вместо добавления токена в Basic Authorization header.
                    В большинстве случаев dex сам определяет, какой запрос ему нужно сделать, но иногда включение этого параметра может помочь.
                  default: false
                getUserInfo:
                  type: boolean
                  description: |
                    Запрашивать дополнительные данные об успешно подключенном пользователе.

                    [Подробнее](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)...
                  default: false
                userIDKey:
                  type: string
                  default: 'sub'
                  description: |
                    [Claim](https://openid.net/specs/openid-connect-core-1_0.html#Claims), который будет использован для получения ID пользователя.
                  x-description: |
                    The set claim is used as user id. Default: "sub".
                userNameKey:
                  type: string
                  default: 'name'
                  description: |
                    [Claim](https://openid.net/specs/openid-connect-core-1_0.html#Claims), который будет использован для получения имени пользователя.
                  x-description: |
                    The set claim is used as user name. Default: "name"
                scopes:
                  type: array
                  default: ["openid", "profile", "email", "groups", "offline_access"]
                  description: |
                    Список [полей](https://github.com/dexidp/website/blob/main/content/docs/custom-scopes-claims-clients.md) для включения в ответ при запросе токена.
                  x-description: |
                    List of additional scopes to request in token response.
                    Default is ["openid", "profile", "email", "groups", "offline_access"]
                  items:
                    type: string
                promptType:
                  type: string
                  default: 'consent'
                  description: |
                    Определяет — должен ли Issuer запрашивать подтверждение и давать подсказки при аутентификации.

                    По умолчанию будет запрошено подтверждение при первой аутентификации. Допустимые значения могут изменяться в зависимости от Issuer.
                  x-description: |
                    For offline_access, the prompt parameter is set by default to "prompt=consent".
                    However this is not supported by all OIDC providers, some of them support different
                    value for prompt, like "prompt=login" or "prompt=none"
            ldap:
              type: object
              required: ['host', 'userSearch']
              description: |
                Параметры провайдера LDAP.
              properties:
                host:
                  type: string
                  example: ldap.example.com:636
                  description: |
                    Адрес и порт (опционально) LDAP-сервера.
                  x-description: |
                    Host and optional port of the LDAP server in the form "host:port".
                    If the port is not supplied, it will be guessed based on "insecureNoSSL",
                    and "startTLS" flags. 389 for insecure or StartTLS connections, 636
                    otherwise.
                insecureNoSSL:
                  type: boolean
                  default: false
                  description: |
                    Подключаться к каталогу LDAP не по защищенному порту.
                  x-description: |
                    Following field is required if the LDAP host is not using TLS (port 389).
                    This option inherently leaks passwords to anyone on the same network as dex.
                    Equals to false by default.
                startTLS:
                  type: boolean
                  default: false
                  description: |
                    Использовать [STARTTLS](https://www.digitalocean.com/community/tutorials/how-to-encrypt-openldap-connections-using-starttls) для шифрования.
                  x-description: |
                    When connecting to the server, connect using the ldap:// protocol then issue
                    a StartTLS command. If unspecified, connections will use the ldaps:// protocol
                    Equals to false by default.
                usernamePrompt:
                  type: string
                  default: 'LDAP username'
                  description: |
                    Строка, которая будет отображаться возле поля для имени пользователя в форме ввода логина и пароля.
                  x-description: |
                    The attribute to display in the provided password prompt. If unset, will display "LDAP Username".
                  example: SSO Username
                rootCAData:
                  type: string
                  description: |
                    CA, используемый для валидации TLS.

                    Пример:
                    ```
                    -----BEGIN CERTIFICATE-----
                    MIIFaDC...
                    -----END CERTIFICATE-----
                    ```
                  x-description: 'A raw certificate file can also be provided inline.'
                insecureSkipVerify:
                  type: boolean
                  default: false
                  description: |
                    Не производить проверку подлинности ответа от провайдера с помощью `rootCAData`.
                  x-description: |
                    If a custom certificate isn't provide, this option can be used to turn on
                    TLS certificate checks. As noted, it is insecure and shouldn't be used outside
                    of explorative phases.
                    Equals to false by default.
                bindDN:
                  type: string
                  example: 'uid=serviceaccount,cn=users,dc=example,dc=com'
                  description: |
                    Путь до сервис-аккаунта приложения в LDAP.
                  x-description: |
                    The DN for an application service account. The connector uses
                    these credentials to search for users and groups. Not required if the LDAP
                    server provides access for anonymous auth.
                bindPW:
                  type: string
                  example: password
                  description: |
                    Пароль для сервис-аккаунта приложения в LDAP.
                  x-description: |
                    Password for read-only service account.
                    Please note that if the bind password contains a `$`, it has to be saved in an
                    environment variable which should be given as the value to `bindPW`.
                userSearch:
                  type: object
                  required: ['baseDN', 'username', 'idAttr', 'emailAttr']
                  description: |
                    Настройки фильтров пользователей, которые помогают сначала отфильтровать директории, в которых будет производиться поиск пользователей,
                    а затем найти пользователя по полям (его имени, адресу электронной почты или отображаемому имени).

                    [Подробнее](https://github.com/dexidp/dex/blob/3b7292a08fd2c61900f5e6c67f3aa2ee81827dea/Documentation/connectors/ldap.md#example-mapping-a-schema-to-a-search-config) о процессе фильтрации...
                  x-description: 'User search maps a username and password entered by a user to a LDAP entry.'
                  properties:
                    baseDN:
                      type: string
                      example: 'cn=users,dc=example,dc=com'
                      x-description: 'BaseDN to start the search from.'
                      description: 'Откуда будет начат поиск пользователей.'
                    filter:
                      type: string
                      example: '(objectClass=person)'
                      description: |
                        Позволяет добавить фильтр для директории с пользователями.
                      x-description: 'Optional filter to apply when searching the directory.'
                    username:
                      type: string
                      example: 'uid'
                      description: |
                        Имя атрибута из которого будет получен username пользователя.
                      x-description: |
                        Username attribute used for comparing user entries. This will be translated
                        and combined with the other filter as "(<attr>=<username>)".
                    idAttr:
                      type: string
                      example: 'uid'
                      description: |
                        Имя атрибута из которого будет получен идентификатор пользователя.
                      x-description: |
                        LDAP attribute that will be matched to dex user id entry.
                    emailAttr:
                      type: string
                      example: 'mail'
                      description: |
                        Имя атрибута из которого будет получен email пользователя.
                      x-description: |
                        LDAP attribute that will be matched to dex user email entry.
                        When an email address is not available, use another value unique to the user, like uid.
                    nameAttr:
                      type: string
                      example: 'name'
                      description: |
                        Атрибут отображаемого имени пользователя.
                      x-description: |
                        LDAP attribute that will be matched to dex user name entry.
                        No default value provided.
                groupSearch:
                  type: object
                  required: ['baseDN', 'userMatchers', 'nameAttr']
                  description: |
                    Настройки фильтра для поиска групп для указанного пользователя.

                    [Подробнее](https://github.com/dexidp/dex/blob/3b7292a08fd2c61900f5e6c67f3aa2ee81827dea/Documentation/connectors/ldap.md#example-mapping-a-schema-to-a-search-config) о процессе фильтрации...
                  x-description: 'Group search queries for groups given a user entry.'
                  properties:
                    baseDN:
                      type: string
                      example: 'cn=users,dc=example,dc=com'
                      x-description: 'BaseDN to start the search from.'
                      description: 'Откуда будет начат поиск групп'
                    filter:
                      type: string
                      example: '(objectClass=person)'
                      description: |
                        Фильтр для директории с группами.
                      x-description: 'Optional filter to apply when searching the directory.'
                    nameAttr:
                      type: string
                      example: 'name'
                      description: |
                        Имя атрибута, в котором хранится уникальное имя группы.
                      x-description: |
                        Represents group name.
                    userMatchers:
                      type: array
                      description: |
                        Список сопоставлений атрибута имени юзера с именем группы.
                      x-description: |
                        Following list contains field pairs that are used to match a user to a group. It adds a
                        requirement to the filter that an attribute in the group must match the user's
                        attribute value.
                      items:
                        type: object
                        required: ['userAttr', 'groupAttr']
                        properties:
                          userAttr:
                            type: string
                            example: uid
                            description: |
                              Имя атрибута, в котором хранится имя пользователя.
                          groupAttr:
                            type: string
                            example: member
                            description: |
                              Имя атрибута, в котором хранятся имена пользователей, состоящих в группе.
          oneOf:
          - properties:
              inlet:
                enum: ['Github']
              github: {}
            required: ['github']
          - properties:
              inlet:
                enum: ['Gitlab']
              gitlab: {}
            required: ['gitlab']
          - properties:
              inlet:
                enum: ['BitbucketCloud']
              bitbucketCloud: {}
            required: ['bitbucketCloud']
          - properties:
              inlet:
                enum: ['Crowd']
              crowd: {}
            required: ['crowd']
          - properties:
              inlet:
                enum: ['OIDC']
              oidc: {}
            required: ['oidc']
          - properties:
              inlet:
                enum: ['LDAP']
              ldap: {}
            required: ['ldap']
