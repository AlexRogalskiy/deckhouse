spec:
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: |
            CustomResource для описания источника логов в log-pipeline.

            Каждый CustomResource `ClusterLoggingConfig` описывает правила сбора логов из кластера.
          properties:
            spec:
              properties:
                type:
                  description: |
                    Возможные источники логов.

                    `KubernetesPods` собирает логи с Pod'ов.

                    `File` позволяет читать локальные файлы, доступные на узле.
                kubernetesPods:
                  properties:
                    namespaceSelector:
                      description: Задать фильтр по Namespace.
                    labelSelector:
                      description: |
                        Настройка `labelSelector` позволяет задать фильтр по Pod Labels.

                        Подробнее про выражения можно узнать в [документации](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
                      properties:
                        matchLabels:
                          description: Список label, которые должен иметь Pod.
                        matchExpressions:
                          items:
                            description: Список выражений для label, которые должен иметь Pod.
                file:
                  properties:
                    include:
                      description: Список путей и паттернов для чтения. Поддерживаются wildcards.
                    exclude:
                      description: Список путей и паттернов файлов, которые читать не требуется. Поддерживаются wildcards.
                    lineDelimiter:
                      description: Задание символа новой строки.
                logFilter:
                  description: |
                    Список фильтров для логов.
                    Только логи, подпавшие под правила, будут сохранены в хранилище.
                  items:
                    properties:
                      field:
                        description: Имя поля для фильтрации.
                      operator:
                        description: |
                          Оператор, который можно применить для фильтрации:
                          * Оператор `In` ищет сроку или элемент в массиве
                          * Оператор `NotIn` является инверсивной оператора `In`
                          * Оператор `Regex` пытается проверить строку в поле c использование регулярного вырадения, только логи, в которых есть поля подпадающие под регулярное выражение пройдут в хранилище
                          * Оператор `NotRegex` является инверсией оператора `Regex`, в хранилище попадут логи, в которых нет поля или же оно не подпадает под регулярное выражение
                          * Оператор `Exists` проверяет наличие поля и пропускает логи только если поле есть
                          * Оператор `DoesNotExist` проверяет наличие поля и пропускает логи только если поле отсутствует
                      values:
                        description: |
                          Список регулярных выражений или значений для сравнения. Можно использовать целые числа или строки.
                          Поля с числами с плавающей запятой и поля логического типа будут преобразованы в строки при сравнении.
                multilineParser:
                  description: Список паттернов для опреления многострочных логов
                  properties:
                    type:
                      description: |
                        Типы парсеров:
                        * None - не пасить логи.
                        * General - Парсер, который пытается сливать логи у которых в начале сообщения стоит пробел или табуляция.
                        * Backslash - Парсер, который парсит многострочные логи в bash-формете с обратным слэшом у строк одного сообщения.
                        * LogWithTime - Парсер, который ожидает что любое новое сообщение начинается с временной метки.
                        * MultilineJSON - Простой парсер логов, который предполагает что новое сообщение начинается с  `{`.
                destinationRefs:
                  description: Список бэкендов хранения, в которые будет отправлено сообщение.
