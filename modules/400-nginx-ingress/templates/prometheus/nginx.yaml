{{- if (.Values.global.enabledModules | has "prometheus") }}
  {{- range (prepend .Values.nginxIngress.additionalControllers .Values.nginxIngress) }}
    {{- $_ := set . "Values" $.Values }}
    {{- $inlet := (include "helper.inlet" .) }}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
    {{- if not .name }}
  name: nginx-ingress-controller
    {{- else }}
  name: nginx-ingress-controller-{{ .name }}
    {{- end }}
  namespace: kube-prometheus
  labels:
    heritage: antiopa
    module: {{ $.Chart.Name }}
    prometheus: main
spec:
  jobLabel: prometheus-target
  endpoints:
  - port: controller
    relabelings:
    - regex: endpoint|namespace|pod|service
      action: labeldrop
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: instance
    - sourceLabels: [__meta_kubernetes_service_name]
      regex: kube-prometheus-discovery-of-(.*)
      targetLabel: app
    - targetLabel: controller
    {{- if not .name }}
      replacement: main
    {{- else }}
      replacement: {{ .name }}
    {{- end }}
    - targetLabel: endpoint
      replacement: controller
    # request_time_hist::$scheme:$server_name:$namespace:$ingress_name:$service_name:$service_port:$upstream_addr:$location_path
    metricRelabelings:
    # remove ingress_class, we have "controller" label
    - regex: ingress_class
      action: labeldrop

    # remove unused metrics
    - sourceLabels: [__name__]
      regex: nginx_bytes_total|nginx_cache_total|nginx_filterzone_cache_total|nginx_requests_total|nginx_responses_total|nginx_upstream_backup|nginx_upstream_bytes_total|nginx_upstream_fail_timeout|nginx_upstream_maxfails|nginx_upstream_requests_total|nginx_upstream_response_msecs_avg|nginx_upstream_responses_total|nginx_upstream_weight|nginx_vts_upstream_down_total
      action: drop

    # process time_hist's
    - sourceLabels: [server_zone]
      regex: .*_time_hist::([^\|]*)\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      targetLabel: scheme

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|([^\|]*)\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      targetLabel: server_name
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|(_)\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      replacement: Default
      targetLabel: server_name

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|([^\|]*)\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      targetLabel: namespace
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|()\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      replacement: None
      targetLabel: namespace

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|([^\|]*)\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      targetLabel: ingress_name
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|()\|[^\|]*\|[^\|]*\|[^\|]*\|.*
      replacement: None
      targetLabel: ingress_name

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|([^\|]*)\|[^\|]*\|[^\|]*\|.*
      targetLabel: service_name
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|()\|[^\|]*\|[^\|]*\|.*
      replacement: None
      targetLabel: service_name

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|([^\|]*)\|[^\|]*\|.*
      targetLabel: service_port
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|(0)\|[^\|]*\|.*
      replacement: None
      targetLabel: service_port

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|([^, \|]*)([^\|]*)\|.*
      targetLabel: upstream_address
    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|()\|.*
      replacement: None
      targetLabel: upstream_address

    - sourceLabels: [server_zone]
      regex: .*_time_hist::[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|[^\|]*\|(.*)
      targetLabel: location_path

    - sourceLabels: [server_zone]
      regex: (.*_time_hist)::.*
      replacement: $1
      targetLabel: server_zone
  - port: statsd
    scheme: https
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    tlsConfig:
      insecureSkipVerify: true
    relabelings:
    - regex: endpoint|namespace|pod|service
      action: labeldrop
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: instance
    - sourceLabels: [__meta_kubernetes_service_name]
      regex: kube-prometheus-discovery-of-(.*)
      targetLabel: app
    - targetLabel: controller
    {{- if not .name }}
      replacement: main
    {{- else }}
      replacement: {{ .name }}
    {{- end }}
    - targetLabel: endpoint
      replacement: statsd
  selector:
    matchLabels:
      prometheus-target: nginx-ingress-controller
  namespaceSelector:
    matchNames:
    - {{ include "helper.namespace" . }}
---
apiVersion: v1
kind: Service
metadata:
  name: kube-prometheus-discovery-of-nginx
  namespace: {{ include "helper.namespace" . }}
  labels:
    heritage: antiopa
    module: {{ $.Chart.Name }}
    prometheus-target: nginx-ingress-controller
spec:
  selector:
    app: nginx
  type: ClusterIP
  clusterIP: None
  ports:
  - name: controller
    port: 10254
    targetPort: 10254
    protocol: TCP
  - name: statsd
    port: 9103
    targetPort: 9103
    protocol: TCP
    {{- if eq $inlet "Direct" }}
---
apiVersion: v1
kind: Service
metadata:
  name: kube-prometheus-discovery-of-nginx-for-direct-fallback
  namespace: {{ include "helper.namespace" . }}
  labels:
    heritage: antiopa
    module: {{ $.Chart.Name }}
    prometheus-target: nginx-ingress-controller
spec:
  selector:
    app: nginx-for-direct-fallback
  type: ClusterIP
  clusterIP: None
  ports:
  - name: controller
    port: 10254
    targetPort: 10254
    protocol: TCP
  - name: statsd
    port: 9103
    targetPort: 9103
    protocol: TCP
    {{- end }}
  {{- end }}
{{- end }}
