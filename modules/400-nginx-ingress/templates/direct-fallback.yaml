{{- range $config := prepend .Values.nginxIngress.additionalControllers .Values.nginxIngress }}
  {{- $context := $config | toJson | fromJson }}
  {{- $_ := set $context "Chart" $.Chart }}
  {{- $_ := set $context "Values" $.Values }}
  {{- $inlet := (include "helper.inlet" $context) }}
  {{- if eq $inlet "Direct" }}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-for-direct-fallback
  namespace: {{ include "helper.namespace" $context }}
{{ include "helm_lib_module_labels" (list $ (dict "app" "direct-fallback")) | indent 2 }}
spec:
  ports:
  - name: http-proxy
    port: 80
    protocol: TCP
  - name: https-proxy
    port: 443
    protocol: TCP
  selector:
    app: nginx-for-direct-fallback
    {{- if ($context.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: direct-fallback
  namespace: {{ include "helper.namespace" $context }}
{{ include "helm_lib_module_labels" (list $ (dict "app" "direct-fallback")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: DaemonSet
    name: direct-fallback
  updatePolicy:
    updateMode: "Off"
    {{- end }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: direct-fallback
  namespace: {{ include "helper.namespace" $context }}
{{ include "helm_lib_module_labels" (list $ (dict "app" "direct-fallback" "nginx-ingress-safe-update" "")) | indent 2 }}
spec:
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: direct-fallback
  template:
    metadata:
      labels:
        app: direct-fallback
#TODO: Docker before 1.12 does not support sysctls
#      annotations:
#        security.alpha.kubernetes.io/sysctls: "net.ipv4.ip_local_port_range=1024 65000"
{{- if .enableIstioSidecar }}
      annotations:
        sidecar.istio.io/inject: "false"
{{- end }}
    spec:
{{- include "helm_lib_node_selector" (tuple $context "frontend" .) | indent 6 }}
{{- include "helm_lib_tolerations" (tuple $context "frontend" . true) | indent 6 }}
{{- include "helm_lib_priority_class" (tuple $context "cluster-high") | indent 6 }}
      serviceAccountName: kube-nginx-ingress
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 300
      containers:
      - image: {{ $.Values.global.modulesImages.registry }}/nginx-ingress/direct-fallback:{{ $.Values.global.modulesImages.tags.nginxIngress.directFallback }}
        name: nginx
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10253
            host: 127.0.0.1
          initialDelaySeconds: 3
        lifecycle:
          preStop:
            exec:
              command: ["/usr/sbin/nginx","-s","quit"]
      - image: {{ $.Values.global.modulesImages.registry }}/nginx-ingress/direct-fallback-iptables:{{ $.Values.global.modulesImages.tags.nginxIngress.directFallbackIptables }}
        name: iptables-loop
        securityContext:
          capabilities:
            add:
            - NET_RAW
            - NET_ADMIN
      - name: nginx-exporter
        image: {{ $.Values.global.modulesImages.registry }}/nginx-ingress/nginx-exporter:{{ $.Values.global.modulesImages.tags.nginxIngress.nginxExporter }}
        args: ["-nginx.scrape_uri=http://127.0.0.1:10253/nginx_status", "-telemetry.address=127.0.0.1:10354", "-insecure=true"]
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10354
            host: 127.0.0.1
      - name: kube-rbac-proxy
        image: {{ $.Values.global.modulesImages.registry }}/common/kube-rbac-proxy:{{ $.Values.global.modulesImages.tags.common.kubeRbacProxy }}
        args:
        - "--secure-listen-address=$(MY_POD_IP):10355"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            upstreams:
            - upstream: http://127.0.0.1:10354/metrics
              path: /metrics
              authorization:
                resourceAttributes:
                  namespace: {{ include "helper.namespace" . }}
                  apiGroup: apps
                  apiVersion: v1
                  resource: daemonsets
                  subresource: prometheus-metrics
                  name: direct-fallback
        ports:
        - containerPort: 10355
          name: https-metrics
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
      imagePullSecrets:
      - name: deckhouse-registry
  {{- end }}
{{- end }}
