From 497507ed437a6938e7f618bbe2da506797112d8c Mon Sep 17 00:00:00 2001
From: Eugene Shevchenko <evgeny.shevchenko@flant.com>
Date: Mon, 18 Jan 2021 18:44:26 +0300
Subject: [PATCH] backport #6325

PR https://github.com/kubernetes/ingress-nginx/pull/6325
---
 internal/ingress/controller/store/store.go | 46 ++++++++++++++++++++--
 1 file changed, 43 insertions(+), 3 deletions(-)

diff --git a/internal/ingress/controller/store/store.go b/internal/ingress/controller/store/store.go
index 7b9233c59..a21ed1f50 100644
--- a/internal/ingress/controller/store/store.go
+++ b/internal/ingress/controller/store/store.go
@@ -25,6 +25,7 @@ import (
 	"sync"
 	"time"

+	"k8s.io/apimachinery/pkg/fields"
 	"k8s.io/klog"

 	"github.com/eapache/channels"
@@ -259,10 +260,37 @@ func New(

 	store.listers.IngressWithAnnotation.Store = cache.NewStore(cache.DeletionHandlingMetaNamespaceKeyFunc)

+	// As we currently do not filter out kubernetes objects we list, we can
+	// retrieve a huge amount of data from the API server.
+	// In a cluster using HELM < v3 configmaps are used to store binary data.
+	// If you happen to have a lot of HELM releases in the cluster it will make
+	// the memory consumption of nginx-ingress-controller explode.
+	// In order to avoid that we filter out labels OWNER=TILLER.
+	labelsTweakListOptionsFunc := func(options *metav1.ListOptions) {
+		if len(options.LabelSelector) > 0 {
+			options.LabelSelector += ",OWNER!=TILLER"
+		} else {
+			options.LabelSelector = "OWNER!=TILLER"
+		}
+	}
+
+	// As of HELM >= v3 helm releases are stored using Secrets instead of ConfigMaps.
+	// In order to avoid listing those secrets we discard type "helm.sh/release.v1"
+	secretsTweakListOptionsFunc := func(options *metav1.ListOptions) {
+		helmAntiSelector := fields.OneTermNotEqualSelector("type", "helm.sh/release.v1")
+		baseSelector, err := fields.ParseSelector(options.FieldSelector)
+
+		if err != nil {
+			options.FieldSelector = helmAntiSelector.String()
+		} else {
+			options.FieldSelector = fields.AndSelectors(baseSelector, helmAntiSelector).String()
+		}
+	}
+
 	// create informers factory, enable and assign required informers
 	infFactory := informers.NewSharedInformerFactoryWithOptions(client, resyncPeriod,
 		informers.WithNamespace(namespace),
-		informers.WithTweakListOptions(func(*metav1.ListOptions) {}))
+	)

 	if k8s.IsNetworkingIngressAvailable {
 		store.informers.Ingress = infFactory.Networking().V1beta1().Ingresses().Informer()
@@ -270,15 +298,27 @@ func New(
 		store.informers.Ingress = infFactory.Extensions().V1beta1().Ingresses().Informer()
 	}

+	// create informers factory for configmaps
+	infFactoryConfigmaps := informers.NewSharedInformerFactoryWithOptions(client, resyncPeriod,
+		informers.WithNamespace(namespace),
+		informers.WithTweakListOptions(labelsTweakListOptionsFunc),
+	)
+
+	// create informers factory for secrets
+	infFactorySecrets := informers.NewSharedInformerFactoryWithOptions(client, resyncPeriod,
+		informers.WithNamespace(namespace),
+		informers.WithTweakListOptions(secretsTweakListOptionsFunc),
+	)
+
 	store.listers.Ingress.Store = store.informers.Ingress.GetStore()

 	store.informers.Endpoint = infFactory.Core().V1().Endpoints().Informer()
 	store.listers.Endpoint.Store = store.informers.Endpoint.GetStore()

-	store.informers.Secret = infFactory.Core().V1().Secrets().Informer()
+	store.informers.Secret = infFactorySecrets.Core().V1().Secrets().Informer()
 	store.listers.Secret.Store = store.informers.Secret.GetStore()

-	store.informers.ConfigMap = infFactory.Core().V1().ConfigMaps().Informer()
+	store.informers.ConfigMap = infFactoryConfigmaps.Core().V1().ConfigMaps().Informer()
 	store.listers.ConfigMap.Store = store.informers.ConfigMap.GetStore()

 	store.informers.Service = infFactory.Core().V1().Services().Informer()
--
2.29.2

