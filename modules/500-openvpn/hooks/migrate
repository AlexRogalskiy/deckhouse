#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 1
    kubernetes:
    - name: pvc_old
      group: main
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["kube-openvpn"]
      labelSelector:
        matchLabels:
          app: openvpn
    - name: pvc_new
      group: main
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["d8-openvpn"]
      labelSelector:
        matchLabels:
          app: openvpn
      executeHookOnEvent: []
      executeHookOnSynchronization: false
    - name: openvpn_external
      group: main
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      apiVersion: v1
      kind: Service
      namespace:
        nameSelector:
          matchNames: ["kube-openvpn"]
      nameSelector:
        matchNames: [openvpn-external]
    - name: etcd_pods
      group: main
      executeHookOnSynchronization: false
      executeHookOnEvent: []
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: etcd
      jqFilter: |
        {
          "pod_name": .metadata.name,
          "endpoint": "https://\(.status.podIP):2379",
          "ca_path": "/etc/kubernetes/pki/etcd/ca.crt",
          "cert_path": "/etc/kubernetes/pki/etcd/server.crt",
          "key_path": "/etc/kubernetes/pki/etcd/server.key"
        }
    - name: etcd_pods_kops
      group: main
      executeHookOnSynchronization: false
      executeHookOnEvent: []
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: etcd-manager-main
      jqFilter: |
        {
          "pod_name": .metadata.name,
          "endpoint": "https://\(.status.podIP):4001",
          "ca_path": "/etc/kubernetes/pki/etcd-manager/etcd-manager-ca.crt",
          "cert_path": "/etc/kubernetes/pki/etcd-manager/etcd-manager-server-etcd-{a,b,c}.crt",
          "key_path": "/etc/kubernetes/pki/etcd-manager/etcd-manager-server-etcd-{a,b,c}.key"
        }
EOF
}

function __main__ {
  if context::has snapshots.pvc_old.0 && ! context::has snapshots.pvc_new.0 ; then
    kubectl -n kube-openvpn get pvc openvpn -o json | jq '
      del(.metadata.uid) |
      .metadata.namespace="d8-openvpn" |
      .metadata.selfLink="/api/v1/namespaces/d8-openvpn/persistentvolumeclaims/certs-openvpn-0" |
      .metadata.name="certs-openvpn-0"
      ' | kubectl create -f -

    new_pvc_spec="$(kubectl -n d8-openvpn get pvc certs-openvpn-0 -o json | jq -rc '
      {
        "name": "certs-openvpn-0",
        "namespace": "d8-openvpn",
        "resourceVersion": .metadata.resourceVersion,
        "uid": .metadata.uid,
        "volumeName": .spec.volumeName
      }
    ')"

    pv_name="$(jq -r '.volumeName' <<< "$new_pvc_spec")"

    kubectl get pv "$pv_name" -o json | jq -r --argjson pvc "$new_pvc_spec" '
      .spec.claimRef.name=$pvc.name |
      .spec.claimRef.namespace=$pvc.namespace |
      .spec.claimRef.resourceVersion=$pvc.resourceVersion |
      .spec.claimRef.uid=$pvc.uid
      ' | kubectl replace -f -
  fi

  if context::has snapshots.openvpn_external.0; then
    if context::has snapshots.etcd_pods.0; then
      etcd_connection_opts="$(context::jq -r '.snapshots.etcd_pods[0].filterResult')"
    elif context::has snapshots.etcd_pods_kops.0; then
      etcd_connection_opts="$(context::jq -r '.snapshots.etcd_pods_kops[0].filterResult')"
    else
      echo "ERROR: Something went wrong, pod etcd not found. Service kube-openvpn/openvpn-external not have been migrated to d8-openvpn namespace."
      return 0
    fi
    pod_name="$(jq -r '.pod_name' <<< "$etcd_connection_opts")"
    pod_ca_path="$(jq -r '.ca_path' <<< "$etcd_connection_opts")"
    pod_cert_path="$(jq -r '.cert_path' <<< "$etcd_connection_opts")"
    pod_key_path="$(jq -r '.key_path' <<< "$etcd_connection_opts")"

    tmp="/tmp/etcd-$(date +%N)"
    mkdir -p "$tmp"

    kubectl -n kube-system exec -t "$pod_name" cat "$pod_ca_path"  > "$tmp/ca.crt" 2>/dev/null
    kubectl -n kube-system exec -t "$pod_name" cat "$pod_cert_path" > "$tmp/client.crt" 2>/dev/null
    kubectl -n kube-system exec -t "$pod_name" cat "$pod_key_path" > "$tmp/client.key" 2>/dev/null

    endpoint="$(jq -r '.endpoint' <<< "$etcd_connection_opts")"
    ca_path="$tmp/ca.crt"
    cert_path="$tmp/client.crt"
    key_path="$tmp/client.key"
    src_namespace="kube-openvpn"
    src_name="openvpn-external"
    dst_namespace="d8-openvpn"
    dst_name="openvpn-external"
    deckhouse-controller helper etcd move-service "$endpoint" "$ca_path" "$cert_path" "$key_path" "$src_namespace" "$src_name" "$dst_namespace" "$dst_name"
    rm -r "$tmp"

    kubernetes::delete_if_exists::non_blocking "kube-openvpn" "dexauthenticators.deckhouse.io/openvpn"
    kubernetes::delete_if_exists::non_blocking "kube-openvpn" "ingress/admin"
    kubernetes::delete_if_exists::non_blocking "kube-openvpn" "ingress/openvpn-dex-authenticator"
    kubernetes::delete_if_exists::non_blocking "kube-openvpn" "deployment/openvpn-dex-authenticator"
  fi
}

hook::run $@
