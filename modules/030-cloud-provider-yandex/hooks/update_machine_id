#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    kubernetes:
    - name: nodes
      group: main
      keepFullObjectsInMemory: false
      executeHookOnEvent: ["Added", "Modified"]
      waitForSynchronization: false
      apiVersion: v1
      kind: Node
      jqFilter: |
        {
          "name": .metadata.name,
          "providerID": (.spec.providerID // ""),
          "hasCorrectProviderID": (.spec.providerID // "" | test("^yandex://([^/]+)\$"))
        }
    - name: machines
      apiVersion: machine.sapcloud.io/v1alpha1
      kind: Machine
      group: main
      keepFullObjectsInMemory: false
      executeHookOnEvent: []
      namespace:
        nameSelector:
          matchNames: [d8-cloud-instance-manager]
      jqFilter: |
        {
          "name": .metadata.name,
          "providerID": (.spec.providerID // ""),
          "isMustBeUpdated": (.spec.providerID // "yandex://id/zone/name" | test("^yandex://([^/]+)/([^/]+)/([^/]+)\$"))
        }
EOF
}

function __main__() {
  if [ ! -v D8_IS_TESTS_ENVIRONMENT ]; then
    if ! kubectl -n d8-cloud-instance-manager get configmap flag-providerid-migrated >/dev/null 2>/dev/null; then
      kubectl -n d8-cloud-instance-manager delete deploy machine-controller-manager || true

      while kubectl -n d8-cloud-instance-manager get po | grep machine-controller-manager 2>/dev/null >/dev/null; do
         echo "waiting for machine-controller-manager to stop"
         sleep 1
      done

      nodes="$(kubectl get no -o json | jq '.items[] | {"name": .metadata.name, "providerID": .spec.providerID, "hasCorrectProviderID": (.spec.providerID | test("^yandex://([^/]+)$"))}')"
      machines="$(kubectl -n d8-cloud-instance-manager get machine -o json | jq '.items[] | {"name": .metadata.name, "providerID": .spec.providerID, "isMustBeUpdated": (.spec.providerID | test("^yandex://([^/]+)/([^/]+)/([^/]+)$"))}')"

      for machine_name in $(jq -r 'select(.hasCorrectProviderID).name' <<< "$nodes"); do
        provider_id="$(jq -r --arg name "$machine_name" 'select(.name == $name).providerID' <<< "$nodes")"
        if jq -e --arg name "$machine_name" 'select(.name == $name).isMustBeUpdated' <<< "$machines" >/dev/null; then
          kubectl -n d8-cloud-instance-manager patch machine "$machine_name" --type='json' -p="[{\"op\": \"replace\", \"path\": \"/spec/providerID\", \"value\":\"${provider_id}\"}]"
        fi
      done

      kubectl -n d8-cloud-instance-manager create configmap flag-providerid-migrated
    fi
  fi

  for machine_name in $(context::jq -r '.snapshots.nodes[].filterResult | select(.hasCorrectProviderID).name'); do
    provider_id="$(context::jq -r --arg name "$machine_name" '.snapshots.nodes[].filterResult | select(.name == $name).providerID')"
    if context::jq -e --arg name "$machine_name" '.snapshots.machines[].filterResult | select(.name == $name).isMustBeUpdated' >/dev/null; then
      fltr='. | .spec.providerID = '"\"${provider_id}\""
      kubernetes::patch_jq "d8-cloud-instance-manager" "machine/$machine_name" "$fltr"
    fi
  done
}

hook::run "$@"
