diff --git a/pkg/prometheus/promcfg.go b/pkg/prometheus/promcfg.go
index a0f5d11a..c4f07568 100644
--- a/pkg/prometheus/promcfg.go
+++ b/pkg/prometheus/promcfg.go
@@ -20,6 +20,7 @@ import (
 	"regexp"
 	"sort"
 	"strings"
+	"time"

 	"github.com/blang/semver"
 	"github.com/go-kit/kit/log"
@@ -236,7 +237,8 @@ func (cg *configGenerator) generateConfig(
 					p.Spec.OverrideHonorLabels,
 					p.Spec.OverrideHonorTimestamps,
 					p.Spec.IgnoreNamespaceSelectors,
-					p.Spec.EnforcedNamespaceLabel))
+					p.Spec.EnforcedNamespaceLabel,
+					scrapeInterval))
 		}
 	}
 	for _, identifier := range pMonIdentifiers {
@@ -250,7 +252,8 @@ func (cg *configGenerator) generateConfig(
 					p.Spec.OverrideHonorLabels,
 					p.Spec.OverrideHonorTimestamps,
 					p.Spec.IgnoreNamespaceSelectors,
-					p.Spec.EnforcedNamespaceLabel))
+					p.Spec.EnforcedNamespaceLabel,
+					scrapeInterval))
 		}
 	}

@@ -370,7 +373,8 @@ func (cg *configGenerator) generatePodMonitorConfig(
 	ignoreHonorLabels bool,
 	overrideHonorTimestamps bool,
 	ignoreNamespaceSelectors bool,
-	enforcedNamespaceLabel string) yaml.MapSlice {
+	enforcedNamespaceLabel string,
+	globalScrapeInterval string) yaml.MapSlice {

 	hl := honorLabels(ep.HonorLabels, ignoreHonorLabels)
 	cfg := yaml.MapSlice{
@@ -397,11 +401,23 @@ func (cg *configGenerator) generatePodMonitorConfig(
 		cfg = append(cfg, cg.generateK8SSDConfig(selectedNamespaces, apiserverConfig, basicAuthSecrets, kubernetesSDRolePod))
 	}

+	globalScrapeIntervalDuration, _ := time.ParseDuration(globalScrapeInterval)
+
 	if ep.Interval != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scrape_interval", Value: ep.Interval})
 	}
 	if ep.ScrapeTimeout != "" {
-		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: ep.ScrapeTimeout})
+		scrapeTimeout := ep.ScrapeTimeout
+		podMonitorScrapeTimeoutDuration, _ := time.ParseDuration(scrapeTimeout)
+		if ep.Interval != "" {
+			podMonitorScrapeInterval, _ := time.ParseDuration(ep.Interval)
+			if podMonitorScrapeTimeoutDuration.Seconds() > podMonitorScrapeInterval.Seconds() {
+				scrapeTimeout = ep.Interval
+			}
+		} else if podMonitorScrapeTimeoutDuration.Seconds() > globalScrapeIntervalDuration.Seconds() {
+			scrapeTimeout = globalScrapeInterval
+		}
+		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: scrapeTimeout})
 	}
 	if ep.Path != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "metrics_path", Value: ep.Path})
@@ -592,7 +612,8 @@ func (cg *configGenerator) generateServiceMonitorConfig(
 	overrideHonorLabels bool,
 	overrideHonorTimestamps bool,
 	ignoreNamespaceSelectors bool,
-	enforcedNamespaceLabel string) yaml.MapSlice {
+	enforcedNamespaceLabel string,
+	globalScrapeInterval string) yaml.MapSlice {

 	hl := honorLabels(ep.HonorLabels, overrideHonorLabels)
 	cfg := yaml.MapSlice{
@@ -619,11 +640,23 @@ func (cg *configGenerator) generateServiceMonitorConfig(
 		cfg = append(cfg, cg.generateK8SSDConfig(selectedNamespaces, apiserverConfig, basicAuthSecrets, kubernetesSDRoleEndpoint))
 	}

+	globalScrapeIntervalDuration, _ := time.ParseDuration(globalScrapeInterval)
+
 	if ep.Interval != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scrape_interval", Value: ep.Interval})
 	}
 	if ep.ScrapeTimeout != "" {
-		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: ep.ScrapeTimeout})
+		scrapeTimeout := ep.ScrapeTimeout
+		serviceMonitorScrapeTimeoutDuration, _ := time.ParseDuration(scrapeTimeout)
+		if ep.Interval != "" {
+			serviceMonitorScrapeInterval, _ := time.ParseDuration(ep.Interval)
+			if serviceMonitorScrapeTimeoutDuration.Seconds() > serviceMonitorScrapeInterval.Seconds() {
+				scrapeTimeout = ep.Interval
+			}
+		} else if serviceMonitorScrapeTimeoutDuration.Seconds() > globalScrapeIntervalDuration.Seconds() {
+			scrapeTimeout = globalScrapeInterval
+		}
+		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: scrapeTimeout})
 	}
 	if ep.Path != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "metrics_path", Value: ep.Path})
