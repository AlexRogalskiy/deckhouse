Index: pkg/prometheus/statefulset.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/prometheus/statefulset.go b/pkg/prometheus/statefulset.go
--- a/pkg/prometheus/statefulset.go	(revision d62d0372901ab85655f8e593c3421ecaaddfe856)
+++ b/pkg/prometheus/statefulset.go	(revision 1f642c5898fa7a4c624de9b4e08405062a7ab1c5)
@@ -588,6 +588,36 @@

 	const localProbe = `if [ -x "$(command -v curl)" ]; then exec curl %s; elif [ -x "$(command -v wget)" ]; then exec wget -q -O /dev/null %s; else exit 1; fi`

+	var livenessProbeHandler v1.Handler
+	{
+		healthyPath := path.Clean(webRoutePrefix + "/-/healthy")
+		if p.Spec.ListenLocal {
+			localHealthyPath := fmt.Sprintf("http://localhost:9090%s", healthyPath)
+			livenessProbeHandler.Exec = &v1.ExecAction{
+				Command: []string{
+					"sh",
+					"-c",
+					fmt.Sprintf(localProbe, localHealthyPath, localHealthyPath),
+				},
+			}
+		} else {
+			livenessProbeHandler.HTTPGet = &v1.HTTPGetAction{
+				Path: healthyPath,
+				Port: intstr.FromString(p.Spec.PortName),
+			}
+			if p.Spec.Web != nil && p.Spec.Web.TLSConfig != nil && version.GTE(semver.MustParse("2.24.0")) {
+				livenessProbeHandler.HTTPGet.Scheme = v1.URISchemeHTTPS
+			}
+		}
+	}
+
+	livenessProbe := &v1.Probe{
+		Handler:          livenessProbeHandler,
+		TimeoutSeconds:   probeTimeoutSeconds,
+		PeriodSeconds:    5,
+		FailureThreshold: 120, // Allow up to 10m on startup for data recovery
+	}
+
 	var readinessProbeHandler v1.Handler
 	{
 		readyPath := path.Clean(webRoutePrefix + "/-/ready")
@@ -829,6 +859,7 @@
 			Ports:                    ports,
 			Args:                     promArgs,
 			VolumeMounts:             promVolumeMounts,
+			LivenessProbe:            livenessProbe,
 			ReadinessProbe:           readinessProbe,
 			Resources:                p.Spec.Resources,
 			TerminationMessagePolicy: v1.TerminationMessageFallbackToLogsOnError,
Index: pkg/prometheus/statefulset_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/prometheus/statefulset_test.go b/pkg/prometheus/statefulset_test.go
--- a/pkg/prometheus/statefulset_test.go	(revision d62d0372901ab85655f8e593c3421ecaaddfe856)
+++ b/pkg/prometheus/statefulset_test.go	(revision 1f642c5898fa7a4c624de9b4e08405062a7ab1c5)
@@ -426,6 +426,25 @@
 		t.Fatalf("Readiness probe doesn't match expected. \n\nExpected: %+v\n\nGot: %+v", expectedReadinessProbe, actualReadinessProbe)
 	}

+	actualLivenessProbe := sset.Spec.Template.Spec.Containers[0].LivenessProbe
+	expectedLivenessProbe := &v1.Probe{
+		Handler: v1.Handler{
+			Exec: &v1.ExecAction{
+				Command: []string{
+					`sh`,
+					`-c`,
+					`if [ -x "$(command -v curl)" ]; then exec curl http://localhost:9090/-/healthy; elif [ -x "$(command -v wget)" ]; then exec wget -q -O /dev/null http://localhost:9090/-/healthy; else exit 1; fi`,
+				},
+			},
+		},
+		TimeoutSeconds:   3,
+		PeriodSeconds:    5,
+		FailureThreshold: 120,
+	}
+	if !reflect.DeepEqual(actualLivenessProbe, expectedLivenessProbe) {
+		t.Fatalf("Liveness probe doesn't match expected. \n\nExpected: %+v\n\nGot: %+v", expectedLivenessProbe, actualLivenessProbe)
+	}
+
 	if len(sset.Spec.Template.Spec.Containers[0].Ports) != 0 {
 		t.Fatal("Prometheus container should have 0 ports defined")
 	}
