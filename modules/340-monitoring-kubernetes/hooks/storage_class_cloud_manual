#!/bin/bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: storageclasses
      group: main
      queue: /modules/$(module::name::kebab_case)
      apiVersion: storage.k8s.io/v1
      kind: Storageclass
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "isCloud": (
            (.provisioner == "ebs.csi.aws.com") or
            (.provisioner == "disk.csi.azure.com") or
            (.provisioner == "pd.csi.storage.gke.io") or
            (.provisioner == "cinder.csi.openstack.org") or
            (.provisioner == "vsphere.csi.vmware.com") or
            (.provisioner == "yandex.csi.flant.com")
          ),
          "provisioner": .provisioner
        }
      labelSelector:
        matchExpressions:
        - key: heritage
          operator: NotIn
          values: ["deckhouse"]
EOF
}

function __main__() {
  group="/modules/$(module::name::kebab_case)/storage_class_cloud_manual"
  jq -c --arg group "$group" '.group = $group' <<< '{"action":"expire"}' >> $METRICS_PATH
  if storageclasses="$(context::jq -rc '[.snapshots.storageclasses[].filterResult | select(.isCloud == true and ((.name == "vsphere-main" and .provisioner == "vsphere.csi.vmware.com") | not))]')" >/dev/null; then
    context::jq -c --arg group "$group" --argjson storageclasses "$storageclasses" '
      $storageclasses[] |
      {
        "name": "storage_class_cloud_manual",
        "group": "\($group)",
        "set": 1,
        "labels":
        {
          "name": .name
        }
      }
      ' >> $METRICS_PATH
  fi
}

hook::run $@
