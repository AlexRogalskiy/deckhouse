{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: kube-state-metrics
  namespace: d8-monitoring
{{ include "helm_lib_module_labels" (list . (dict "app" "kube-state-metrics")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: kube-state-metrics
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: "kube-state-metrics"
      maxAllowed:
        cpu: {{ .Values.monitoringKubernetes.vpa.kubeStateMetricsMaxCPU | default .Values.monitoringKubernetes.internal.vpa.kubeStateMetricsMaxCPU | quote }}
        memory: {{ .Values.monitoringKubernetes.vpa.kubeStateMetricsMaxMemory | default .Values.monitoringKubernetes.internal.vpa.kubeStateMetricsMaxMemory | quote }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: d8-monitoring
{{ include "helm_lib_module_labels" (list . (dict "app" "kube-state-metrics")) | indent 2 }}
spec:
  replicas: {{ include "helm_lib_is_ha_to_value" (list . 2 1) }}
  strategy:
    type: RollingUpdate
  {{- if (include "helm_lib_ha_enabled" . ) }}
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  {{- end }}
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      imagePullSecrets:
      - name: deckhouse-registry
      serviceAccountName: kube-state-metrics
{{- include "helm_lib_node_selector" (tuple . "monitoring") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "monitoring") | indent 6 }}
{{- include "helm_lib_priority_class" (tuple . "cluster-medium") | indent 6 }}
      {{- if (include "helm_lib_ha_enabled" .) }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: kube-state-metrics
            topologyKey: kubernetes.io/hostname
    {{- end }}
      containers:
      - name: kube-state-metrics
        image: {{ $.Values.global.modulesImages.registry }}/monitoring-kubernetes/kube-state-metrics:{{ $.Values.global.modulesImages.tags.monitoringKubernetes.kubeStateMetrics }}
        args:
        - "--host=127.0.0.1"
        - "--port=8081"
        - "--telemetry-host=127.0.0.1"
        - "--telemetry-port=8082"
        - "--collectors=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,limitranges,namespaces,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,verticalpodautoscalers"
        resources: {}
        livenessProbe:
          httpGet:
            path: /main/healthz
            port: 8080
            scheme: HTTPS
        readinessProbe:
          httpGet:
            path: /main/healthz
            port: 8080
            scheme: HTTPS
      - name: kube-rbac-proxy
        image: {{ $.Values.global.modulesImages.registry }}/common/kube-rbac-proxy:{{ $.Values.global.modulesImages.tags.common.kubeRbacProxy }}
        args:
        - "--secure-listen-address=0.0.0.0:8080"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        ports:
        - containerPort: 8080
          name: https-metrics
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
        env:
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            excludePaths:
            - /main/healthz
            upstreams:
            - upstream: http://127.0.0.1:8081/
              path: /main/
              authorization:
                resourceAttributes:
                  namespace: d8-monitoring
                  apiGroup: apps
                  apiVersion: v1
                  resource: deployments
                  subresource: prometheus-main-metrics
                  name: kube-state-metrics
            - upstream: http://127.0.0.1:8082/metrics
              path: /self/metrics
              authorization:
                resourceAttributes:
                  namespace: d8-monitoring
                  apiGroup: apps
                  apiVersion: v1
                  resource: deployments
                  subresource: prometheus-self-metrics
                  name: kube-state-metrics
