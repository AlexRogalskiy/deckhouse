#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  beforeHelm: 10
  kubernetes:
  - name: secret
    group: main
    queue: /modules/$(module::name::kebab_case)/discover_webhook_certs
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    executeHookOnEvent: ["Added", "Modified"]
    nameSelector:
      matchNames: ["webhook-handler-certs"]
    namespace:
      nameSelector:
        matchNames: ["d8-system"]
    jqFilter: |
      {
        "crt": (.data."tls.crt" | @base64d),
        "key": (.data."tls.key" | @base64d),
        "ca":  (.data."ca.crt"   | @base64d)
      }
EOF
}

function __main__() {
  if context::has snapshots.secret.0; then
    values::set deckhouse.internal.webhookHandlerCert.crt "$(context::get snapshots.secret.0.filterResult.crt)"
    values::set deckhouse.internal.webhookHandlerCert.key "$(context::get snapshots.secret.0.filterResult.key)"
    values::set deckhouse.internal.webhookHandlerCert.ca  "$(context::get snapshots.secret.0.filterResult.ca)"
    return 0
  fi

  svc_host="webhook-handler.d8-system.svc"
  svc_fqdn="${svc_host}.$(values::get global.discovery.clusterDomain)"

  ca_json="$(cat <<EOF
{
  "CN": "${svc_host}",
  "key": { "algo": "ecdsa", "size": 256 },
  "ca": { "expiry": "87600h" }
}
EOF
)"

  ca="$(cfssl gencert -initca - <<< "$ca_json")"
  ca_crt="$(jq .cert -r <<< "$ca")"

  # config for cfssl gencert
  config='
  {
  "signing": {
    "default": {
      "expiry": "87600h",
      "usages": [ "signing", "key encipherment", "requestheader-client" ]
    }
  }
}'

  cert_json="$(cat <<EOF
{
  "CN": "webhook-handler",
  "hosts": [
    "${svc_host}",
    "${svc_fqdn}",
    "validating-${svc_host}",
    "conversion-${svc_host}",
    "validating-${svc_fqdn}",
    "conversion-${svc_fqdn}"
  ],
  "key": { "algo": "ecdsa", "size": 256 }
}
EOF
)"
  cert="$(cfssl gencert -ca=<(jq .cert -r <<< "$ca") -ca-key=<(jq .key -r <<< "$ca") -config=<(echo "$config") - <<< "$cert_json")"
  webhook_server_crt="$(jq .cert -r <<< "$cert")"
  webhook_server_key="$(jq .key  -r <<< "$cert")"

  values::set deckhouse.internal.webhookHandlerCert.crt "$webhook_server_crt"
  values::set deckhouse.internal.webhookHandlerCert.key "$webhook_server_key"
  values::set deckhouse.internal.webhookHandlerCert.ca  "$ca_crt"
}

hook::run "$@"
