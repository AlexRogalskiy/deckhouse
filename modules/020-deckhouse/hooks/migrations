#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
EOF
}

function __main__() {
  patch_set=". "

  patch_set=$patch_set' | .spec.template.spec.containers[0].resources.requests = {"cpu":"50m","memory":"512Mi"}'
  if kubectl -n d8-system get deploy deckhouse -o json | jq -e '.spec.template.spec.containers[0].resources.limits' >/dev/null ; then
    patch_set=$patch_set' | .spec.template.spec.containers[0].resources.limits = {}'
  fi

  if ! kubectl -n d8-system get deploy deckhouse -o json | jq -e '.spec.template.spec.containers[0].readinessProbe' >/dev/null ; then
    patch_set=$patch_set' | .spec.template.spec.containers[0].readinessProbe = {"failureThreshold":120,"httpGet":{"path":"/ready","port":9650},"initialDelaySeconds":5,"periodSeconds":5}'
  fi

  if values::is_true global.clusterIsBootstrapped ; then
    patch_set=$patch_set' | .spec.template.spec.dnsPolicy = "ClusterFirstWithHostNet"'
  fi

  if [[ $(kubectl -n d8-system get deployment deckhouse -o json | jq -r '.spec.template.spec.containers[0].ports | length') < 2 ]]; then
    patch_set=$patch_set' | .spec.template.spec.containers[0].ports = [{"containerPort": 9650, "name": "self"},{"containerPort": 9651, "name": "custom"}]'
  fi

  kubernetes::patch_jq d8-system deployment/deckhouse "$patch_set"
}

hook::run $@
