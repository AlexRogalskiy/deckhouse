:100644 100644 b5c94862a 191f96cf6 M	discovery/kubernetes/pod.go
:100644 100644 107534540 9ffdd6b56 M	discovery/kubernetes/service.go
:100644 100644 d9ed8a02b 79cfea1a1 M	scrape/scrape.go
:100644 100644 4a7b6eb0f 5022a8055 M	scrape/target.go

diff --git a/discovery/kubernetes/pod.go b/discovery/kubernetes/pod.go
index b5c94862a..191f96cf6 100644
--- a/discovery/kubernetes/pod.go
+++ b/discovery/kubernetes/pod.go
@@ -245,6 +245,7 @@ func (p *Pod) buildPod(pod *apiv1.Pod) *targetgroup.Group {

 			tg.Targets = append(tg.Targets, model.LabelSet{
 				model.AddressLabel:            lv(addr),
+				"__sample_limit__":            lv(""),
 				podContainerNameLabel:         lv(c.Name),
 				podContainerPortNumberLabel:   lv(ports),
 				podContainerPortNameLabel:     lv(port.Name),
diff --git a/discovery/kubernetes/service.go b/discovery/kubernetes/service.go
index 107534540..9ffdd6b56 100644
--- a/discovery/kubernetes/service.go
+++ b/discovery/kubernetes/service.go
@@ -187,6 +187,7 @@ func (s *Service) buildService(svc *apiv1.Service) *targetgroup.Group {

 		labelSet := model.LabelSet{
 			model.AddressLabel:       lv(addr),
+			"__sample_limit__":       lv(""),
 			servicePortNameLabel:     lv(port.Name),
 			servicePortProtocolLabel: lv(string(port.Protocol)),
 			serviceType:              lv(string(svc.Spec.Type)),
diff --git a/scrape/scrape.go b/scrape/scrape.go
index d9ed8a02b..79cfea1a1 100644
--- a/scrape/scrape.go
+++ b/scrape/scrape.go
@@ -294,6 +294,11 @@ func newScrapePool(cfg *config.ScrapeConfig, app storage.Appendable, jitterSeed
 		}
 		opts.target.SetMetadataStore(cache)

+		limit := opts.target.SampleLimit()
+		if limit == 0 {
+			limit = opts.sampleLimit
+		}
+
 		return newScrapeLoop(
 			ctx,
 			opts.scraper,
@@ -303,7 +308,7 @@ func newScrapePool(cfg *config.ScrapeConfig, app storage.Appendable, jitterSeed
 				return mutateSampleLabels(l, opts.target, opts.honorLabels, opts.mrc)
 			},
 			func(l labels.Labels) labels.Labels { return mutateReportSampleLabels(l, opts.target) },
-			func(ctx context.Context) storage.Appender { return appender(app.Appender(ctx), opts.sampleLimit) },
+			func(ctx context.Context) storage.Appender { return appender(app.Appender(ctx), limit) },
 			cache,
 			jitterSeed,
 			opts.honorTimestamps,
diff --git a/scrape/target.go b/scrape/target.go
index 4a7b6eb0f..5022a8055 100644
--- a/scrape/target.go
+++ b/scrape/target.go
@@ -19,6 +19,7 @@ import (
 	"net"
 	"net/url"
 	"strings"
+	"strconv"
 	"sync"
 	"time"

@@ -225,6 +226,18 @@ func (t *Target) URL() *url.URL {
 	}
 }

+func (t *Target) SampleLimit() int {
+	limit := t.labels.Get("__sample_limit__")
+	if limit == "" {
+		return 0
+	}
+	convertedLimit, err := strconv.Atoi(limit)
+	if err != nil {
+		return 0
+	}
+	return convertedLimit
+}
+
 // Report sets target data about the last scrape.
 func (t *Target) Report(start time.Time, dur time.Duration, err error) {
 	t.mtx.Lock()
