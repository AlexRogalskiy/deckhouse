diff --git a/discovery/kubernetes/pod.go b/discovery/kubernetes/pod.go
index baf58d24..5a6bfd9a 100644
--- a/discovery/kubernetes/pod.go
+++ b/discovery/kubernetes/pod.go
@@ -239,6 +239,7 @@ func (p *Pod) buildPod(pod *apiv1.Pod) *targetgroup.Group {
 
 			tg.Targets = append(tg.Targets, model.LabelSet{
 				model.AddressLabel:            lv(addr),
+				model.SampleLimitLabel:        lv(""),
 				podContainerNameLabel:         lv(c.Name),
 				podContainerPortNumberLabel:   lv(ports),
 				podContainerPortNameLabel:     lv(port.Name),
diff --git a/discovery/kubernetes/service.go b/discovery/kubernetes/service.go
index ca01a5b3..296a6a75 100644
--- a/discovery/kubernetes/service.go
+++ b/discovery/kubernetes/service.go
@@ -180,6 +180,7 @@ func (s *Service) buildService(svc *apiv1.Service) *targetgroup.Group {
 
 		labelSet := model.LabelSet{
 			model.AddressLabel:       lv(addr),
+			model.SampleLimitLabel:   lv(""),
 			servicePortNameLabel:     lv(port.Name),
 			servicePortProtocolLabel: lv(string(port.Protocol)),
 		}
diff --git a/scrape/scrape.go b/scrape/scrape.go
index c216f03f..c1b1455e 100644
--- a/scrape/scrape.go
+++ b/scrape/scrape.go
@@ -219,6 +219,10 @@ func newScrapePool(cfg *config.ScrapeConfig, app Appendable, jitterSeed uint64,
 		}
 		opts.target.SetMetadataStore(cache)
 
+		limit := opts.target.SampleLimit()
+		if limit == 0 {
+			limit = opts.limit
+		}
 		return newScrapeLoop(
 			ctx,
 			opts.scraper,
@@ -233,7 +237,7 @@ func newScrapePool(cfg *config.ScrapeConfig, app Appendable, jitterSeed uint64,
 				if err != nil {
 					panic(err)
 				}
-				return appender(app, opts.limit)
+				return appender(app, limit)
 			},
 			cache,
 			jitterSeed,
diff --git a/scrape/target.go b/scrape/target.go
index 678438e9..4c2d9123 100644
--- a/scrape/target.go
+++ b/scrape/target.go
@@ -19,6 +19,7 @@ import (
 	"net"
 	"net/url"
 	"strings"
+	"strconv"
 	"sync"
 	"time"
 
@@ -224,6 +225,18 @@ func (t *Target) URL() *url.URL {
 	}
 }
 
+func (t *Target) SampleLimit() int {
+	limit := t.labels.Get(model.SampleLimitLabel)
+	if limit == "" {
+		return 0
+	}
+	convertedLimit, err := strconv.Atoi(limit)
+	if err != nil {
+		return 0
+	}
+	return convertedLimit
+}
+
 // Report sets target data about the last scrape.
 func (t *Target) Report(start time.Time, dur time.Duration, err error) {
 	t.mtx.Lock()
diff --git a/vendor/github.com/prometheus/common/model/labels.go b/vendor/github.com/prometheus/common/model/labels.go
index 41051a01..ebca7a61 100644
--- a/vendor/github.com/prometheus/common/model/labels.go
+++ b/vendor/github.com/prometheus/common/model/labels.go
@@ -45,6 +45,9 @@ const (
 	// scrape a target.
 	MetricsPathLabel = "__metrics_path__"
 
+	// TODO
+	SampleLimitLabel = "__sample_limit__"
+
 	// ReservedLabelPrefix is a prefix which is not legal in user-supplied
 	// label names.
 	ReservedLabelPrefix = "__"
