---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: d8-monitoring
{{ include "helm_lib_module_labels" (list . (dict "app" "grafana")) | indent 2 }}
spec:
  # SQLite!!!
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        checksum/datasources: {{ include (print $.Template.BasePath "/grafana/cm-datasources-list.yaml") . | sha256sum }}
        checksum/dashboards-list-custom: {{ include (print $.Template.BasePath "/grafana/cm-dashboards-list-custom.yaml") . | sha256sum }}
        threshold.extended-monitoring.flant.com/container-throttling-warning: "40"
    spec:
{{- include "helm_lib_node_selector" (tuple . "monitoring") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "monitoring") | indent 6 }}
{{- include "helm_lib_priority_class" (tuple . "cluster-medium") | indent 6 }}
      serviceAccountName: grafana
      imagePullSecrets:
      - name: deckhouse-registry
      containers:
      - name: grafana
        image: {{ $.Values.global.modulesImages.registry }}/prometheus/grafana:{{ $.Values.global.modulesImages.tags.prometheus.grafana }}
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_PROXY_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Admin"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_USERS_DEFAULT_THEME
          value: "light"
        - name: GF_PATHS_PROVISIONING
          value: /grafana/conf/provisioning
        - name: GF_PATHS_DATA
          value: /var/lib/grafana-storage
        - name: GF_SERVER_HTTP_ADDR
          value: "127.0.0.1"
        {{- if hasKey .Values.prometheus "grafana" }}
          {{- if hasKey .Values.prometheus.grafana "customPlugins" }}
        - name: GF_CUSTOM_PLUGINS
          value: "{{- range $i, $v := .Values.prometheus.grafana.customPlugins }}{{- if ne $i 0 -}},{{- end -}}{{- $v -}}{{- end }}"
          {{- end }}
        {{- end }}
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana-storage
        - name: grafana-datasources
          mountPath: /grafana/conf/provisioning/datasources
        - name: grafana-dashboard-definitions
          mountPath: /grafana/conf/provisioning/dashboards/d8-custom.yaml
          subPath: grafana-dashboard-definitions.yaml
        - name: grafana-dashboard-definitions-custom
          mountPath: /grafana-dashboard-definitions-custom
        - name: shared-dashboards-folder
          mountPath: /etc/grafana-dashboard-definitions
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
        readinessProbe:
          httpGet:
            path: /api/health
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
      - name: dashboard-provisioner
        image: {{ $.Values.global.modulesImages.registry }}/prometheus/grafana-dashboard-provisioner:{{ $.Values.global.modulesImages.tags.prometheus.grafanaDashboardProvisioner }}
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
        volumeMounts:
        - name: shared-dashboards-folder
          mountPath: /tmp/dashboards/
      - name: kube-rbac-proxy
        image: {{ $.Values.global.modulesImages.registry }}/common/kube-rbac-proxy:{{ $.Values.global.modulesImages.tags.common.kubeRbacProxy }}
        args:
        - "--secure-listen-address=0.0.0.0:443"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            excludePaths:
            - /api/health
            upstreams:
            - upstream: http://127.0.0.1:3000/
              path: /
              authorization:
                resourceAttributes:
                  namespace: d8-monitoring
                  apiGroup: monitoring.coreos.com
                  apiVersion: v1
                  resource: grafana
                  subresource: http
                  name: grafana
        ports:
        - containerPort: 443
          name: https
        livenessProbe:
          tcpSocket:
            port: 443
        readinessProbe:
          tcpSocket:
            port: 443
        resources:
          requests:
            memory: 50Mi
            cpu: 25m
      volumes:
      - name: shared-dashboards-folder
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-definitions
        configMap:
          name: grafana-dashboard-definitions
      - name: grafana-dashboard-definitions-custom
        configMap:
          name: grafana-dashboard-definitions-custom
          optional: true
{{- $storageClass := .Values.prometheus.internal.grafana.effectiveStorageClass }}
{{- if not $storageClass }}
      - name: grafana-storage
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: grafana-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: {{ $storageClass }}
{{- end }}
