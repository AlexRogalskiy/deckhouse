{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: grafana
  namespace: kube-prometheus
{{ include "helm_lib_module_labels" (list . (dict "app" "grafana")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: StatefulSet
    name: grafana
  updatePolicy:
    updateMode: "Auto"
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: kube-prometheus
{{ include "helm_lib_module_labels" (list . (dict "app" "grafana")) | indent 2 }}
spec:
  # SQLite!!!
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        checksum/dashboards: {{ include (print $.Template.BasePath "/grafana/dashboards.yaml") . | sha256sum }}
        checksum/datasources: {{ include (print $.Template.BasePath "/grafana/datasources.yaml") . | sha256sum }}
        threshold.extended-monitoring.flant.com/container-throttling-warning: "40"
    spec:
{{- include "helm_lib_node_selector" (tuple . "monitoring") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "monitoring") | indent 6 }}
      {{- if semverCompare ">=1.11" .Values.global.discovery.clusterVersion }}
      priorityClassName: cluster-medium
      {{- end }}
      imagePullSecrets:
      - name: deckhouse-registry
      containers:
      - name: grafana
        image: {{ $.Values.global.modulesImages.registry }}/prometheus/grafana:{{ $.Values.global.modulesImages.tags.prometheus.grafana }}
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_PROXY_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Admin"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_USERS_DEFAULT_THEME
          value: "light"
        - name: GF_PATHS_PROVISIONING
          value: /grafana/conf/provisioning
        - name: GF_PATHS_DATA
          value: /var/lib/grafana-storage
        - name: GF_SERVER_HTTP_ADDR
          value: "127.0.0.1"
        {{- if hasKey .Values.prometheus "grafana" }}
          {{- if hasKey .Values.prometheus.grafana "customPlugins" }}
        - name: GF_CUSTOM_PLUGINS
          value: "{{- range $i, $v := .Values.prometheus.grafana.customPlugins }}{{- if ne $i 0 -}},{{- end -}}{{- $v -}}{{- end }}"
          {{- end }}
        {{- end }}
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana-storage
        - name: grafana-datasources
          mountPath: /grafana/conf/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /grafana/conf/provisioning/dashboards
{{- define "dashboard_definition_volume_mount" }}
{{- $folder := index . 1 }}
        - name: grafana-dashboard-definitions-{{ $folder | replace "/" "-" }}
          mountPath: /grafana-dashboard-definitions/{{ $folder }}
{{- end }}
{{- tuple . "dashboard_definition_volume_mount" | include "for_each_dashboard_folder" }}
        - name: grafana-dashboard-definitions-custom
          mountPath: /grafana-dashboard-definitions/custom
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
        readinessProbe:
          httpGet:
            path: /
            port: 3500
          initialDelaySeconds: 10
      - name: ca-auth-proxy
        image: {{ $.Values.global.modulesImages.registry }}/common/kube-ca-auth-proxy:{{ $.Values.global.modulesImages.tags.common.kubeCaAuthProxy }}
        args:
        - "--listen=443"
        - "--location=/"
        - "--proxy-pass=http://127.0.0.1:3000/"
        - "--user=nginx-ingress:.*"
        - "--probe-proxy-pass=http://127.0.0.1:3000/api/health"
        - "--probe-listen=3500"
        ports:
        - containerPort: 443
          name: https
        livenessProbe:
          tcpSocket:
            port: 443
        readinessProbe:
          tcpSocket:
            port: 443
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
{{- define "dashboard_definition_volume" }}
{{- $folder := index . 1 }}
      - name: grafana-dashboard-definitions-{{ $folder | replace "/" "-" }}
        configMap:
          name: grafana-dashboard-definitions-{{ $folder | replace "/" "-" }}
{{- end }}
{{- tuple . "dashboard_definition_volume" | include "for_each_dashboard_folder" }}
      - name: grafana-dashboard-definitions-custom
        configMap:
          name: grafana-dashboard-definitions-custom
          optional: true
{{- $grafanaStorageClassName := false }}{{- if hasKey .Values.prometheus "grafana" }}{{- $grafanaStorageClassName = .Values.prometheus.grafana.storageClassName }}{{- end }}
{{- $storageClassName := $grafanaStorageClassName | default .Values.prometheus.storageClassName | default .Values.global.storageClassName | default .Values.global.discovery.defaultStorageClassName }}
{{- if not $storageClassName }}
      - name: grafana-storage
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: grafana-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: {{ $storageClassName }}
{{- end }}
