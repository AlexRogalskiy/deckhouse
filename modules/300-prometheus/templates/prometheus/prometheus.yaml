{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: prometheus-main
  namespace: d8-monitoring
{{ include "helm_lib_module_labels" (list . (dict "app" "prometheus")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: StatefulSet
    name: prometheus-main
  updatePolicy:
    updateMode: {{ .Values.prometheus.vpa.updateMode | quote }}
  resourcePolicy:
    containerPolicies:
    - containerName: "prometheus"
      maxAllowed:
        cpu: {{ .Values.prometheus.vpa.maxCPU | default .Values.prometheus.internal.vpa.maxCPU | quote }}
        memory: {{ .Values.prometheus.vpa.maxMemory | default .Values.prometheus.internal.vpa.maxMemory | quote }}
{{- end }}
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: main
  namespace: d8-monitoring
{{ include "helm_lib_module_labels" (list . (dict "app" "prometheus")) | indent 2 }}
spec:
  replicas: {{ include "helm_lib_is_ha_to_value" (list . 2 1) }}
  retention: {{ .Values.prometheus.retentionDays }}d
  retentionSize: {{ .Values.prometheus.retentionGigabytes }}GB
  image: {{ .Values.global.modulesImages.registry }}/prometheus/prometheus:{{ .Values.global.modulesImages.tags.prometheus.prometheus }}
  version: v2.13.0
  imagePullSecrets:
  - name: deckhouse-registry
  listenLocal: true
  containers:
  - name: ca-auth-proxy
    image: {{ .Values.global.modulesImages.registry }}/common/kube-ca-auth-proxy:{{ .Values.global.modulesImages.tags.common.kubeCaAuthProxy }}
    args:
    - "--listen=$(MY_POD_IP):9090"
    - "--location=/"
    - "--proxy-pass=http://127.0.0.1:9090/"
    - "--user=nginx-ingress:.*|.*:prometheus-api-client|d8-monitoring:scraper"
    - "--probe-proxy-pass=http://127.0.0.1:9090/-/"
    - "--probe-listen=3500"
    ports:
    - containerPort: 9090
      name: https
    env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    securityContext:
      runAsUser: 0
  - name: prometheus
    livenessProbe:
      failureThreshold: 6
      httpGet:
        path: /healthy
        port: probe
        scheme: HTTP
      periodSeconds: 5
      successThreshold: 1
      timeotSeconds: 3
    readinessProbe:
      failureThreshold: 120
      httpGet:
        path: /ready
        port: probe
        scheme: HTTP
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    ports:
    - name: probe
      containerPort: 3500
{{- if (include "helm_lib_ha_enabled" .) }}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            app: prometheus
            prometheus: main
        topologyKey: kubernetes.io/hostname
{{- end }}
  scrapeInterval: 30s
  evaluationInterval: 30s
  serviceAccountName: prometheus
  podMonitorNamespaceSelector:
    matchLabels:
      heritage: deckhouse
  serviceMonitorNamespaceSelector:
    matchLabels:
      heritage: deckhouse
  ruleNamespaceSelector:
    matchLabels:
      heritage: deckhouse
  podMetadata:
    annotations:
      threshold.extended-monitoring.flant.com/disk-bytes-warning: "97"
      threshold.extended-monitoring.flant.com/disk-bytes-critical: "99"
  serviceMonitorSelector:
    matchLabels:
      prometheus: main
  podMonitorSelector:
    matchLabels:
      prometheus: main
  secrets:
  - prometheus-scraper-tls
  rules:
    alert:
      resendDelay: 29s
  ruleSelector:
    matchLabels:
      prometheus: main
      component: rules
  additionalScrapeConfigs:
    name: prometheus-main-additional-configs
    key: scrapes.yaml
  additionalAlertRelabelConfigs:
    name: prometheus-main-additional-configs
    key: alert-relabels.yaml
  additionalAlertManagerConfigs:
    name: prometheus-main-additional-configs
    key: alert-managers.yaml
{{- if or (.Values.global.enabledModules | has "prometheus-madison-integration") (hasKey .Values.prometheus "additionalAlertmanagers") }}
  alerting:
    alertmanagers:
  {{- if (.Values.global.enabledModules | has "prometheus-madison-integration") }}
    - namespace: d8-monitoring
      name: madison-proxy
      port: http
  {{- end }}
  {{- if hasKey .Values.prometheus "additionalAlertmanagers" }}
    {{- range .Values.prometheus.additionalAlertmanagers }}
    - namespace: {{ .namespace }}
      name: {{ .name }}
      port: {{ .port }}
      scheme: http
      pathPrefix: {{ .pathPrefix }}
    {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.global.modules.publicDomainTemplate }}
  externalUrl: {{ include "helm_lib_module_uri_scheme" . }}://{{ include "helm_lib_module_public_domain" (list . "grafana") }}/prometheus/
{{- end }}
  securityContext:
    fsGroup: 2000
    runAsUser: 1000
{{- include "helm_lib_node_selector" (tuple . "monitoring") | indent 2 }}
{{- include "helm_lib_tolerations" (tuple . "monitoring") | indent 2 }}
{{- include "helm_lib_priority_class" (tuple . "cluster-low") | indent 2 }}
{{- $storageClass := .Values.prometheus.storageClass | default .Values.global.storageClass | default .Values.global.discovery.defaultStorageClass }}
{{- if $storageClass }}
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.prometheus.diskSize }}Gi
        storageClassName: {{ $storageClass }}
{{- end }}
