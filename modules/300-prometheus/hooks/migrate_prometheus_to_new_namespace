#!/bin/bash

source /deckhouse/shell_lib_legacy.sh

function __config__() {
  jo -p beforeHelm=0
}

function delete::grafana() {
  if kubectl -n kube-prometheus get sts grafana >/dev/null 2>/dev/null ; then
    kubectl -n kube-prometheus delete sts grafana
  fi
  for grafana_count in $(seq 1 120); do
    if [ "$(kubectl -n kube-prometheus get pod -l app=grafana --no-headers 2>&1)" == "No resources found." ] ; then
      return 0
    fi
    echo "Waiting for deletion of grafana pod in kube-prometheus namespace"
    sleep 1
  done
  if [[ $grafana_count -ge 120 ]] ; then
    >&2 echo "Timeout waiting for deletion of grafana pod in kube-prometheus namespace"
    return 1
  fi
}

function delete::prometheus::main() {
  if kubectl -n kube-prometheus get prometheus main >/dev/null 2>/dev/null ; then
    kubectl -n kube-prometheus delete prometheus main
  fi
  for main_count in $(seq 1 120); do
    if [ "$(kubectl -n kube-prometheus get pod -l app=prometheus,prometheus=main --no-headers 2>&1)" == "No resources found." ] ; then
      return 0
    fi
    echo "Waiting for deletion of prometheus main pods in kube-prometheus namespace"
    sleep 1
  done
  if [[ $main_count -ge 120 ]] ; then
    >&2 echo "Timeout waiting for deletion of prometheus main pods in kube-prometheus namespace"
    return 1
  fi
}

function delete::prometheus::longterm() {
  if kubectl -n kube-prometheus get prometheus longterm >/dev/null 2>/dev/null ; then
    kubectl -n kube-prometheus delete prometheus longterm
  fi
  for longterm_count in $(seq 1 120); do
    if [ "$(kubectl -n kube-prometheus get pod -l app=prometheus,prometheus=longterm --no-headers 2>&1)" == "No resources found." ] ; then
      return 0
    fi
    echo "Waiting for deletion of prometheus longterm pods in kube-prometheus namespace"
    sleep 1
  done
  if [[ $longterm_count -ge 120 ]]; then
    >&2 echo "Timeout waiting for deletion of prometheus longterm pods in kube-prometheus namespace"
    return 1
  fi
}

function __main__() {
  if kubectl get namespace kube-prometheus >/dev/null 2>/dev/null ; then
    for pvc in $(kubectl -n kube-prometheus get pvc --no-headers -o custom-columns=":metadata.name"); do
      if ! kubectl -n d8-monitoring get pvc $pvc >/dev/null 2>/dev/null ; then
        echo "creating pvc"
        kubectl -n kube-prometheus get pvc $pvc -o yaml | sed 's/kube-prometheus/d8-monitoring/g' | grep -v 'uid:' | kubectl -n d8-monitoring create -f -
      fi
      new_uid=$(kubectl -n d8-monitoring get pvc $pvc -o json | jq '.metadata.uid' -r)
      pv_name=$(kubectl get pv -o json | jq ".items[] | select(.spec.claimRef.name==\"$pvc\" and .spec.claimRef.namespace==\"kube-prometheus\" and .status.phase==\"Bound\") | .metadata.name" -r)
      fltr='.'
      fltr=$fltr' | .spec.claimRef.namespace = "d8-monitoring"'
      fltr=$fltr' | .spec.claimRef.uid = '"\"${new_uid}\""
      kubectl::jq_patch d8-monitoring pv/$pv_name "$fltr"
      if [[ "$pvc" == "prometheus-main-db"* ]] ; then
        delete::prometheus::main
      elif [[ "$pvc" == "prometheus-longterm-db"* ]] ; then
        delete::prometheus::longterm
      elif [[ "$pvc" == "grafana-storage"* ]] ; then
        delete::grafana
      fi
      kubectl -n kube-prometheus delete pvc $pvc
      for count in $(seq 1 120); do
        if ! kubectl -n kube-prometheus get pvc $pvc >/dev/null 2>/dev/null ; then
          break
        fi
        echo "Waiting for deleting pvc $pvc in kube-prometheus namespace"
        sleep 1
      done
      if [[ $count -ge 120 ]] ; then
        >&2 echo "Timeout waiting for deleting pvc $pvc in kube-prometheus namespace"
        return 1
      fi
    done
  fi
}

hook::run "$@"
