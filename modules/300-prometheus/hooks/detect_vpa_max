#!/bin/bash

source /antiopa/shell_lib.sh

function __config__() {
# TODO
#{
#  "beforeHelm": 20,
#   "onKubernetesEvent": [
#      {
#         "kind": "node",
#         "event": [
#            "add",
#            "update",
#            "delete"
#         ],
#         "jqFilter": ".status.capacity.pods"
#      }
#   ]
#}'

  echo '
{
   "beforeHelm": 20,
   "schedule": [
      {
        "crontab": "*/10 * * * *"
      }
  ]
}'
}

function __main__() {
  # Prometheus resources
  memory_per_pod="15"
  cpu_per_pod="0.02"
  pod_count=$(kubectl get node -o json | jq -r '[.items[].status.capacity.pods | tonumber] | add')
  max_memory="$(bc -l <<< "scale=2; $pod_count * $memory_per_pod / 1")Mi"
  max_cpu="$(bc -l <<< "scale=2; $pod_count * $cpu_per_pod / 1")"
  values::set prometheus.internal.vpa.maxMemory "$max_memory"
  values::set prometheus.internal.vpa.maxCPU "$max_cpu"

  # 3 times less for longterm
  max_memory="$(bc -l <<< "scale=2; $pod_count * $memory_per_pod / 3")Mi"
  max_cpu="$(bc -l <<< "scale=2; $pod_count * $cpu_per_pod / 3")"
  values::set prometheus.internal.vpa.longtermMaxMemory "$max_memory"
  values::set prometheus.internal.vpa.longtermMaxCPU "$max_cpu"

  # Kube-state-metrics resources
  memory_per_node="30"
  cpu_per_node="15"
  node_count=$(kubectl get nodes -o json | jq '.items | length')
  max_memory="$(bc -l <<< "scale=0; 150 + ($node_count * $memory_per_node / 1)")Mi"
  max_cpu="$(bc -l <<< "scale=0; 100 + ($node_count * $cpu_per_node / 1)")"
  values::set prometheus.internal.vpa.kubeStateMetricsMaxMemory "$max_memory"
  values::set prometheus.internal.vpa.kubeStateMetricsMaxCPU "$max_cpu"
}

hook::run "$@"
