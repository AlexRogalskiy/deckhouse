#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    schedule:
    - name: "every_15_min"
      crontab: "*/15 * * * *"
      allowFailure: true
      includeSnapshotsFrom: ["pvc", "sc"]
    kubernetes:
    - name: sc
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      jqFilter: ".allowVolumeExpansion"
    - name: pvc
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["d8-monitoring"]
      labelSelector:
        matchLabels:
          app: prometheus
      jqFilter: ".spec.storageClassName"
EOF
}

function __main__() {
  if context::has snapshots.pvc.0 ; then
    pvcs="$(context::jq -r '[.snapshots.pvc[].object | {(.metadata.name): .}] | reduce .[] as $i ({}; . * $i)')"
    scs="$(context::jq -r '[.snapshots.sc[].object | {(.metadata.name): .}] | reduce .[] as $i ({}; . * $i)')"
    for pvc in $(jq -r 'keys[]' <<< "$pvcs"); do
      pod_name=$(sed -E 's/^prometheus-(\w+)-.*-([0-9]+)$/prometheus-\1-\2/' <<< "$pvc") # prometheus-main-db-prometheus-main-0 -> prometheus-main-0
      sc_name_from_pvc=$(jq -r --arg pvc "$pvc" '.[$pvc].spec.storageClassName' <<< "$pvcs")
      # Проверим, поддерживает ли storage class expansion PVC.
      # А также проверим, что такой storageclass существует, а значит это не localstorage
      # TODO: проверка некорретна, т.к. у local storage тоже может быть storage class
      # https://github.com/deckhouse/deckhouse/issues/943
      is_sc_allow_expansion=$(jq -r --arg sc_name "$sc_name_from_pvc" '.[$sc_name].allowVolumeExpansion' <<< "$scs")
      if [ "$is_sc_allow_expansion" == "true" ]; then
        if kubectl -n d8-monitoring get pod $pod_name -o json | jq -e '.status.conditions | all(.[] ; .status == "True")' >/dev/null 2>&1 ; then
          # Посчитаем, сколько занято диско в prometheus
          prometheus_size=$(kubectl -n d8-monitoring exec $pod_name -c prometheus --  df -h /prometheus/ | grep -v 'Filesystem' | awk '{print $4}' | tr -d '%')
          # Если у нас Kubernetes версии 1.11 и SC поддерживает Expansion и в PVC занято более 90% места
          if [ "$prometheus_size" -gt "90" ] ; then
            # Проверим, что диск уже не отресайзили, проверив статус и если диск не ждет ресайза (удаления пода), то произведем увеличение диска
            if ! kubectl -n d8-monitoring get pvc "$pvc" -o json | jq '.status.conditions[] | select (.type=="FileSystemResizePending" and .status=="True") | .message' >/dev/null 2>&1 ; then
              size=$(kubectl -n d8-monitoring get pvc "$pvc" -o json | jq '.status.capacity.storage' -r | deckhouse-controller helper unit convert --mode=kube-resource-unit)
              # Накидываем 5 ГиБ
              new_size=$((size + 5368709120))
              fltr='. | .spec.resources.requests.storage = '"\"${new_size}\""
              echo "!!! $pod_name's storage has been resized from $(( size / 1024 / 1024 / 1024 )) to $(( new_size / 1024 / 1024 / 1024 )) !!!"
              # Пропатчим PVC
              kubernetes::_jq_patch "d8-monitoring" "pvc/$pvc" "$fltr"
            fi
          fi
        fi
      fi

      # Если PVC находится в статусе ожидания рестарта пода, то надо пересоздать под и тогда диск расширится
      if kubectl -n d8-monitoring get pvc "$pvc" > /dev/null 2>&1 ; then
        if kubectl -n d8-monitoring get pvc "$pvc" -o json | jq -e '. | select(.status.phase=="Bound")' > /dev/null 2>&1 ; then
          if kubectl -n d8-monitoring get pvc "$pvc" -o json | jq '.status.conditions[] | select (.type=="FileSystemResizePending" and .status=="True") | .message' > /dev/null 2> /dev/null; then
            kubectl -n d8-monitoring delete pod "$pod_name"
          fi
        fi
      fi
    done
  fi
}

hook::run $@
