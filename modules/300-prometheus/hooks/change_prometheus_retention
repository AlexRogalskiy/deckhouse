#!/bin/bash

source /antiopa/shell_lib.sh

function __config__() {
  jo -p beforeHelm=20 schedule="$(jo -a \
    "$(jo allowFailure=true crontab="*/15 * * * *")"
  )"
}

function __main__() {
  cluster_version=$(values::get global.discovery.clusterVersion)
  pvc_list="prometheus-main-db-prometheus-main-0 prometheus-longterm-db-prometheus-longterm-0"
  if module::is_ha_enabled; then
    pvc_list="$pvc_list prometheus-main-db-prometheus-main-1"
  fi

  for pvc in $pvc_list; do
    if [[ $pvc =~ ^prometheus-main-db-prometheus-main ]]; then
      storage_class_name="storageClassName"
      disk_size="diskSize"
      retention_gigabytes="retentionGigabytes"
      sts="prometheus-main"
    elif [[ $pvc =~ ^prometheus-longterm-db-prometheus-longterm ]]; then
      storage_class_name="longtermStorageClassName"
      disk_size="longtermDiskSize"
      retention_gigabytes="longtermRetentionGigabytes"
      sts="prometheus-longterm"
    else
      echo "Wrong pvc name: $pvc. Should be like prometheus-main-db-prometheus-main-X or prometheus-longterm-db-prometheus-main-X"
      exit 1
    fi

    # Проверяем, существует ли pvc
    if ! kubectl -n kube-prometheus get pvc "$pvc" > /dev/null 2> /dev/null ; then
      # Проверим, что такой storageclass существует, а значит это не localstorage
      if kubectl get storageclass $(kubectl -n kube-prometheus get pvc ${pvc} -o json 2>/dev/null | jq -r '.spec.storageClassName') > /dev/null 2>&1  ; then
        # Проверяем версию kubernetes
        if [ "$(semver compare "$cluster_version" 1.11.0)" -ne "-1" ] ; then
          # Если это версия kubernetes выше 1.11, то проверяем, есть ли у storageclass, который будет использоваться в prometheus
          # параметр, который позволяет производить расширение диска. Если такой параметр есть у storage class, то создаем диск с размером в 10гб
          if values::has prometheus."$storage_class_name" || values::has global.storageClassName || values::has global.discovery.defaultStorageClassName ; then
            values::set prometheus."$disk_size" "30"
            values::set prometheus."$retention_gigabytes" "25"
          fi

          if values::has global.discovery.defaultStorageClassName ; then
            if [ "$(kubectl get sc $(values::get global.discovery.defaultStorageClassName) -o json 2>/dev/null | jq '.allowVolumeExpansion')" = "true" ] ; then
              # Посчитав на примерах, вывели, что из исходных GiB Prometheus у нас "теряется" 30% дискового пространства.
              values::set prometheus."$disk_size" "15"
              values::set prometheus."$retention_gigabytes" "10"
            fi
          fi

          if values::has global.storageClassName ; then
            if [ "$(kubectl get sc $(values::get global.$storage_class_name) -o json 2>/dev/null | jq '.allowVolumeExpansion')" = "true" ] ; then
              values::set prometheus."$disk_size" "15"
              values::set prometheus."$retention_gigabytes" "10"
            fi
          fi

          if values::has prometheus."$storage_class_name" ; then
            if [ "$(kubectl get sc $(values::get prometheus.$storage_class_name) -o json 2>/dev/null | jq '.allowVolumeExpansion')" = "true" ] ; then
              values::set prometheus."$disk_size" "15"
              values::set prometheus."$retention_gigabytes" "10"
            fi
          fi

        else
          # Если это kubernetes ниже 1.11 версии, создаем диск с размером в 30 гб
          if values::has prometheus."$storage_class_name" || values::has global.storageClassName || values::has global.discovery.defaultStorageClassName ; then
            values::set prometheus."$disk_size" "30"
            values::set prometheus."$retention_gigabytes" "25"
          fi
        fi
      fi
    else
      # Если pvc уже есть для prometheus выставляем retention по диску в его размер
      if kubectl -n kube-prometheus get sts $sts > /dev/null 2> /dev/null; then
        size=$(kubectl -n kube-prometheus get pvc $pvc -o json 2>/dev/null | jq '.spec.resources.requests.storage'  -r | unit-converter --mode=kube-resource-unit)
        new_retention=$(bc <<< "$size * 0.8" | cut -f1 -d'.')
        new_retention_gigabytes=$(bc <<< "$new_retention / 1024 / 1024 / 1024")
        values::set prometheus."$disk_size" "$(bc <<< "$size / 1024 / 1024 / 1024")"
        values::set prometheus."$retention_gigabytes" "$new_retention_gigabytes"
      else
        echo "sts $sts does not exist, skipping values::set"
      fi
    fi
  done
}

hook::run "$@"
