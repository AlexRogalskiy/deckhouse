#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  beforeHelm: 10
  kubernetes:
  - name: secret_ca
    group: main
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    executeHookOnEvent: ["Modified"]
    nameSelector:
      matchNames: ["cert-manager-webhook-ca"]
    namespace:
      nameSelector:
        matchNames: ["d8-cert-manager"]
    jqFilter: |
      {
        "managedByHelm": (.metadata.labels."app.kubernetes.io/managed-by"=="Helm"),
        "cert": ( .data."ca.crt" | @base64d),
        "key": ( .data."tls.key" | @base64d)
      }
  - name: secret_tls
    group: main
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    executeHookOnEvent: ["Modified"]
    nameSelector:
      matchNames: ["cert-manager-webhook-tls"]
    namespace:
      nameSelector:
        matchNames: ["d8-cert-manager"]
    jqFilter: |
      {
        "managedByHelm": (.metadata.labels."app.kubernetes.io/managed-by"=="Helm"),
        "cert": ( .data."tls.crt" | @base64d),
        "key": ( .data."tls.key" | @base64d)
      }
EOF
}

function __main__() {
  # remove after 21.03 release
  if context::jq -e '.snapshots | (.secret_ca[0].filterResult.managedByHelm==false or .secret_tls[0].filterResult.managedByHelm==false)' >/dev/null 2>/dev/null; then
    if [ ! -v D8_IS_TESTS_ENVIRONMENT ]; then
      kubectl -n d8-cert-manager annotate secret cert-manager-webhook-ca meta.helm.sh/release-name=cert-manager meta.helm.sh/release-namespace=d8-system --overwrite=true
      kubectl -n d8-cert-manager annotate secret cert-manager-webhook-tls meta.helm.sh/release-name=cert-manager meta.helm.sh/release-namespace=d8-system --overwrite=true
      kubectl -n d8-cert-manager label secret cert-manager-webhook-ca app.kubernetes.io/managed-by=Helm --overwrite=true
      kubectl -n d8-cert-manager label secret cert-manager-webhook-tls app.kubernetes.io/managed-by=Helm --overwrite=true
      kubectl -n d8-cert-manager annotate secret cert-manager-webhook-ca certmanager.k8s.io/allow-direct-injection-
      kubectl -n d8-cert-manager annotate secret cert-manager-webhook-tls certmanager.k8s.io/allow-direct-injection-
    fi
  fi

  if context::has snapshots.secret_ca.0.filterResult && context::has snapshots.secret_tls.0.filterResult; then
    ca_crt="$(context::get snapshots.secret_ca.0.filterResult.cert)"
    ca_key="$(context::get snapshots.secret_ca.0.filterResult.key)"
    cert_crt="$(context::get snapshots.secret_tls.0.filterResult.cert)"
    cert_key="$(context::get snapshots.secret_tls.0.filterResult.key)"
  else
    ca_csr='{"CN":"cert-manager.webhook.ca","names":[{"O":"cert-manager.system"}],"key":{"algo":"rsa","size":2048},"ca":{"expiry":"87600h"},"hosts":["cert-manager.webhook.ca"]}'
    ca="$(cfssl gencert -initca - <<< "$ca_csr")"
    ca_crt="$(jq .cert -r <<< "$ca")"
    ca_key="$(jq .key -r <<< "$ca")"

    config='{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","requestheader-client"]}}}'

    cert_csr='{"CN":"cert-manager-webhook","names":[{"O":"cert-manager.system"}],"key":{"algo":"rsa","size":2048},"hosts":["cert-manager-webhook","cert-manager-webhook.d8-cert-manager","cert-manager-webhook.d8-cert-manager.svc"]}'
    cert="$(cfssl gencert -ca=<(echo "$ca_crt") -ca-key=<(echo "$ca_key") -config=<(echo "$config") - <<< "$cert_csr")"
    cert_crt="$(jq .cert -r <<< "$cert")"
    cert_key="$(jq .key -r <<< "$cert")"
  fi

  values::set certManager.internal.webhookCACrt "$ca_crt"
  values::set certManager.internal.webhookCAKey "$ca_key"
  values::set certManager.internal.webhookCrt "$cert_crt"
  values::set certManager.internal.webhookKey "$cert_key"
}

hook::run "$@"
