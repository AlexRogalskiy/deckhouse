#!/bin/bash

# migration 2020-12-07: one-shot hook, delete me after executing on every cluster

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: certificates
      group: main
      queue: /modules/$(module::name::kebab_case)/orphan_secrets_migration
      apiVersion: certmanager.k8s.io/v1alpha1
      kind: Certificate
      namespace:
        labelSelector:
          matchLabels:
            heritage: deckhouse
      keepFullObjectsInMemory: false
      executeHookOnEvent: []
      jqFilter: |
        {
          "namespace": .metadata.namespace,
          "secretName": .spec.secretName
        }
    - name: secrets
      group: main
      queue: /modules/$(module::name::kebab_case)/orphan_secrets_migration
      apiVersion: v1
      kind: Secret
      namespace:
        labelSelector:
          matchLabels:
            heritage: deckhouse
      keepFullObjectsInMemory: false
      labelSelector:
        matchExpressions:
        - key: certmanager.k8s.io/certificate-name
          operator: Exists
      executeHookOnEvent: []
      jqFilter: |
        {
          "namespace": .metadata.namespace,
          "secretName": .metadata.name
        }
    - name: ingresses
      group: main
      queue: /modules/$(module::name::kebab_case)/orphan_secrets_migration
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      namespace:
        labelSelector:
          matchLabels:
            heritage: deckhouse
      keepFullObjectsInMemory: false
      executeHookOnEvent: []
      jqFilter: |
        {
          "namespace": .metadata.namespace,
          "secretName": (.spec.tls | first.secretName)
        }

EOF
}

function __main__() {
  # shellcheck disable=SC2016
  orphan_secrets="$(context::jq -r '
    [.snapshots.secrets[].filterResult]      as $secrets |
    [.snapshots.certificates[].filterResult] as $certificates |
    [.snapshots.ingresses[].filterResult]    as $ingress_secrets |
    ($secrets - $certificates - $ingress_secrets)[] |
    .namespace + ":" + .secretName
    ')"

  if [ -z "$orphan_secrets" ]; then
    return 0
  fi

  if kubectl get secret d8-orphan-secrets-backup >/dev/null 2>&1; then
    return 0
  fi

  tmp_dir="$(mktemp -d)"
  for orphan_secret in $orphan_secrets; do
    namespace="$(cut -d: -f1 <<< "$orphan_secret")"
    secret_name="$(cut -d: -f2 <<< "$orphan_secret")"
    kubectl -n "$namespace" get secret "$secret_name" -o json | gzip > "${tmp_dir}/${namespace}_${secret_name}.json.gz"
  done

  kubectl -n d8-system create secret generic d8-orphan-secrets-backup --from-file "$tmp_dir"
  rm -rf "$tmp_dir"

  for orphan_secret in $orphan_secrets; do
    namespace="$(cut -d: -f1 <<< "$orphan_secret")"
    secret_name="$(cut -d: -f2 <<< "$orphan_secret")"
    kubectl -n "$namespace" delete secret "$secret_name"
  done
}

hook::run "$@"
