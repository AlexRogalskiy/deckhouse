{{- $kubernetesSemVer := semver .Values.global.discovery.kubernetesVersion }}
{{- $ccmImageName := join "" (list "cloudControllerManager" $kubernetesSemVer.Major $kubernetesSemVer.Minor ) }}
{{- if hasKey .Values.global.modulesImages.tags.cloudProviderGcp $ccmImageName }}
  {{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: cloud-controller-manager
  namespace: d8-cloud-provider-gcp
{{ include "helm_lib_module_labels" (list . (dict "app" "cloud-controller-manager" "workload-resource-policy.deckhouse.io" "master")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: cloud-controller-manager
  updatePolicy:
    updateMode: "Auto"
  {{- end }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: cloud-controller-manager
  namespace: d8-cloud-provider-gcp
{{ include "helm_lib_module_labels" (list . (dict "app" "cloud-controller-manager")) | indent 2 }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: cloud-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
  namespace: d8-cloud-provider-gcp
{{ include "helm_lib_module_labels" (list . (dict "app" "cloud-controller-manager")) | indent 2 }}
spec:
{{- include "helm_lib_deployment_on_master_strategy_and_replicas_for_ha" . | indent 2 }}
  selector:
    matchLabels:
      app: cloud-controller-manager
  template:
    metadata:
      labels:
        app: cloud-controller-manager
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cloud-controller-manager/secret.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
      - name: deckhouse-registry
{{- include "helm_lib_priority_class" (tuple . "system-cluster-critical") | indent 6 }}
{{- include "helm_lib_pod_anti_affinity_for_ha" (list . (dict "app" "cloud-controller-manager")) | indent 6 }}
{{- include "helm_lib_node_selector" (tuple . "master") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "wildcard") | indent 6 }}
{{- include "helm_lib_module_pod_security_context_run_as_user_nobody" . | indent 6 }}
      hostNetwork: true
      dnsPolicy: Default
      serviceAccountName: cloud-controller-manager
      containers:
        - name: gcp-cloud-controller-manager
{{- include "helm_lib_module_container_security_context_read_only_root_filesystem" . | indent 10 }}
          image: {{ .Values.global.modulesImages.registry }}:{{ index .Values.global.modulesImages.tags.cloudProviderGcp $ccmImageName }}
          command:
          - /usr/local/bin/cloud-controller-manager
          - --leader-elect=true
          - --cluster-cidr={{ .Values.global.discovery.podSubnet }}
          - --allocate-node-cidrs=true
          - --configure-cloud-routes=true
          - --cloud-config=/etc/cloud-contoller-manager-config/cloud-config
          - --cloud-provider=gce
          - --bind-address=$(HOST_IP)
          - --secure-port=10871
          - --v=2
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/etc/credentials.json"
          ports:
          - name: https
            containerPort: 10871
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
          volumeMounts:
            - mountPath: /etc/kubernetes/pki
              name: k8s-certs
              readOnly: true
            - mountPath: /etc/cloud-contoller-manager-config
              name: cloud-config
              readOnly: true
            - mountPath: /etc/credentials.json
              name: cloud-credentials
              readOnly: true
              subPath: credentials.json
            - mountPath: /tmp
              name: tmp
            - name: resolv-conf-volume
              mountPath: /etc/resolv.conf
              readOnly: true
          resources:
            requests:
{{- include "helm_lib_module_ephemeral_storage_logs_with_extra" 10 | indent 14 }}
      volumes:
      - hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate
        name: k8s-certs
      - name: cloud-config
        secret:
          secretName: cloud-controller-manager
      - name: cloud-credentials
        secret:
          secretName: cloud-credentials
      - name: tmp
        emptyDir: {}
      - name: resolv-conf-volume
        hostPath:
          path: /var/lib/bashible/resolv/resolv.conf
          type: File
{{- end }}
