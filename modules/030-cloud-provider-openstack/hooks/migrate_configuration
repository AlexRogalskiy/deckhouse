#!/bin/bash

source /deckhouse/shell_lib.sh


### Миграция 2020-04-13
# Удалить после выката версии на все инстансы

function __config__() {
  cat << EOF
    configVersion: v1
    onStartup: 10
EOF
}

function __main__() {
  if values::has --config cloudProviderOpenstack.networkName ; then
    values::set --config cloudProviderOpenstack.externalNetworkNames "[\"$(values::get --config cloudProviderOpenstack.networkName)\"]"
    values::unset --config cloudProviderOpenstack.networkName
  fi

  if values::has --config cloudProviderOpenstack.internalNetworkName ; then
    values::set --config cloudProviderOpenstack.internalNetworkNames "[\"$(values::get --config cloudProviderOpenstack.internalNetworkName)\"]"
    values::unset --config cloudProviderOpenstack.internalNetworkName
  fi

  if values::has --config cloudProviderOpenstack.addPodSubnetToPortWhitelist; then
    if [[ "x$(values::get --config cloudProviderOpenstack.addPodSubnetToPortWhitelist)" == "xtrue" ]]; then
      values::set --config cloudProviderOpenstack.podNetworkMode "DirectRoutingWithPortSecurityEnabled"
    else
      values::set --config cloudProviderOpenstack.podNetworkMode "DirectRouting"
    fi
    values::unset --config cloudProviderOpenstack.addPodSubnetToPortWhitelist
  else
    if ! values::has --config cloudProviderOpenstack.podNetworkMode; then
      values::set --config cloudProviderOpenstack.podNetworkMode "DirectRoutingWithPortSecurityEnabled"
    fi
  fi

  if ! values::has --config cloudProviderOpenstack.connection ; then
    connection='{}'
    options="authURL caCert domainName tenantName tenantID username password region"
    for option in $options; do
      if values::has --config "cloudProviderOpenstack.$option" ; then
        value=$(values::get --config "cloudProviderOpenstack.$option")
        connection=$(echo "$connection" | jq -c --argjson option "{\"$option\": \"$value\"}" '. + $option')
        values::unset --config "cloudProviderOpenstack.$option"
      fi
    done
    values::set --config cloudProviderOpenstack.connection "$connection"
  fi

  if values::has --config cloudProviderOpenstack.sshKeyPairName ; then
    if ! values::has --config cloudProviderOpenstack.instances; then
      values::set --config cloudProviderOpenstack.instances "{}"
    fi
    values::set --config cloudProviderOpenstack.instances.sshKeyPairName "$(values::get --config cloudProviderOpenstack.sshKeyPairName)"
    values::unset --config cloudProviderOpenstack.sshKeyPairName
  fi

  if values::has --config cloudProviderOpenstack.securityGroups ; then
    if ! values::has --config cloudProviderOpenstack.instances; then
      values::set --config cloudProviderOpenstack.instances "{}"
    fi
    values::set --config cloudProviderOpenstack.instances.securityGroups "$(values::get --config cloudProviderOpenstack.securityGroups)"
    values::unset --config cloudProviderOpenstack.securityGroups
  fi
}

hook::run $@
