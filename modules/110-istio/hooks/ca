#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  kubernetes:
  - name: secret
    group: main
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    executeHookOnEvent: ["Added", "Modified"]
    nameSelector:
      matchNames: ["cacerts"]
    namespace:
      nameSelector:
        matchNames: ["d8-istio"]
    jqFilter: |
      {
        "cert":  ( .data."ca-cert.pem"    | @base64d),
        "key":   ( .data."ca-key.pem"     | @base64d),
        "chain": ( .data."cert-chain.pem" | @base64d),
        "root":  ( .data."root-cert.pem"  | @base64d)
      }
EOF
}

function __main__() {
  if values::has istio.ca; then
    values::set istio.internal.ca.cert  "$(values::get --required istio.ca.cert)"
    values::set istio.internal.ca.key   "$(values::get --required istio.ca.key)"
    values::set istio.internal.ca.chain "$(values::jq -c '.istio.ca.chain // .istio.ca.cert')"
    values::set istio.internal.ca.root  "$(values::jq -c '.istio.ca.root  // .istio.ca.cert')"
    return 0
  fi

  if context::has snapshots.secret.0; then
    values::set istio.internal.ca "$(context::get snapshots.secret.0.filterResult)"
    return 0
  fi

  ca=$(jo names="[$(jo O="$(values::get global.discovery.clusterDomain)")]" key="$(jo algo=rsa size=2048)" ca="$(jo expiry=87600h)" | cfssl gencert -initca -)
  values::set istio.internal.ca.cert  "$(jq '.cert' <<< ${ca})"
  values::set istio.internal.ca.key   "$(jq '.key'  <<< ${ca})"
  values::set istio.internal.ca.chain "$(jq '.cert' <<< ${ca})"
  values::set istio.internal.ca.root  "$(jq '.cert' <<< ${ca})"
}

hook::run "$@"
