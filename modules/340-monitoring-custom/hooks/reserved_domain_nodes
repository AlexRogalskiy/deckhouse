#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: nodes
      group: main
      queue: /modules/$(module::name::kebab_case)
      apiVersion: v1
      kind: Node
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "usedLabelsAndTaints":
            (
              [.metadata.labels // {} | to_entries[] | select((.key | startswith("node-role.deckhouse.io/")) and .value == "") | .key | split("/")[1] | select(. // empty)] +
              [.spec.taints // [] | .[] | select(.key=="dedicated.deckhouse.io" and (.value // empty)) | .value]
            ) | unique
        }
EOF
}

function __main__() {
  reserved="$(values::get global.enabledModules | jq -r '. + ["monitoring", "system", "frontend"] | join("|")')"
  group="/modules/$(module::name::kebab_case)/reserved_domain_alert#reserved_domain_nodes"

  context::jq -c --arg reserved "$reserved" --arg group "$group" '
    .. | .filterResult? | select(.) |
    if ([.usedLabelsAndTaints[] | select(.| test("^(\($reserved))$") | not)] | length > 0) then
      {
        "name": "reserved_domain_nodes",
        "group": "\($group)",
        "set": 1,
        "labels":
        {
          "name": .name
        }
      }
    else empty end
    ' >> $METRICS_PATH

  # Used to hack metrics deletion
  jq -c --arg group "$group" '.group = $group' <<< '{"name": "reserved_domain_nodes", "set": 0, "labels": {"name": "none"}}' >> $METRICS_PATH
}

hook::run $@
