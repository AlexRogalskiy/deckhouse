#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  beforeHelm: 10
  kubernetes:
  - name: secret
    group: main
    queue: /modules/$(module::name::kebab_case)/discover_webhook_certs
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    executeHookOnEvent: ["Added", "Modified"]
    nameSelector:
      matchNames: ["d8-kube-dns-sts-pods-hosts-appender-webhook"]
    namespace:
      nameSelector:
        matchNames: ["kube-system"]
    jqFilter: |
      {
        "crt": (.data."tls.crt" | @base64d),
        "key": (.data."tls.key" | @base64d),
        "ca":  (.data."ca.crt"   | @base64d)
      }
EOF
}

function __main__() {
  # Do not generate certificates if cluster domain aliases are not enabled
  if ! values::has kubeDns.clusterDomainAliases ; then
    return 0
  fi

  if ! values::has kubeDns.clusterDomainAliases.0 ; then
    return 0
  fi

  if context::has snapshots.secret.0; then
    values::set kubeDns.internal.stsPodsHostsAppenderWebhook.crt "$(context::get snapshots.secret.0.filterResult.crt)"
    values::set kubeDns.internal.stsPodsHostsAppenderWebhook.key "$(context::get snapshots.secret.0.filterResult.key)"
    values::set kubeDns.internal.stsPodsHostsAppenderWebhook.ca  "$(context::get snapshots.secret.0.filterResult.ca)"
    return 0
  fi

  svc_name="d8-kube-dns-sts-pods-hosts-appender-webhook"
  svc_ns="kube-system"

  ca_json="$(cat <<EOF
{
  "CN": "${svc_name}",
  "key": { "algo": "ecdsa", "size": 256 },
  "ca": { "expiry": "87600h" }
}
EOF
)"

  ca="$(cfssl gencert -initca - <<< "$ca_json")"
  ca_crt="$(jq .cert -r <<< "$ca")"

  # config for cfssl gencert
  config='
  {
  "signing": {
    "default": {
      "expiry": "87600h",
      "usages": [ "signing", "key encipherment", "requestheader-client" ]
      }
    }
  }'

  cert_json="$(cat <<EOF
{
  "CN": "${svc_name}",
  "hosts": [
    "${svc_name}.${svc_ns}",
    "${svc_name}.${svc_ns}.svc"
  ],
  "key": { "algo": "ecdsa", "size": 256 }
}
EOF
)"
  cert="$(cfssl gencert -ca=<(jq .cert -r <<< "$ca") -ca-key=<(jq .key -r <<< "$ca") -config=<(echo "$config") - <<< "$cert_json")"
  webhook_server_crt="$(jq .cert -r <<< "$cert")"
  webhook_server_key="$(jq .key  -r <<< "$cert")"

  values::set kubeDns.internal.stsPodsHostsAppenderWebhook.crt "$webhook_server_crt"
  values::set kubeDns.internal.stsPodsHostsAppenderWebhook.key "$webhook_server_key"
  values::set kubeDns.internal.stsPodsHostsAppenderWebhook.ca  "$ca_crt"
}

hook::run "$@"
