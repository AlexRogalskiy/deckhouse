#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 10
    kubernetes:
    - name: node_roles
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Node
      jqFilter: |
        .metadata.labels // {} |
        if ([keys[] | select(startswith("node-role.kubernetes.io/master"))] | length > 0) then
          [keys[] | select(startswith("node-role.kubernetes.io/"))][0]
        elif ([keys[] | select(startswith("node-role.flant.com/"))] | length > 0) then
          [keys[] | select(startswith("node-role.flant.com/"))][0]
        elif ([keys[] | select(startswith("node-role.deckhouse.io/"))] | length > 0) then
          [keys[] | select(startswith("node-role.deckhouse.io/"))][0]
        elif ([keys[] | select(startswith("node-role.kubernetes.io/"))] | length > 0) then
          [keys[] | select(startswith("node-role.kubernetes.io/"))][0]
        else
          null
        end |
        if . != null then
          . | split("/")[1] | gsub("-(?<a>[a-z])"; .a|ascii_upcase)
        else
          .
        end
EOF
}

function __main__() {
  count_master_nodes=$(context::jq -er '[.snapshots.node_roles[] | select(.filterResult == "master")] | length')
  count_system_nodes=$(context::jq -er '[.snapshots.node_roles[] | select(.filterResult == "system")] | length')
  count_kube_dns_nodes=$(context::jq -er '[.snapshots.node_roles[] | select(.filterResult == "kubeDns")] | length')
  count_nonspecific_nodes=$(context::jq -er '[.snapshots.node_roles[] | select(.filterResult == null)] | length')

  if (( (count_system_nodes + count_kube_dns_nodes) > 0 )); then
    specific_node="system" # $count_system_nodes > 0
    if (( count_kube_dns_nodes > 0 )); then
      specific_node="kube-dns"
    fi
    values::set kubeDns.internal.specificNodeType "$specific_node"
  else
    values::unset kubeDns.internal.specificNodeType
  fi

  replicas=2
  if (( count_kube_dns_nodes > 0 )); then
    replicas="$((count_master_nodes + count_kube_dns_nodes))"
  elif (( count_system_nodes > 0 )); then
    replicas="$((count_master_nodes + count_system_nodes))"
  elif (( count_master_nodes > 2 )); then
    replicas="$count_master_nodes"
  fi

  # limit coredns replicas quantity to prevent system nodes autoscaling problem
  if (( replicas > (count_master_nodes + 2) )); then
    replicas="$(( count_master_nodes + 2 ))"
  fi

  values::set kubeDns.internal.replicas "$replicas"

  if (( (count_master_nodes + count_kube_dns_nodes + count_system_nodes) > 1 )); then
    values::set kubeDns.internal.enablePodAntiAffinity true
  else
    values::set kubeDns.internal.enablePodAntiAffinity false
  fi
}

hook::run $@
