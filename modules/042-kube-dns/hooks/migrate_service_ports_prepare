#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### Migration 19.02.2021: Remove after this commit reached RockSolid

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 10
    kubernetes:
    - name: service
      group: main
      keepFullObjectsInMemory: false
      executeHookOnEvent: ["Modified"]
      waitForSynchronization: false
      apiVersion: v1
      kind: Service
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames:
        - d8-kube-dns
      jqFilter: |
        {
          "isOriginal": ([.spec.ports // [] | .[] | select(.targetPort == 53)] | any),
          "isMigrated": ([.spec.ports // [] | .[] | select(.targetPort == 5353)] | length == 2)
        }
    - name: dns_pods
      group: main
      keepFullObjectsInMemory: false
      waitForSynchronization: false
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-dns
      jqFilter: |
        {
          "isReady": (if .status.conditions then .status.conditions[] | select(.type == "Ready") | .status == "True" else false end),
          "nodeName": (.spec.nodeName // null),
          "hasOldPort": ([.spec.containers // [] | . [] | .ports // [] | .[] | select(.containerPort == 53)] | any),
          "hasNewPort": ([.spec.containers // [] | . [] | .ports // [] | .[] | select(.containerPort == 5353)] | any)
        }
EOF
}

function __main__() {
  if ! context::has snapshots.service.0; then
    return 0
  fi

  if context::jq -er '.snapshots.service[0] | select(.filterResult.isMigrated == true)' >/dev/null; then
    return 0
  fi

  # Move to migration state if Service has old 53 port.
  if context::jq -er '.snapshots.service[0] | select(.filterResult.isOriginal == true)' >/dev/null; then
    # And not in migration state yet
    if [[ $(values::get kubeDns.internal.migration) != "true" ]]; then
      >&2 echo "Migrations prepare: starting migration for kube-dns."
      values::set kubeDns.internal.migration "true"
      return 0
    fi
  fi

  # Continue only in migration state.
  if [[ "$(values::get kubeDns.internal.migration)" != "true" ]]; then
    return 0
  fi

  # Do not pass to next statement if no Ready Pods are exist.
  if context::jq -e '[.snapshots.dns_pods[].filterResult | select(.nodeName and .isReady)] | any | not' >/dev/null; then
    >&2 echo "Migrations prepare: waiting for kube-dns Pods being rolled out."
    return 0
  fi

  if context::jq -e '[.snapshots.dns_pods[].filterResult | select(.nodeName and .isReady and ((.hasOldPort | not) or (.hasNewPort | not)))] | any' >/dev/null; then
    >&2 echo "Migrations prepare: waiting for all migrated kube-dns Pods to become Ready."
    return 0
  fi

  # Move to final state if all DNS Pods are Ready and having both 53 and 5353 ports.
  >&2 echo "Migrations prepare: completed, kube-dns Pods are Ready and listening both 53 and 5353 ports."
  values::set kubeDns.internal.migration "false"
}

hook::run "$@"
