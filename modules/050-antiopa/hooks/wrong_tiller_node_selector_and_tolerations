#!/bin/bash

source /antiopa/shell_lib.sh

function __config__() {
  jo -p beforeHelm=50
}

function __main__() {
  system_node_count=$(cluster::count_nodes_by_role "system")

  node_selector='null'
  if values::has antiopa.nodeSelector ; then
    if ! values::is_false antiopa.nodeSelector ; then
      node_selector="$(values::get --required antiopa.nodeSelector | jq -c .)"
    fi
  elif (( "$system_node_count" > 0 )) ; then
    node_selector='{"node-role.flant.com/system":""}'
  fi

  tolerations='null'
  if values::has antiopa.tolerations ; then
    if ! values::is_false antiopa.tolerations ; then
      tolerations="$(values::get --required antiopa.tolerations | jq -c .)"
    fi
  elif (( "$system_node_count" > 0 )) ; then
    tolerations='[{"key":"dedicated.flant.com","value":"system"},{"key":"node-role/system"}]'
  fi

  # filter new tolerations in Kubernetes >=1.13
  filtered_tiller_deploy=$(kubectl -n antiopa get deploy/tiller-deploy -o json |
                            jq 'include "remove_empty"; .spec.template.spec.tolerations |= [. // [] | .[] | select(.key != "node.kubernetes.io/not-ready" and .key != "node.kubernetes.io/unreachable" and .key != "node.kubernetes.io/memory-pressure")] | remove_empty'
                          )

  res=$(echo "$filtered_tiller_deploy" | jq --argjson a "$node_selector" --argjson b "$tolerations" '.spec.template.spec.nodeSelector == $a and .spec.template.spec.tolerations == $b')
  if [[ "$res" != "true" ]] ; then
    # Удаляем tiller, а antiopa уже инициализирует его с правильными значениями при следующем запуске
    echo "Tiller has wrong nodeSelector or toleration. Removing tiller and restarting self."
    kubectl -n antiopa delete deploy/tiller-deploy
    kill 1
  fi
}

hook::run $@
