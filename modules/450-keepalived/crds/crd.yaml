apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: keepalivedinstances.deckhouse.io
  labels:
    heritage: deckhouse
    module: keepalived
spec:
  group: deckhouse.io
  scope: Cluster
  names:
    plural: keepalivedinstances
    singular: keepalivedinstance
    kind: KeepalivedInstance
  preserveUnknownFields: false
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          description: |
            CustomResource для настройки keepalived-кластеров.

            Один CR `KeepalivedInstance` описывает один keepalived-кластер.

            `metadata.name` — имя кластера, используется в названиях подов.
          required:
            - spec
          properties:
            spec:
              type: object
              required:
                - nodeSelector
                - vrrpInstances
              properties:
                nodeSelector:
                  type: object
                  additionalProperties:
                    type: string
                  x-kubernetes-preserve-unknown-fields: true
                  description: |
                    Определяет `nodeSelector` для подов с keepalived.

                    Если ничего не указано — будет [использоваться автоматика](https://early.deckhouse.io/overview.html#выделение-узлов-под-определенный-вид-нагрузки).
                    Чтобы отключить автоматику нужно указать значение `false`.

                    **Формат**: стандартный список `nodeSelector`. Поды инстанса унаследуют это поле как есть.
                tolerations:
                  description: |
                    Определяет `tolerations` для подов с keepalived.

                    Если ничего не указано — будет [использоваться автоматика](https://early.deckhouse.io/overview.html#выделение-узлов-под-определенный-вид-нагрузки).
                    Чтобы отключить автоматику нужно указать значение `false`.

                    **Формат**: стандартный список [toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/). Поды инстанса унаследуют это поле как есть.
                  items:
                    properties:
                      effect:
                        description: |
                          Определяет какому effect'у taint'а соответствует описываемый toleration. Пустой подразумевает соответствие любому effect.
                        type: string
                        enum: ["NoSchedule", "PreferNoSchedule", "NoExecute"]
                      key:
                        description: |
                          Определяет какому ключу (key) taint'a соответствует описываемый toleration. Пустой подразумевает соответствие любому ключу.

                          Если ключ (key) не указан (пуст), то `operator` должен быть — `Exists`, что подразумевает соответствие любым `value` и `key`.
                        type: string
                      operator:
                        description: |
                          Определяет отношение ключа (key) к значению (value) — должен ли ключ быть равен (`Equal`) значению, или допустимо существование ключа с любым значением.

                          Указание `Exists` равносильно допуску любого значения (для value), чтобы под с указанным toleration удовлетворял соответствующему taint.

                          **По умолчанию**: `Equal`.
                        type: string
                        enum: ["Exists", "Equal"]
                      tolerationSeconds:
                        description: |
                          Определяет период времени в секундах, в течении которого планировщик должен ждать, прежде чем выгнать (evict) Pod с узла, если
                          toleration перестал удовлетворять taint (справедливо **только** для effect `NoExecute`, иначе игнорируется).

                          Если **не установлено**, то Pod не будет выгнан с узла, если toleration перестал удовлетворять taint. Если **установлен в ноль** (или отрицателен), то Pod будет выгнан с узла немедленно, если  toleration перестал удовлетворять taint.

                          **По умолчанию**: не установлено.
                        format: int64
                        type: integer
                      value:
                        description: |
                          Значение, которому должен удовлетворять toleration.

                          Должно быть пустым, если operator — `Exists`.
                        type: string
                    type: object
                  type: array
                vrrpInstances:
                  type: array
                  description: |
                    Cписок инстансов VRRP внутри keepalived-кластера. По сути, — список групп адресов, которые мигрируют между серверами одновременно и не могут работать друг без друга.

                    Не нужно путать `vrrpInstance` и `KeepalivedInstance`. `vrrpInstance` — это составная часть `KeepalivedInstance`.

                    Модуль `keepalived` настраивает VRRP-инстансы таким образом, чтобы все адреса (все группы) не собирались одновременно на одной ноде, а распределялись равномерно по всем серверам.
                  items:
                    type: object
                    required:
                      - id
                      - interface
                      - virtualIPAddresses
                    properties:
                      id:
                        type: integer
                        description: |
                          Уникальный **в масштабах всего кластера** идентификатор VRRP-группы.

                          Не нужно использовать одинаковый ID в разных инстансах `KeepalivedInstance`, если у вас на это нет особой причины.
                        maximum: 255
                        minimum: 1
                      interface:
                        type: object
                        description: |
                          Определяет, как вычислить интерфейс для служебного VRRP-трафика на узле.
                        properties:
                          detectionStrategy:
                            type: string
                            description: |
                              Одна из трёх возможных стратегий определения интерфейса для трафика VRRP:
                              * `Name` — задать имя интерфейса явно, с помощью параметра `spec.vrrpInstances[].interface.name`. В этом случае все узлы должны иметь одинаковый интерфейс, который смотрит в нужную сеть (например, eth0).
                              * `NetworkAddress` — найти на узле интерфейс с ip из этой подсети и использовать его.
                              * `DefaultRoute` — использовать интерфейс, через который определен маршрут по умолчанию на узле (в таблице 254 "main").
                          name:
                            type: string
                            description: |
                              Имя интерфейса для служебного VRRP-трафика в случае использования `detectionStrategy` = `Name`.

                              **Обязательный параметр** в случае использования `detectionStrategy` = `Name`.
                            minLength: 1
                          networkAddress:
                            type: string
                            description: |
                              Интерфейс узла с IP-адресом из этой подсети будет использован как служебный в случае использования `detectionStrategy` = `NetworkAddress`.

                              **Обязательный параметр** в случае использования `detectionStrategy` = `NetworkAddress`.
                            pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
                            example: '192.168.42.0/24'
                        oneOf:
                          - properties:
                              detectionStrategy:
                                enum: [Name]
                            required: [detectionStrategy, name]
                          - properties:
                              detectionStrategy:
                                enum: [NetworkAddress]
                            required: [detectionStrategy, networkAddress]
                          - properties:
                              detectionStrategy:
                                enum: [DefaultRoute]
                            required: [detectionStrategy]
                      preempt:
                        type: boolean
                        description: |
                          Возвращать ли IP на узел, который восстановился после аварии.

                          Если у вас один `vrrpInstance`, то разумнее не перекидывать IP лишний раз, чтобы не трогать соединения. Если групп много и трафик большой — то лучше вернуть, чтобы не допустить скопления всех групп на одном узле.

                          **По умолчанию** — `true`, то есть, IP вернётся на узел, в случае если он вернется в строй.
                      virtualIPAddresses:
                        type: array
                        description: 'Список IP-адресов, которые **одновременно** будут "прыгать" между серверами'
                        items:
                          type: object
                          required:
                            - address
                          properties:
                            address:
                              type: string
                              description: |
                                Один из адресов в группе.
                              example: '192.168.42.15/32'
                              pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
                            interface:
                              type: object
                              description: |
                                Интерфейс для привязки виртуального IP-адреса на узле. Аналогичен `spec.vrrpInstances[].interface`.

                                Если не указать — будет использован основной, служебный интерфейс, который определен в `spec.vrrpInstances[].interface`.

                                **Необязательный параметр**.
                              properties:
                                detectionStrategy:
                                  type: string
                                  description: |
                                    Одна из трёх возможных стратегий определения интерфейса для привязки IP-адреса:
                                    * `Name` — задать имя интерфейса явно, с помощью параметра `spec.vrrpInstances[].virtualIPAddresses[].interface.name`. В этом случае все узлы должны иметь одинаковый интерфейс, который смотрит в нужную сеть (например, eth0).
                                    * `NetworkAddress` — найти на узле интерфейс с IP из этой подсети и использовать его.
                                    * `DefaultRoute` — использовать интерфейс, через который определен маршрут по умолчанию на узле (в таблице 254 "main").
                                name:
                                  type: string
                                  description: |
                                    Имя интерфейса для привязки виртуального IP-адреса в случае использования `virtualIPaddresses[].detectionStrategy` = `Name`.

                                    **Обязательный параметр** в случае использования `virtualIPaddresses[].detectionStrategy` = `Name`.
                                  minLength: 1
                                networkAddress:
                                  type: string
                                  description: |
                                    Интерфейс узла с IP-адресом из этой подсети будет использован как служебный в случае использования `virtualIPaddresses[].detectionStrategy` = `NetworkAddress`.

                                    **Обязательный параметр** в случае использования `virtualIPaddresses[].detectionStrategy` = `NetworkAddress`.
                                  pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
                                  example: '192.168.42.0/24'
                              oneOf:
                                - properties:
                                    detectionStrategy:
                                      enum: [Name]
                                  required: [detectionStrategy, name]
                                - properties:
                                    detectionStrategy:
                                      enum: [NetworkAddress]
                                  required: [detectionStrategy, networkAddress]
                                - properties:
                                    detectionStrategy:
                                      enum: [DefaultRoute]
                                  required: [detectionStrategy]
