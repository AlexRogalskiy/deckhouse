#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: podmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: PodMetric
    - name: deploymentmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: DeploymentMetric
    - name: statefulsetmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: StatefulSetMetric
    - name: daemonsetmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: DaemonSetMetric
    - name: ingressmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: IngressMetric
    - name: servicemetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ServiceMetric
    - name: namespacemetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: NamespaceMetric
    - name: clusterpodmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterPodMetric
    - name: clusterdeploymentmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterDeploymentMetric
    - name: clusterstatefulsetmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterStatefulSetMetric
    - name: clusterdaemonsetmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterDaemonSetMetric
    - name: clusteringressmetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterIngressMetric
    - name: clusterservicemetric
      queue: /modules/$(module::name::kebab_case)/custom_metrics
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterServiceMetric
EOF
}

function __on_kubernetes::podmetric::synchronization() {
  return 0
}

function __on_kubernetes::deploymentmetric::synchronization() {
  return 0
}

function __on_kubernetes::statefulsetmetric::synchronization() {
  return 0
}

function __on_kubernetes::daemonsetmetric::synchronization() {
  return 0
}

function __on_kubernetes::ingressmetric::synchronization() {
  return 0
}

function __on_kubernetes::servicemetric::synchronization() {
  return 0
}

function __on_kubernetes::namespacemetric::synchronization() {
  return 0
}

function __on_kubernetes::clusterpodmetric::synchronization() {
  return 0
}

function __on_kubernetes::clusterdeploymentmetric::synchronization() {
  return 0
}

function __on_kubernetes::clusterstatefulsetmetric::synchronization() {
  return 0
}

function __on_kubernetes::clusterdaemonsetmetric::synchronization() {
  return 0
}

function __on_kubernetes::clusteringressmetric::synchronization() {
  return 0
}

function __on_kubernetes::clusterservicemetric::synchronization() {
  return 0
}

function __on_kubernetes::podmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::deploymentmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::statefulsetmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::daemonsetmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::ingressmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::servicemetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::namespacemetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusterpodmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusterdeploymentmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusterstatefulsetmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusterdaemonsetmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusteringressmetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::clusterservicemetric::added_or_modified() {
  _added_or_modified
}

function __on_kubernetes::podmetric::deleted() {
  _deleted
}

function __on_kubernetes::deploymentmetric::deleted() {
  _deleted
}

function __on_kubernetes::statefulsetmetric::deleted() {
  _deleted
}

function __on_kubernetes::daemonsetmetric::deleted() {
  _deleted
}

function __on_kubernetes::ingressmetric::deleted() {
  _deleted
}

function __on_kubernetes::servicemetric::deleted() {
  _deleted
}

function __on_kubernetes::namespacemetric::deleted() {
  _deleted
}

function __on_kubernetes::clusterpodmetric::deleted() {
  _deleted
}

function __on_kubernetes::clusterdeploymentmetric::deleted() {
  _deleted
}

function __on_kubernetes::clusterstatefulsetmetric::deleted() {
  _deleted
}

function __on_kubernetes::clusterdaemonsetmetric::deleted() {
  _deleted
}

function __on_kubernetes::clusteringressmetric::deleted() {
  _deleted
}

function __on_kubernetes::clusterservicemetric::deleted() {
  _deleted
}

function _added_or_modified() {
  RESOURCE_KIND=$(context::get object.kind)
  RESOURCE_NAME=$(context::get object.metadata.name)
  RESOURCE=$(echo $RESOURCE_KIND | sed -E -e 's/^(Cluster)?(.*)Metric$/\2/')
  RESOURCE=${RESOURCE,,} # lowercase

  WHOLE_METRIC_PATH=prometheusMetricsAdapter.internal.customMetrics.${RESOURCE}.${RESOURCE_NAME}

  if ! values::has $WHOLE_METRIC_PATH; then
    values::set $WHOLE_METRIC_PATH '{"namespaced": {}}'
  fi

  if [[ "$RESOURCE_KIND" =~ ^Cluster ]]; then
    QUERY=$(kubectl get $RESOURCE_KIND $RESOURCE_NAME -o json | jq -r '.spec.query')
    values::set ${WHOLE_METRIC_PATH}.cluster "${QUERY}"
  else
    RESOURCE_NAMESPACE=$(context::get object.metadata.namespace)
    QUERY=$(kubectl -n $RESOURCE_NAMESPACE get $RESOURCE_KIND $RESOURCE_NAME -o json | jq -r '.spec.query')
    values::set ${WHOLE_METRIC_PATH}.namespaced.${RESOURCE_NAMESPACE} "${QUERY}"
  fi
}

function _deleted() {
  RESOURCE_KIND=$(context::get object.kind)
  RESOURCE_NAME=$(context::get object.metadata.name)
  RESOURCE=$(echo $RESOURCE_KIND | sed -E -e 's/^(Cluster)?(.*)Metric$/\2/')
  RESOURCE=${RESOURCE,,} #lowercase

  WHOLE_METRIC_PATH=prometheusMetricsAdapter.internal.customMetrics.${RESOURCE}.${RESOURCE_NAME}
  if [[ "$RESOURCE_KIND" =~ ^Cluster ]]; then
    PARTICULAR_METRIC_PATH="${WHOLE_METRIC_PATH}.cluster"
  else
    RESOURCE_NAMESPACE=$(context::get object.metadata.namespace)
    PARTICULAR_METRIC_PATH="${WHOLE_METRIC_PATH}.namespaced.${RESOURCE_NAMESPACE}"
  fi

  if values::has $PARTICULAR_METRIC_PATH ; then
    if values::get $WHOLE_METRIC_PATH | jq -e '((if has("cluster") then 1 else 0 end) + (.namespaced | to_entries | length)) == 1'; then
      # there is no other metrics with our name but particular
      values::unset $WHOLE_METRIC_PATH
    else
      values::unset $PARTICULAR_METRIC_PATH
    fi
  fi
}

hook::run $@
