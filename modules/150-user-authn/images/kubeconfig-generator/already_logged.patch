From 4a029c3aa84bcc97ae2040429007132e10ea1b0c Mon Sep 17 00:00:00 2001
From: "m.nabokikh" <maksim.nabokikh@flant.com>
Date: Tue, 30 Mar 2021 13:41:08 +0400
Subject: [PATCH] patch

---
 dex-auth.go                     | 65 +++++++++++++++++++++++--
 entrypoint.sh                   |  2 +-
 main.go                         |  7 +++
 templates.go                    | 15 ++++++
 templates/kubeconfig.html       |  7 ++-
 templates/linux-mac-common.html | 20 +++++---
 templates/linux-tab.html        | 17 ++++++-
 templates/mac-tab.html          | 13 ++++-
 templates/raw-config-tab.html   | 86 +++++++++++++++++++++++++++++++++
 templates/warning.html          | 42 ++++++++++++++++
 templates/windows-tab.html      | 15 ++++--
 11 files changed, 271 insertions(+), 18 deletions(-)
 create mode 100644 templates/raw-config-tab.html
 create mode 100644 templates/warning.html

diff --git a/dex-auth.go b/dex-auth.go
index 2a52d1d..245d512 100644
--- a/dex-auth.go
+++ b/dex-auth.go
@@ -2,6 +2,7 @@ package main
 
 import (
 	"bytes"
+	"encoding/base64"
 	"encoding/json"
 	"fmt"
 	"io/ioutil"
@@ -17,6 +18,36 @@ import (
 
 const exampleAppState = "Vgn2lp5QnymFtLntKX5dM8k773PwcM87T4hQtiESC1q8wkUBgw5D3kH0r5qJ"
 
+func loadCookie(r *http.Request) ([]string, error) {
+	var clusters []string
+
+	cookie, err := r.Cookie("clusters")
+	if err != nil {
+		return clusters, err
+	}
+
+	if cookie != nil {
+		cookieString, err := base64.StdEncoding.DecodeString(cookie.Value)
+		if err != nil {
+			return clusters, err
+		}
+		err = json.Unmarshal(cookieString, &clusters)
+		if err != nil {
+			return clusters, err
+		}
+	}
+	return clusters, nil
+}
+
+func newCookie(clusters []string) *http.Cookie {
+	cookie := http.Cookie{Name: "clusters", Path: "/"}
+
+	newCookieValue, _ := json.Marshal(clusters)
+
+	cookie.Value = base64.StdEncoding.EncodeToString(newCookieValue)
+	return &cookie
+}
+
 func (cluster *Cluster) oauth2Config(scopes []string) *oauth2.Config {
 
 	return &oauth2.Config{
@@ -29,8 +60,7 @@ func (cluster *Cluster) oauth2Config(scopes []string) *oauth2.Config {
 }
 
 func (config *Config) handleIndex(w http.ResponseWriter, r *http.Request) {
-
-	if len(config.Clusters) == 1 && r.URL.String() == config.Web_Path_Prefix {
+	if len(config.Clusters) == 1 && r.URL.Path == config.Web_Path_Prefix {
 		http.Redirect(w, r, path.Join(config.Web_Path_Prefix, "login", config.Clusters[0].Name), http.StatusSeeOther)
 	} else {
 		renderIndex(w, config)
@@ -38,9 +68,32 @@ func (config *Config) handleIndex(w http.ResponseWriter, r *http.Request) {
 }
 
 func (cluster *Cluster) handleLogin(w http.ResponseWriter, r *http.Request) {
+	clusters, err := loadCookie(r)
+	if err != nil {
+		log.Printf("Error while decoding cookie: %v", err)
+	}
+	skipAlreadyLogged := r.URL.Query().Get("skip_already_logged")
+	if skipAlreadyLogged == "" {
+		for _, clusterName := range clusters {
+			if clusterName == cluster.Name {
+				cluster.renderWarning(w, clusterName)
+				return
+			}
+		}
+	} else {
+		for index, clusterName := range clusters {
+			if clusterName == cluster.Name {
+				clusters = append(clusters[:index], clusters[index+1:]...)
+				break
+			}
+		}
+		http.SetCookie(w, newCookie(clusters))
+	}
+
 	var scopes []string
 
 	scopes = append(scopes, "openid", "profile", "email", "offline_access", "groups")
+	scopes = append(scopes, cluster.Scopes...)
 
 	log.Printf("Handling login-uri for: %s", cluster.Name)
 	authCodeURL := cluster.oauth2Config(scopes).AuthCodeURL(exampleAppState, oauth2.AccessTypeOffline)
@@ -59,7 +112,6 @@ func (cluster *Cluster) handleCallback(w http.ResponseWriter, r *http.Request) {
 	userErrorMsg := "Invalid token request"
 
 	log.Printf("Handling callback for: %s", cluster.Name)
-
 	ctx := oidc.ClientContext(r.Context(), cluster.Client)
 	oauth2Config := cluster.oauth2Config(nil)
 	switch r.Method {
@@ -136,6 +188,13 @@ func (cluster *Cluster) handleCallback(w http.ResponseWriter, r *http.Request) {
 		IdpCaPem = cast.ToString(content)
 	}
 
+	clusters, err := loadCookie(r)
+	if err != nil {
+		log.Printf("Error while decoding cookie: %v", err)
+	}
+	clusters = append(clusters, cluster.Name)
+	http.SetCookie(w, newCookie(clusters))
+
 	cluster.renderToken(w, rawIDToken, token.RefreshToken,
 		cluster.Config.IDP_Ca_URI,
 		IdpCaPem,
diff --git a/entrypoint.sh b/entrypoint.sh
index 14bec45..9478319 100755
--- a/entrypoint.sh
+++ b/entrypoint.sh
@@ -1,6 +1,6 @@
 #!/bin/sh
 
-if [ ! -z "$(ls -A /certs)" ]; then
+if [[ ! -z "$(ls -A /certs)" ]]; then
   cp -L /certs/*.crt /usr/local/share/ca-certificates/ 2>/dev/null
   update-ca-certificates
 fi
diff --git a/main.go b/main.go
index d195f18..6aa85b1 100644
--- a/main.go
+++ b/main.go
@@ -65,6 +65,7 @@ type Cluster struct {
 	K8s_Ca_URI          string
 	K8s_Ca_Pem          string
 	Static_Context_Name bool
+	Scopes              []string
 
 	Verifier       *oidc.IDTokenVerifier
 	Provider       *oidc.Provider
@@ -235,6 +236,12 @@ func start_app(config Config) {
 	// Index page
 	http.HandleFunc(config.Web_Path_Prefix, config.handleIndex)
 
+	// Health check page
+	http.HandleFunc(config.Web_Path_Prefix+"healthz", func(w http.ResponseWriter, _ *http.Request) {
+		w.WriteHeader(http.StatusOK)
+		w.Write([]byte("ok"))
+	})
+
 	// Serve static html assets
 	fs := http.FileServer(http.Dir("html/static/"))
 	static_uri := path.Join(config.Web_Path_Prefix, "static") + "/"
diff --git a/templates.go b/templates.go
index c6ab1b1..d27ffc5 100644
--- a/templates.go
+++ b/templates.go
@@ -3,6 +3,7 @@
 package main
 
 import (
+	"encoding/base64"
 	"encoding/json"
 	"fmt"
 	"html/template"
@@ -37,6 +38,7 @@ type templateData struct {
 	K8sMasterURI      string
 	K8sCaURI          string
 	K8sCaPem          string
+	K8sCaEncoded      string
 	IDPCaURI          string
 	IDPCaPem          string
 	LogoURI           string
@@ -67,6 +69,7 @@ func (cluster *Cluster) renderToken(w http.ResponseWriter,
 		unix_username = strings.Split(email, "@")[0]
 	}
 
+	encodedCa := base64.StdEncoding.EncodeToString([]byte(cluster.K8s_Ca_Pem))
 	token_data := templateData{
 		IDToken:           idToken,
 		RefreshToken:      refreshToken,
@@ -81,6 +84,7 @@ func (cluster *Cluster) renderToken(w http.ResponseWriter,
 		K8sMasterURI:      cluster.K8s_Master_URI,
 		K8sCaURI:          cluster.K8s_Ca_URI,
 		K8sCaPem:          cluster.K8s_Ca_Pem,
+		K8sCaEncoded:      encodedCa,
 		IDPCaURI:          idpCaURI,
 		IDPCaPem:          idpCaPem,
 		LogoURI:           logoURI,
@@ -107,3 +111,14 @@ func (cluster *Cluster) renderHTMLError(w http.ResponseWriter, errorMsg string,
 		"Error_Description": errorMsg,
 	})
 }
+
+func (cluster *Cluster) renderWarning(w http.ResponseWriter, name string) {
+	w.Header().Set("Content-Type", "text/html; charset=utf-8")
+	w.Header().Set("X-Content-Type-Options", "nosniff")
+	w.WriteHeader(200)
+	templates.ExecuteTemplate(w, "warning.html", map[string]string{
+		"Logo_Uri":        cluster.Config.Logo_Uri,
+		"Web_Path_Prefix": cluster.Config.Web_Path_Prefix,
+		"Name":            name,
+	})
+}
diff --git a/templates/kubeconfig.html b/templates/kubeconfig.html
index 35763de..5f3e73e 100644
--- a/templates/kubeconfig.html
+++ b/templates/kubeconfig.html
@@ -26,7 +26,7 @@
   <div class="dex-kubeconfig-container">
     <div class="theme-panel">
       <div style="float:right">
-        <a href="{{ .Web_Path_Prefix }}">Login Again</a>
+        <a href="{{ .Web_Path_Prefix }}login/{{ .ClusterName }}?skip_already_logged=true">Login Again</a>
       </div>
       <h2 class="theme-heading">Generated Kubernetes Token - {{ .ShortDescription }}</h2>
 
@@ -44,6 +44,7 @@
           <button class="tablinks active" onclick="openTab(event, 'Linux')">Linux</button>
           <button class="tablinks" onclick="openTab(event, 'MacOS')">MacOS</button>
           <button class="tablinks" onclick="openTab(event, 'Windows')">Windows</button>
+          <button class="tablinks" onclick="openTab(event, 'RawConfig')">Raw Config</button>
           <button class="tablinks" onclick="openTab(event, 'IDToken')">ID Token</button>
         </div>
 
@@ -59,6 +60,10 @@
           {{ template "windows-tab-content" . }}
         </div>
 
+        <div id="RawConfig" class="tabcontent">
+          {{ template "raw-config-tab-content" . }}
+        </div>
+
         <div id="IDToken" class="tabcontent">
           {{ template "id-token-content" . }}
         </div>
diff --git a/templates/linux-mac-common.html b/templates/linux-mac-common.html
index 3a79790..14cd029 100644
--- a/templates/linux-mac-common.html
+++ b/templates/linux-mac-common.html
@@ -80,14 +80,20 @@ EOF</code></pre>
       <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
     </button>
   <pre><code>kubectl config set-credentials {{ .Username }}-{{ .ClusterName }} \
-    --auth-provider=oidc \
-    --auth-provider-arg="idp-issuer-url={{ .Issuer }}" \
-    --auth-provider-arg="client-id={{ .ClientID }}" \
-    --auth-provider-arg="client-secret={{ .ClientSecret }}" \
-    --auth-provider-arg="refresh-token={{ .RefreshToken }}" \
-    --auth-provider-arg="id-token={{ .IDToken }}"
+    --exec-api-version=client.authentication.k8s.io/v1beta1 \
+    --exec-command=kubectl \
+    --exec-arg=oidc-login \
+    --exec-arg=get-token \
+    --exec-arg=--oidc-issuer-url={{ .Issuer }} \
+    --exec-arg=--oidc-client-id={{ .ClientID }} \
+    --exec-arg=--oidc-client-secret={{ .ClientSecret }} \
+    --exec-arg=--oidc-extra-scope=email \
+    --exec-arg=--oidc-extra-scope=profile \
+    --exec-arg=--oidc-extra-scope=groups \
+    --exec-arg=--oidc-extra-scope=offline_access \
+    --exec-arg=--oidc-extra-scope="audience:server:client_id:kubernetes"
   {{- if or (.IDPCaURI) (.IDPCaPem) }} \
-    --auth-provider-arg=idp-certificate-authority=${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt
+    --exec-arg=--certificate-authority=${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt
   {{- end }}</code></pre>
   </div>
 
diff --git a/templates/linux-tab.html b/templates/linux-tab.html
index 65a33d7..1af4906 100644
--- a/templates/linux-tab.html
+++ b/templates/linux-tab.html
@@ -1,7 +1,7 @@
 {{ define "linux-tab-content" }}
   <h3>Install and Set Up kubectl</h3>
   <div>
-  See 
+  See
   <a title="Install and setup kubectl" href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">
     https://kubernetes.io/docs/tasks/tools/install-kubectl
   </a>
@@ -14,5 +14,20 @@
   </p>
   {{ end }}
   </div>
+  <p>
+    Install kubelogin plugin via <i>Github releases (Linux)</i> or <i>Krew</i>:
+    <div class="command">
+      <button class="btn" style="float:right" data-clipboard-snippet="">
+        <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+      </button>
+      <pre><code>wget -O ~/kubelogin.zip \
+  https://github.com/int128/kubelogin/releases/download/v1.23.0/kubelogin_linux_amd64.zip && \
+  unzip ~/kubelogin.zip -d ./kubelogin-tmp && \
+  rm ~/kubelogin.zip && \
+  chmod +x ./kubelogin-tmp/kubelogin && \
+  mv ./kubelogin-tmp/kubelogin /usr/local/bin/kubectl-oidc_login &&
+  rm -rf ./kubelogin-tmp</code></pre>
+    </div>
+  </p>
   {{ template "linux-mac-common" . }}
 {{ end }}
diff --git a/templates/mac-tab.html b/templates/mac-tab.html
index 2935cf1..b858c95 100644
--- a/templates/mac-tab.html
+++ b/templates/mac-tab.html
@@ -1,7 +1,7 @@
 {{ define "mac-tab-content" }}
   <h3>Install and Set Up kubectl</h3>
   <div>
-  See 
+  See
   <a title="Install and setup kubectl" href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">
     https://kubernetes.io/docs/tasks/tools/install-kubectl
   </a>
@@ -14,5 +14,14 @@
   </p>
   {{ end }}
   </div>
+  <p>
+    Install kubelogin plugin via <i>Homebrew (macOS)</i> or <i>Krew</i>:
+    <div class="command">
+      <button class="btn" style="float:right" data-clipboard-snippet="">
+        <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+      </button>
+      <pre><code>brew install int128/kubelogin/kubelogin</code></pre>
+    </div>
+  </p>
   {{ template "linux-mac-common" . }}
-{{ end }}
\ No newline at end of file
+{{ end }}
diff --git a/templates/raw-config-tab.html b/templates/raw-config-tab.html
new file mode 100644
index 0000000..5a177c5
--- /dev/null
+++ b/templates/raw-config-tab.html
@@ -0,0 +1,86 @@
+{{ define "raw-config-tab-content" }}
+  <p>
+  {{ if .IDPCaURI }}
+    <h3>Copy IDP CA Certificate From URL</h3>
+
+    <p>Copy this CA Certificate and download it to your .kube directory</p>
+    <div class="command">
+
+      <button class="btn" style="float:right" data-clipboard-snippet="">
+        <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+      </button>
+
+      <pre><code>curl --create-dirs -s {{ .IDPCaURI }} -o ${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt</code></pre>
+    </div>
+  {{ end }}
+
+  {{ if .IDPCaPem }}
+    <h3>Copy IDP CA From Pem</h3>
+
+    <p>Put the CA Certificate into your .kube directory</p>
+    <div class="command">
+
+      <button class="btn" style="float:right" data-clipboard-snippet="">
+        <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+      </button>
+
+      <pre><code>mkdir -p ${HOME}/.kube/certs/{{ .ClusterName }}/ &amp;&amp; cat &lt;&lt; EOF &gt; ${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt
+{{ .IDPCaPem}}
+EOF</code></pre>
+    </div>
+  {{ end }}
+
+
+  {{ if .K8sCaURI }}
+    <h3>Copy Kubernetes CA Certificate From URL</h3>
+
+    <p>Copy this CA Certificate and download it to your .kube directory</p>
+    <div class="command">
+
+      <button class="btn" style="float: right" data-clipboard-snippet="">
+        <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+      </button>
+      <pre><code>curl --create-dirs -s {{ .K8sCaURI }} -o ${HOME}/.kube/certs/{{ .ClusterName }}/k8s-ca.crt</code></pre>
+    </div>
+  {{ end }}
+
+  <p>Kubectl configuration file that you can copy to ${HOME}/.kube/config</p>
+  <div class="command">
+    <button class="btn" style="float:right" data-clipboard-snippet="">
+      <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt="">
+    </button>
+<pre><code>apiVersion: v1
+kind: Config
+preferences: {}
+users:
+- name: {{ .Username }}-{{ .ClusterName }}
+  user:
+    exec:
+      apiVersion: client.authentication.k8s.io/v1beta1
+      args:
+      - oidc-login
+      - get-token
+      - --oidc-issuer-url={{ .Issuer }}
+      - --oidc-client-id={{ .ClientID }}
+      - --oidc-client-secret={{ .ClientSecret }}
+      - --oidc-extra-scope=email
+      - --oidc-extra-scope=profile
+      - --oidc-extra-scope=groups
+      - --oidc-extra-scope=offline_access
+      - --oidc-extra-scope=audience:server:client_id:kubernetes
+      command: kubectl
+clusters:
+- name: {{ .ClusterName }}
+  cluster:
+    server: {{ .K8sMasterURI }}
+    {{ if .K8sCaPem }}certificate-authority-data: {{ .K8sCaEncoded }}
+    {{- else if .K8sCaURI }}certificate-authority: ~/.kube/certs/{{ .ClusterName }}/k8s-ca.crt
+    {{- end }}
+contexts:
+- context:
+    cluster: {{ .ClusterName }}
+    user: {{ .Username }}-{{ .ClusterName }}
+  name: {{ .Username }}-{{ .ClusterName }}
+current-context: {{ .Username }}-{{ .ClusterName }}</code></pre>
+  </div>
+{{ end }}
diff --git a/templates/warning.html b/templates/warning.html
new file mode 100644
index 0000000..59433de
--- /dev/null
+++ b/templates/warning.html
@@ -0,0 +1,42 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="google" content="notranslate">
+    <meta http-equiv="Content-Language" content="en">
+    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
+
+    <title>Warning - You are already logged</title>
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <link href="{{ .Web_Path_Prefix }}static/main.css" rel="stylesheet" type="text/css">
+    <link href="{{ .Web_Path_Prefix }}static/styles.css" rel="stylesheet" type="text/css">
+    <link rel="icon" href="{{ .Web_Path_Prefix }}static/favicon.png">
+  </head>
+
+  <body class="theme-body">
+    <div class="theme-navbar">
+      {{ if .Logo_Uri }}
+      <div class="theme-navbar__logo-wrap">
+          <img class="theme-navbar__logo" src="{{ .Logo_Uri }}"/>
+      </div>
+      {{ end }}
+    </div>
+
+    <div class="dex-container">
+      <div class="theme-panel">
+        <h2 class="theme-heading">You already generated kubeconfig for <b>{{ .Name }}</b> cluster</h2>
+        <div class="theme-form-row">
+          <p class="theme-form-description">If you generate new kubeconfig, the old one will stop working</p>
+          <p>
+            <a href="{{ .Web_Path_Prefix }}login/{{ .Name }}?skip_already_logged=true" target="_self">
+              <button class="dex-btn theme-btn-provider">
+                <span class="dex-btn-icon dex-btn-icon--local"></span>
+                <span class="dex-btn-text">Generate new kubeconfig</span>
+              </button>
+            </a>
+          </p>
+        </div>
+      </div>
+    </div>
+  </body>
+</html>
diff --git a/templates/windows-tab.html b/templates/windows-tab.html
index a1e2b00..82cf3ce 100644
--- a/templates/windows-tab.html
+++ b/templates/windows-tab.html
@@ -14,7 +14,16 @@
     </a>
     </p>
     {{ end }}
-  </div>
+      <p>
+        Install kubelogin plugin via <i>Chocolatey (Windows)</i> or <i>Krew</i>:
+      <div class="command">
+        <button class="btn" style="float:right" data-clipboard-snippet="">
+          <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
+        </button>
+        <pre><code>choco install kubelogin</code></pre>
+      </div>
+      </p>
+    </div>
 
   {{ if .IDPCaURI }}
     <h3>Copy IDP CA Certificate From URL</h3>
@@ -95,8 +104,8 @@ EOF</code></pre>
     <button class="btn" style="float:right" data-clipboard-snippet="">
       <img class="clippy" width="13" src="{{ .Web_Path_Prefix }}static/clippy.svg" alt=""/>
     </button>
-  <pre><code>kubectl config set-credentials {{ .Username }}-{{ .ClusterName }} --auth-provider=oidc --auth-provider-arg=idp-issuer-url={{ .Issuer }} --auth-provider-arg=client-id={{ .ClientID }} --auth-provider-arg=client-secret={{ .ClientSecret }} --auth-provider-arg=refresh-token={{ .RefreshToken }} --auth-provider-arg=id-token={{ .IDToken }}
-  {{- if or (.IDPCaURI) (.IDPCaPem) }} --auth-provider-arg=idp-certificate-authority=${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt
+  <pre><code>kubectl config set-credentials {{ .Username }}-{{ .ClusterName }} --exec-api-version=client.authentication.k8s.io/v1beta1 --exec-command=kubectl --exec-arg=oidc-login --exec-arg=get-token --exec-arg=--oidc-issuer-url={{ .Issuer }} --exec-arg=--oidc-client-id={{ .ClientID }} --exec-arg=--oidc-client-secret={{ .ClientSecret }} --exec-arg=--oidc-extra-scope=email --exec-arg=--oidc-extra-scope=profile --exec-arg=--oidc-extra-scope=groups --exec-arg=--oidc-extra-scope=offline_access --exec-arg=--oidc-extra-scope="audience:server:client_id:kubernetes"
+  {{- if or (.IDPCaURI) (.IDPCaPem) }} --exec-arg=--certificate-authority=${HOME}/.kube/certs/{{ .ClusterName }}/idp-ca.crt
   {{- end }}</code></pre>
   </div>
   <div class="command">
-- 
2.23.0

