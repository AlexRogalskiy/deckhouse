diff --git a/server/rotation.go b/server/rotation.go
index 464dccf..f804f3c 100644
--- a/server/rotation.go
+++ b/server/rotation.go
@@ -16,7 +16,7 @@ import (
 	"github.com/dexidp/dex/storage"
 )
 
-var errAlreadyRotated = errors.New("keys already rotated by another server instance")
+var ErrAlreadyRotated = errors.New("keys already rotated by another server instance")
 
 // rotationStrategy describes a strategy for generating cryptographic keys, how
 // often to rotate them, and how long they can validate signatures after rotation.
@@ -73,7 +73,7 @@ func (s *Server) startKeyRotation(ctx context.Context, strategy rotationStrategy
 
 	// Try to rotate immediately so properly configured storages will have keys.
 	if err := rotater.rotate(); err != nil {
-		if err == errAlreadyRotated {
+		if err == ErrAlreadyRotated {
 			s.logger.Infof("Key rotation not needed: %v", err)
 		} else {
 			s.logger.Errorf("failed to rotate keys: %v", err)
@@ -134,7 +134,7 @@ func (k keyRotater) rotate() error {
 		// if you are running multiple instances of dex, another instance
 		// could have already rotated the keys.
 		if tNow.Before(keys.NextRotation) {
-			return storage.Keys{}, errAlreadyRotated
+			return storage.Keys{}, ErrAlreadyRotated
 		}
 
 		expired := func(key storage.VerificationKey) bool {
diff --git a/storage/kubernetes/client.go b/storage/kubernetes/client.go
index f2af0e5..639c7a6 100644
--- a/storage/kubernetes/client.go
+++ b/storage/kubernetes/client.go
@@ -27,6 +27,7 @@ import (
 	"golang.org/x/net/http2"
 
 	"github.com/dexidp/dex/pkg/log"
+	"github.com/dexidp/dex/server"
 	"github.com/dexidp/dex/storage"
 	"github.com/dexidp/dex/storage/kubernetes/k8sapi"
 )
@@ -137,8 +138,13 @@ func checkHTTPErr(r *http.Response, validStatusCodes ...int) error {
 	if r.StatusCode == http.StatusNotFound {
 		return storage.ErrNotFound
 	}
-	if r.Request.Method == http.MethodPost && r.StatusCode == http.StatusConflict {
-		return storage.ErrAlreadyExists
+
+	if r.StatusCode == http.StatusConflict {
+		if r.Request.Method == http.MethodPost {
+			return storage.ErrAlreadyExists
+		} else if r.Request.Method == http.MethodPut {
+			return server.ErrAlreadyRotated
+		}
 	}
 
 	var url, method string
