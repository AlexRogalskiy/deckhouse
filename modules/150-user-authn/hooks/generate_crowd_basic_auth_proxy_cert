#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh


function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 10
    schedule:
    - name: generate_crowd_basic_auth_proxy_cert
      queue: /modules/$(module::name::kebab_case)/generate_crowd_basic_auth_proxy_cert
      crontab: "42 4 * * *"
EOF
}

function __main__() {
  # Проверяем условия, при которых должен быть выложен прокси
  if [[ $(values::get userAuthn.publishAPI.enable) != "true" ]]; then
    return 0
  fi
  if ! values::has userAuthn.internal.providers ; then
    return 0
  fi

  crowd_configs=$(values::get userAuthn.internal.providers | jq -r ' .[] | select (.type == "Crowd")')
  if [[ $(jq ' . | length' <<< ${crowd_configs} | wc -l) -ne 1 ]]; then
    return 0
  fi
  if [[ $(jq -r ' .crowd.enableBasicAuth' <<< ${crowd_configs} ) != "true" ]]; then
    return 0
  fi

  # Проверяем, нужно ли нам продлить или выпустить сертификат
  if kubectl -n d8-user-authn get secret/crowd-basic-auth-cert > /dev/null 2> /dev/null ; then
    cert=$(kubectl -n d8-user-authn get secret/crowd-basic-auth-cert -o jsonpath="{.data['client\.crt']}" | base64 -d)
    not_after=$(echo "$cert" | cfssl certinfo -cert - | jq .not_after -r | sed 's/\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)T\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*/\1 \2/')
    valid_for=$(expr $(date --date="$not_after" +%s) - $(date +%s))

    # Если до окончания сертификата осталось более двух дней, пропускаем перевыпуск
    if [[ "$valid_for" -gt 172800 ]]; then
      values::set userAuthn.internal.crowdProxyCert $(kubectl -n d8-user-authn get secret/crowd-basic-auth-cert -o jsonpath="{.data['client\.crt']}")
      values::set userAuthn.internal.crowdProxyKey $(kubectl -n d8-user-authn get secret/crowd-basic-auth-cert -o jsonpath="{.data['client\.key']}")
      return 0
    fi
  fi

  # Создаем CSR
  config='{"CN":"front-proxy-client","key":{"algo":"rsa","size": 2048},"signing":{"default":{"expiry":"72h","usages":["signing","key encipherment","requestheader-client"]}}}'
  csr_response=$(cfssl genkey - <<< ${config} )

  private_key=$(jq -r '.key' <<< ${csr_response} | base64 | tr -d '\n')
  csr=$(jq -r '.csr' <<< ${csr_response} | base64 | tr -d '\n')

  # Если предыдущий запуск хука завершился с ошибкой, нам необходимо удалить предыдущую job'у, чтобы заново её запустить
  kubectl -n d8-system delete job crowd-proxy-cert-generate-job > /dev/null 2> /dev/null || true
  script=$(cat <<'EOF'
          set -e
          regex="--requestheader-client-ca-file[=| ][^ ]*"
          ca_path="$([[ $(ps aux| grep kube-apiserver) =~ $regex ]] && echo ${BASH_REMATCH[0]} | awk -F '=| ' '{ print $2 }')"
          key_path="$([[ $ca_path =~ ^(.+?)\.[^\.]+$ ]] && echo ${BASH_REMATCH[1]}).key"

          csr_config='{"CN":"front-proxy-client","hosts":[""],"key":{"algo": "rsa","size": 2048},"signing":{"default":{"expiry":"72h","usages":["signing","key encipherment","requestheader-client"]}}}'
          signed_cert=$(echo $CSR | base64 -d | cfssl sign -ca=$ca_path -ca-key=$key_path -config=<(echo $csr_config) - )
          echo "Certificate: $(echo $signed_cert | jq .cert -r | base64 | tr -d '\n')"
EOF
)
  cat <<EOF | kubectl -n d8-system create -f -
apiVersion: batch/v1
kind: Job
metadata:
  name: crowd-proxy-cert-generate-job
  labels:
    name: crowd-proxy-cert-generate-job
    heritage: deckhouse
    module: user-authn
spec:
  backoffLimit: 1
  template:
    spec:
      imagePullSecrets:
      - name: deckhouse-registry
      containers:
      - name: generator
        image: $(values::get global.modulesImages.registry):$(values::get global.modulesImages.tags.userAuthn.cfssl)
        command: ["bash", "-c"]
        args:
        - |
${script}
        env:
        - name: CSR
          value: ${csr}
        volumeMounts:
        - name: etc
          readOnly:  true
          mountPath: /etc
        - name: var
          readOnly:  true
          mountPath: /var
        - name: mnt
          readOnly:  true
          mountPath: /mnt
      restartPolicy: Never
      volumes:
      - name: etc
        hostPath:
          path: /etc
      - name: mnt
        hostPath:
          path: /mnt
      - name: var
        hostPath:
          path: /var
      hostPID: true
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - operator: Exists
EOF
  kubectl -n d8-system wait --for=condition=complete job crowd-proxy-cert-generate-job --timeout=30s
  logs=$(kubectl -n d8-system logs -l job-name=crowd-proxy-cert-generate-job | grep "^Certificate:")
  kubectl -n d8-system delete job crowd-proxy-cert-generate-job > /dev/null 2> /dev/null
  if [[ "$logs" == " " ]]; then
    return 1
  fi
  values::set userAuthn.internal.crowdProxyCert $(awk -F ": " '{ print $2 }' <<< ${logs})
  values::set userAuthn.internal.crowdProxyKey "$private_key"
}

hook::run "$@"
