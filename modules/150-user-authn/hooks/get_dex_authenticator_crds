#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
   configVersion: v1
   kubernetes:
   - name: authenticator
     apiVersion: deckhouse.io/v1alpha1
     kind: DexAuthenticator
     includeSnapshotsFrom:
     - authenticator
     - credentials
     jqFilter: |
       {
         "uuid": "\(.metadata.name)@\(.metadata.namespace)",
         "name": .metadata.name,
         "namespace": .metadata.namespace,
         "spec": .spec,
         "allowAccessToKubernetes": ( .metadata.annotations."dex-authenticator.deckhouse.io/allow-access-to-kubernetes" // "" )
       }
   - name: credentials
     apiVersion: v1
     kind: Secret
     includeSnapshotsFrom:
     - authenticator
     - credentials
     labelSelector:
       matchLabels:
         app: dex-authenticator
         name: credentials
     jqFilter: |
       {
         "uuid": "\(.metadata.name)@\(.metadata.namespace)",
         "name": .metadata.name,
         "namespace": .metadata.namespace,
         "credentials": {
           "cookieSecret": "\(.data."cookie-secret" | @base64d )",
           "appDexSecret": "\(.data."client-secret" | @base64d )"
         }
       }
EOF
}

function  __main__() {
  allowed_namespaces=( $(values::get global.hack.namespaces | jq ' to_entries[] | .value') )
  credentialsFromSnapshots=$(context::jq -rc '[(.snapshots.credentials // []) | .[].filterResult'])

  crds=$(context::jq -rc '(.snapshots.authenticator // []) | .[].filterResult' | while read rawCRD ; do
    name=$(jq -rc '.name' <<< ${rawCRD})
    namespace=$(jq -rc '.namespace' <<< ${rawCRD})

    allowAccessToKubernetes=$(jq -rc '.allowAccessToKubernetes' <<< ${rawCRD})
    if [[ ! "${allowed_namespaces[@]} " =~ "$namespace" ]]; then
      allowAccessToKubernetes=""
    fi

    encodedName=$(fnv-encoder "${name}-${namespace}-dex-authenticator")

    credentials=$(jq -rc ".[] | select(.uuid == \"dex-authenticator-${name}@${namespace}\") | .credentials" <<< ${credentialsFromSnapshots})
    if [[ "$credentials" == "" ]]; then
      cookieSecret=$(tools::generate_password)
      appDexSecret=$(tools::generate_password)
      credentials="{\"cookieSecret\":\"${cookieSecret}\", \"appDexSecret\":\"${appDexSecret}\"}"
    fi

    jq ".encodedName |= \"${encodedName}\" | .allowAccessToKubernetes |= \"${allowAccessToKubernetes}\" | .credentials |= ${credentials}" <<< ${rawCRD}
  done | jq -s '.')

  values::set userAuthn.internal.dexAuthenticatorCRDs "$crds"
}

hook::run $@
