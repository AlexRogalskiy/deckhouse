#!/bin/bash

source /deckhouse/shell_lib_legacy.sh

function __config__() {
# Костыль 2019-07-26: пока не разберемся как правильно создавать CRD
kubectl apply -f $(module::path)/crds/ >/dev/null 2>&1

  cat << EOF
{
  "beforeHelm": 10,
  "onKubernetesEvent": [
    {
      "kind": "DexAuthenticator",
      "jqFilter": ".spec"
    }
  ]
}
EOF
}

function __main__() {
  allowed_namespaces=$(values::get global.hack.namespaces | jq ' to_entries[] | .value' | jq -sr 'join ("\", \"")')
  crds=$(kubectl get dex-authenticators.deckhouse.io --all-namespaces -o json  | jq "def IN(s): first(select(s == .)) // false; .items | to_entries[] | (select(.value.namespace | IN(\"$allowed_namespaces\")) | .value.metadata.annotations ) |= null | {\"name\": .value.metadata.name, \"namespace\": .value.metadata.namespace, \"spec\": .value.spec, \"allowAccessToKubernetes\": .value.metadata.annotations.\"dex-authenticator.deckhouse.io/allow-access-to-kubernetes\"}" -rc | jq -sc '.')
  if kubectl -n d8-user-authn get secret kubernetes-dex-client-app-secret > /dev/null 2> /dev/null ; then
    kubernetes_dex_client_app_secret=$(kubectl -n d8-user-authn get secret kubernetes-dex-client-app-secret -o json | jq '.data.secret' -r | base64 -d)
    values::set userAuthn.internal.kubernetesDexClientAppSecret "${kubernetes_dex_client_app_secret}"
  else
    values::set userAuthn.internal.kubernetesDexClientAppSecret $(values::generate_password)
  fi
  for namespace in $(echo "$crds" | jq -r '.[].namespace' | uniq ); do
    for name in $(echo "$crds" | jq -r ".[] | select(.namespace == \"$namespace\") | .name "); do
      if kubectl -n "$namespace" get secret dex-authenticator-${name}  > /dev/null 2> /dev/null ; then
        cookieSecret=$(kubectl -n "$namespace" get secret dex-authenticator-${name} -o jsonpath="{.data.cookie-secret}" | base64 -d)
        appDexSecret=$(kubectl -n "$namespace" get secret dex-authenticator-${name} -o jsonpath="{.data.client-secret}" | base64 -d)
      else
        cookieSecret=$(values::generate_password)
        appDexSecret=$(values::generate_password)
      fi
      encodedName=$(fnv-encoder "${name}-${namespace}-dex-authenticator")
      crds=$(echo "$crds" | jq "[ .[] | (select(.namespace == \"$namespace\" and .name == \"$name\") | . ) += {\"encodedName\":\"$encodedName\", \"credentials\":{\"cookieSecret\": \"$cookieSecret\", \"appDexSecret\": \"$appDexSecret\"}}]")
    done
  done
  values::set userAuthn.internal.dexAuthenticatorCRDs "$crds"
}


hook::run "$@"
