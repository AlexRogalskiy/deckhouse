#!/bin/bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 10
EOF
}

function __main__() {
  if ! values::is_true userAuthn.publishAPI.enable ; then
    return 0
  fi
  if ! kubectl get namespace d8-user-authn > /dev/null 2>&1 ; then
    return 0
  fi

  # The migration 2020-03-11: Moving from ingress-shim annotation to CR Certificate
  if kubectl -n d8-user-authn get certificate kubernetes-tls 2>/dev/null > /dev/null ; then
    owner_reference=$(kubectl -n d8-user-authn get certificate kubernetes-tls -o json | jq -rc '.metadata.ownerReferences')
    if [[ "${owner_reference}" != "null" ]]; then
      kubectl -n d8-user-authn delete certificate kubernetes-tls 2>/dev/null > /dev/null
      kubectl -n d8-user-authn delete secret kubernetes-tls 2>/dev/null >/dev/null
    fi
  fi
  # End of the migration

  if ! kubectl -n d8-user-authn get secret kubernetes-tls > /dev/null 2>&1 ; then
    return 0
  fi

  issuer_kind=$(kubectl -n d8-user-authn get secret kubernetes-tls -o json | jq -rc '.metadata.annotations."cert-manager.io/issuer-kind" // .metadata.annotations."certmanager.k8s.io/issuer-kind"')
  issuer_name=$(kubectl -n d8-user-authn get secret kubernetes-tls -o json | jq -rc '.metadata.annotations."cert-manager.io/issuer-name" // .metadata.annotations."certmanager.k8s.io/issuer-name"')

  if [[ "$(values::get userAuthn.publishAPI.https.mode)" == "SelfSigned" ]]; then
    if [[ "${issuer_kind}" != "Issuer" ]] || [[ "${issuer_name}" != "kubernetes-api" ]]; then
      kubectl -n d8-user-authn get secret kubernetes-tls > /dev/null 2>&1
      return 0
    fi
  fi

  if [[ "$(values::get userAuthn.publishAPI.https.mode)" == "Global" ]]; then
    https_mode=$(values::get_first_defined userAuthn.https.mode global.modules.https.mode)
    if [[ "${https_mode}" == "CertManager" ]]; then
      certificate_issuer_name=$(values::get_first_defined userAuthn.https.certManager.clusterIssuerName global.modules.https.certManager.clusterIssuerName)
      if [[ "${issuer_kind}" != "ClusterIssuer" ]] || [[ "${issuer_name}" != "${certificate_issuer_name}" ]]; then
        kubectl -n d8-user-authn get secret kubernetes-tls > /dev/null 2>&1
        return 0
      fi
    fi
  fi
}

hook::run "$@"
