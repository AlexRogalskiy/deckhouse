#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
   configVersion: v1
   kubernetes:
   - name: user
     group: main
     keepFullObjectsInMemory: false
     queue: /modules/$(module::name::kebab_case)
     apiVersion: deckhouse.io/v1alpha1
     kind: User
     jqFilter: '.spec.userID = (.spec.userID // .metadata.name) | {"name": .metadata.name, "spec": .spec, "status": .status }'
EOF
}


function __main__() {
  crds=$(context::jq -rc '.snapshots.user | .[].filterResult' | while read -r userCRD ; do
    ttl=$(jq -rc '.spec.ttl' <<< "${userCRD}")
    status=$(jq -rc '.status.expireAt' <<< "${userCRD}")
    # set status for User if ttl passed for the first time
    if [ "$ttl" != "null" ] && [ "$status" == "null" ]; then
      ttlInSeconds=$(echo "$ttl" | deckhouse-controller helper unit convert --mode=duration --output=value)
      expireAt=$(date -d "+ $ttlInSeconds seconds" -u +"%Y-%m-%dT%H:%M:%SZ")
      userName=$(jq -rc '.name' <<< "${userCRD}")
      status_patch="$(jq -n --arg msg "$expireAt" '{"expireAt": $msg}')"
      kubernetes::status::merge_patch "" "deckhouse.io/v1alpha1" "users" "${userName}" "${status_patch}"
    fi
    email=$(jq -rc '.spec.email | ascii_downcase' <<< "${userCRD}")
    encodedName=$(deckhouse-controller helper fnv encode "$email")
    jq -rc " .encodedName |= \"$encodedName\" | del(.spec.ttl, .status)" <<< "${userCRD}"
  done | jq -s '.' )

  values::set userAuthn.internal.dexUsersCRDs "$crds"
}

hook::run "$@"
