#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
   configVersion: v1
   beforeHelm: 10
   kubernetes:
   - name: ca_secret
     group: main
     keepFullObjectsInMemory: false
     apiVersion: v1
     kind: Secret
     executeHookOnEvent: ["Added", "Modified"]
     nameSelector:
       matchNames: ["ingress-tls", "ingress-tls-customcertificate"]
     namespace:
       nameSelector:
         matchNames: ["d8-user-authn"]
     jqFilter: |
       {
         name: .metadata.name,
         data: (.data."ca.crt" // .data."tls.crt" // "") | @base64d
       }
EOF
}


function __main__(){
  if ! values::is_true userAuthn.controlPlaneConfigurator.enabled ; then
    values::unset userAuthn.internal.discoveredDexCA
    return 0
  fi
  dex_ca_mode=$(values::get userAuthn.controlPlaneConfigurator.dexCAMode)
  dex_ca=""
  case ${dex_ca_mode} in
    DoNotNeed)
      values::unset userAuthn.internal.discoveredDexCA
    ;;
    FromIngressSecret)
      if context::has snapshots.ca_secret.0 ; then
        secret_name="$(module::https_secret_name "ingress-tls")"
        # shellcheck disable=SC2016
        dex_ca="$(context::jq -r --arg secret_name "$secret_name" '.snapshots.ca_secret[] | select(.filterResult.name==$secret_name) | .filterResult.data')"
      fi
      if [[ "$dex_ca" == "" ]]; then
        >&2 echo "WARNING: Can't get ca.crt or tls.crt from secret $(module::https_secret_name "ingress-tls"). This is a common behavior for the first installation with FromIngressSecret control plane configurator CA discovery mode."
        values::unset userAuthn.internal.discoveredDexCA
        return 0
      fi
      values::set userAuthn.internal.discoveredDexCA "${dex_ca}"
    ;;
    Custom)
      if ! values::has userAuthn.controlPlaneConfigurator.dexCustomCA ; then
        >&2 echo "ERROR: userAuthn.controlPlaneConfigurator.dexCustomCA parameter is mandatory with userAuthn.controlPlaneConfigurator.dexCAMode == 'Custom'."
        return 1
      fi
      dex_ca=$(values::get userAuthn.controlPlaneConfigurator.dexCustomCA)
      values::set userAuthn.internal.discoveredDexCA "${dex_ca}"
    ;;
  esac
}


hook::run "$@"
