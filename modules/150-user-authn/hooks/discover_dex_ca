#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
   configVersion: v1
   beforeHelm: 10
   kubernetes:
   - name: secret
     apiVersion: v1
     kind: Secret
     watchEvent: ["Added", "Modified"]
     includeSnapshotsFrom:
     - secret
     nameSelector:
       matchNames: ["ingress-tls"]
     namespace:
       nameSelector:
         matchNames: ["d8-user-authn"]
     jqFilter: '.data | ."ca.crt" // ."tls.crt" // "" | @base64d'
EOF
}

function __main__(){
  if ! values::is_true userAuthn.controlPlaneConfigurator.enabled ; then
    values::unset userAuthn.internal.controlPlaneConfigurator.oidcCA
    return 0
  fi

  dex_ca_mode=$(values::get userAuthn.controlPlaneConfigurator.dexCAMode)
  oidcCA=""
  case ${dex_ca_mode} in
    DoNotNeed)
      values::unset userAuthn.internal.controlPlaneConfigurator.oidcCA
    ;;
    FromIngressSecret)
      oidcCA=$(context::get snapshots.secret.0.filterResult)
      if [[ "$oidcCA" == "" ]]; then
        >&2 echo "ERROR: Can't get ca.crt or tls.crt from secret 'ingress-tls'."
        return 1
      fi
    ;;
    Custom)
      if ! values::has userAuthn.controlPlaneConfigurator.dexCustomCA ; then
        >&2 echo "ERROR: userAuthn.controlPlaneConfigurator.dexCustomCA parameter is mandatory with userAuthn.controlPlaneConfigurator.dexCAMode == 'Custom'."
        return 1
      fi
      oidcCA=$(values::get userAuthn.controlPlaneConfigurator.dexCustomCA)
    ;;
  esac
  values::set userAuthn.internal.controlPlaneConfigurator.oidcCA "${oidcCA}"
}


hook::run $@
