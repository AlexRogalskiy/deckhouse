#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  jo -p configVersion=v1 onStartup=10
}

function __on_startup() {
  # Миграция 2020-03-03: Удалить после выката на все инстансы
  if kubectl get crd dex-authenticators.deckhouse.io > /dev/null 2> /dev/null ; then
    values=$(kubectl get dex-authenticators --all-namespaces -o json | jq -rc '
       [
         .items[] | del(
           .metadata.selfLink,
           .metadata.resourceVersion,
           .metadata.uid,
           .metadata.creationTimestamp,
           .metadata.generation,
           .metadata.annotations."kubectl.kubernetes.io/last-applied-configuration"
         ) | if .metadata.annotations."dex-authenticator.deckhouse.io/allow-access-to-kubernetes" == "true"
         then .metadata.annotations."dexauthenticator.deckhouse.io/allow-access-to-kubernetes" = .metadata.annotations."dex-authenticator.deckhouse.io/allow-access-to-kubernetes"
         else . end | del(.metadata.annotations."dex-authenticator.deckhouse.io/allow-access-to-kubernetes")
       ]')
    echo "$values" > /tmp/user-authn-dexauthenticator-migration
  fi

  if ! kubectl get crd dexauthenticators.deckhouse.io > /dev/null 2> /dev/null ; then
    kubectl delete crd dex-authenticators.deckhouse.io
    kubectl apply -f $(module::path)/crds/

    rm -rf ~/.kube/cache
    rm -rf ~/.kube/http-cache
  fi

  if test -f /tmp/user-authn-dexauthenticator-migration ; then
    values=$(cat /tmp/user-authn-dexauthenticator-migration)
    for i in $(jq -r '. | keys[]' <<< ${values}); do
      object=$(jq -rc ".[$i]" <<< ${values})
      echo "Attempt to create object: ${object}"
      kubectl create -f - <<< ${object}
    done
    rm /tmp/user-authn-dexauthenticator-migration
  fi

  kubectl apply -f $(module::path)/crds/
}

hook::run "$@"
