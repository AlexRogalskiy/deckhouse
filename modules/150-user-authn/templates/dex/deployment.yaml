{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: dex
  namespace: d8-{{ .Chart.Name }}
{{ include "helm_lib_module_labels" (list . (dict "app" "dex")) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: dex
  updatePolicy:
    updateMode: "Auto"
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: d8-{{ .Chart.Name }}
{{ include "helm_lib_module_labels" (list . (dict "app" "dex")) | indent 2 }}
spec:
  replicas: {{ include "helm_lib_is_ha_to_value" (list . 2 1) }}
  {{- if (include "helm_lib_ha_enabled" .) }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  {{- end }}
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/dex/config.yaml") . | sha256sum }}
{{- if .Values.userAuthn.internal.dexAuthenticatorCRDs }}
        checksum/dex-client-apps-configs-sha256: {{ .Values.userAuthn.internal.dexAuthenticatorCRDs | toJson | sha256sum }}
{{- end }}
    spec:
{{- include "helm_lib_priority_class" (tuple . "cluster-low") | indent 6 }}
{{- include "helm_lib_node_selector" (tuple . "system") | indent 6 }}
{{- include "helm_lib_tolerations" (tuple . "system") | indent 6 }}
      imagePullSecrets:
      - name: deckhouse-registry
      serviceAccountName: dex
{{- if (include "helm_lib_ha_enabled" .) }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: dex
            topologyKey: kubernetes.io/hostname
{{- end }}
      volumes:
      - name: original-config
        secret:
          secretName: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: config
        emptyDir: {}
{{- range $crd := .Values.userAuthn.internal.dexAuthenticatorCRDs }}
  {{- if not $crd.useKubernetesAppKey }}
      - name: {{ $crd.name }}-{{ $crd.namespace }}-dex-client-app
        secret:
          secretName: {{ $crd.name }}-{{ $crd.namespace }}-dex-client-app
  {{- end }}
{{- end }}
      initContainers:
      - name: prepare-config
        image: {{ .Values.global.modulesImages.registry }}/common/busybox:{{ .Values.global.modulesImages.tags.common.busybox }}
        command:
        - sh
        - -c
        - |
          cat /opt/dex/config.yaml > /etc/dex/config.yaml
          cat /opt/dex-client-app-config/* >> /etc/dex/config.yaml
          true
        volumeMounts:
        - mountPath: /opt/dex/
          name: original-config
        - mountPath: /etc/dex
          name: config
{{- range $crd := .Values.userAuthn.internal.dexAuthenticatorCRDs }}
  {{- if not $crd.useKubernetesAppKey }}
        - mountPath: /opt/dex-client-app-config/{{ $crd.name }}-{{ $crd.namespace }}-dex-client-app.yaml
          name: {{ $crd.name }}-{{ $crd.namespace }}-dex-client-app
          subPath: config.yaml
  {{- end }}
{{- end }}
      containers:
      - name: dex
        image: {{ .Values.global.modulesImages.registry }}/user-authn/dex:{{ .Values.global.modulesImages.tags.userAuthn.dex }}
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/config.yaml"]
        ports:
        - name: http
          containerPort: 5556
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5556
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: config
          mountPath: /etc/dex
        resources:
          requests:
            memory: 128Mi
            cpu: 50m
