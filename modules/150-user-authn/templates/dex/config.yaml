{{- define "dex_conf" }}
  {{- $context := . }}
  issuer: https://{{ include "helm_lib_module_public_domain" (list $context "dex") }}/
  storage:
    type: kubernetes
    config:
      inCluster: true
  web:
    http: 0.0.0.0:5556
  frontend:
    theme: "coreos"
    issuer: "Kubernetes Dex"
    issuerUrl: "https://{{ include "helm_lib_module_public_domain" (list $context "dex") }}"
    logoUrl: "https://kubernetes.io/images/favicon.png"
  expiry:
    authRequests: "1h"
    signingKeys: "6h"
    idTokens: {{ $context.Values.userAuthn.idTokenTTL | default "10m" | quote }}
  logger:
    level: debug
    format: json
  oauth2:
    responseTypes: ["code", "token", "id_token"]
    skipApprovalScreen: true
  {{- if $context.Values.userAuthn.internal.dexUsersCRDs }}
  enablePasswordDB: true
  {{- end }}
  {{- if $context.Values.userAuthn.providers }}
  connectors:
    {{- range $provider := $context.Values.userAuthn.providers }}
      {{- if eq $provider.type "Github" }}
    - type: github
      id: {{ $provider.id | quote }}
      name: {{ $provider.name | quote }}
      config:
        clientID: {{ $provider.github.clientID | quote }}
        clientSecret: {{ $provider.github.clientSecret | quote }}
        redirectURI: https://{{ include "helm_lib_module_public_domain" (list $context "dex") }}/callback
        orgs:
        {{- range $org := $provider.github.orgs }}
        - name: {{ $org.name | quote }}
          {{- if $org.teams }}
          teams:
            {{- range $team := $org.teams }}
          - {{ $team | quote }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if $provider.github.teamNameField }}
        teamNameField: {{ $provider.teamNameFiled }}
        {{- end }}
        useLoginAsID: {{ $provider.github.useLoginAsID | default false }}
        loadAllGroups: {{ $provider.github.loadAllGroups | default false }}
      {{- end }}

      {{- if eq $provider.type "Gitlab" }}
    - type: gitlab
      id: {{ $provider.id | quote }}
      name: {{ $provider.name | quote }}
      config:
        baseURL: {{ $provider.gitlab.baseURL | quote }}
        clientID: {{ $provider.gitlab.clientID | quote }}
        clientSecret: {{ $provider.gitlab.clientSecret | quote }}
        redirectURI: https://{{ include "helm_lib_module_public_domain" (list $context "dex") }}/callback
        {{- if $provider.gitlab.groups }}
        groups:
          {{- range $group := $provider.gitlab.groups }}
        - {{ $group | quote }}
          {{- end }}
        {{- end }}
      {{- end }}

      {{- if eq $provider.type "LDAP" }}
    - type: ldap
      id: {{ $provider.id | quote }}
      name: {{ $provider.name | quote }}
      config:
        host: {{ $provider.ldap.host | quote }}
        {{- if $provider.ldap.insecureSkipVerify }}
        insecureSkipVerify: {{ $provider.ldap.insecureSkipVerify | quote }}
        {{- end }}
        {{- if $provider.ldap.ca }}
        rootCAData: {{ $provider.ldap.ca | b64enc }}
        {{- end }}
        bindDN: {{ $provider.ldap.bindDN | quote }}
        bindPW: {{ $provider.ldap.bindPW | quote }}
        {{- if $provider.ldap.startTLS }}
        startTLS: true
        {{- end }}
        userSearch:
{{ $provider.ldap.userSearch | toYaml | indent 8 }}
        groupSearch:
{{ $provider.ldap.groupSearch | toYaml | indent 8 }}
        usernamePrompt: "LDAP username"
      {{- end }}

      {{- if eq $provider.type "OIDC" }}
    - type: oidc
      id: {{ $provider.id | quote }}
      name: {{ $provider.name | quote }}
      config:
        issuer: {{ $provider.oidc.issuer | quote }}
        clientID: {{ $provider.oidc.clientID | quote }}
        clientSecret: {{ $provider.oidc.clientSecret | quote }}
        redirectURI: https://{{ include "helm_lib_module_public_domain" (list $context "dex") }}/callback
        {{- if $provider.oidc.basicAuthUnsupported }}
        basicAuthUnsupported: true
        {{- end }}
        {{- if $provider.oidc.insecureSkipEmailVerified }}
        insecureSkipEmailVerified: true
        {{- end }}
        {{- if $provider.oidc.getUserInfo }}
        getUserInfo: true
        {{- end }}
        userIDKey: {{ $provider.oidc.userIDKey | default "sub" | quote }}
        userNameKey: {{ $provider.oidc.userNameKey | default "name" | quote }}
        {{- if $provider.oidc.scopes }}
        scopes:
{{ $provider.oidc.scopes | toYaml | indent 8 }}
        {{- end }}
        usernamePrompt: "OIDC username"
      {{- end }}

      {{- if eq $provider.type "Crowd" }}
    - type: atlassian-crowd
      id: {{ $provider.id | quote }}
      name: {{ $provider.name | quote }}
      config:
        baseURL: {{ $provider.crowd.baseURL | quote }}
        clientID: {{ $provider.crowd.clientID | quote }}
        clientSecret: {{ $provider.crowd.clientSecret | quote }}
        {{- if $provider.crowd.groups }}
        groups:
{{ $provider.crowd.groups | toYaml | indent 8 }}
        {{- end }}
        usernamePrompt: "Crowd username"
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: dex
  namespace: d8-{{ .Chart.Name }}
{{ include "helm_lib_module_labels" (list . (dict "app" "dex")) | indent 2 }}
data:
  config.yaml: |-
{{ include "dex_conf" . | b64enc | indent 4 }}
