global:
  highAvailability:
    __ConstantChoices__: [true, false]
  enabledModules: ["cert-manager", "vertical-pod-autoscaler-crd", "prometheus", "priority-class"]
  modulesImages:
    registry: registry.deckhouse.io
    registryDockercfg: registry.example.com
    tags:
      userAuthn:
        cfssl: tagstring
        crowdBasicAuthProxy: tagstring
        dex: tagstring
        dexAuthenticator: tagstring
        dexAuthenticatorRedis: tagstring
        kubeconfigGenerator: tagstring
  discovery:
    kubernetesCA: plainstring
    clusterControlPlaneIsHighlyAvailable:
      __ConstantChoices__: [true, false]
    d8SpecificNodeCountByRole:
      system: 2
    kubernetesVersion: 1.15.5
  modules:
    publicDomainTemplate: "%s.example.com"
    https:
      __ConstantChoices__:
      - certManager:
          clusterIssuerName: letsencrypt
        mode: CertManager
      - mode: Disabled
      - mode: OnlyInURI
      - mode: CustomCertificate
        customCertificate:
          secretName: plainstring
    placement: {}

userAuthn:
  controlPlaneConfigurator:
    enabled:
      __ConstantChoices__: [true, false]
  publishAPI:
    enable:
      __ConstantChoices__: [false, true]
    https:
      __ConstantChoices__:
      - mode: SelfSigned
      - mode: Global
        kubeconfigGeneratorMasterCA: plainstring
  idTokenTTL: 10000m
  internal:
    dexTLS:
      certificate: plainstring
      key: plainstring
    customCertificateData:
      tls.crt: plainstring
      tls.key: plainstring
    selfSignedCA:
      cert: test
      key: test
    kubernetesDexClientAppSecret: plainstring
    providers:
      __ConstantChoices__:
        - __EmptyItem__
        - - id: github
            displayName: github
            type: Github
            github:
              clientID: plainstring
              clientSecret: plainstring
              orgs:
                - name: opensource
                  teams:
                    - Testers
                    - Developers
                - name: closesource
              teamNameField: slug
              useLoginAsID: true
        - - id: crowd
            displayName: crowd
            type: Crowd
            crowd:
              clientID: plainstring
              clientSecret: plainstring
              groups:
                - only
                - team
              enableBasicAuth: true
          - id: crowd-next
            displayName: crowd-next
            type: Crowd
            crowd:
              clientID: plainstring
              clientSecret: plainstring
              enableBasicAuth: false
          - id: gitlab
            displayName: gitlab
            type: Gitlab
            gitlab:
              clientID: plainstring
              clientSecret: plainstring
              groups:
                - only
                - team
          - id: oidc
            displayName: google
            type: OIDC
            oidc:
              issuer: "https://issue.example.com"
              clientID: plainstring
              clientSecret: plainstring
              basicAuthUnsupported: true
              insecureSkipEmailVerified: true
              getUserInfo: true
              scopes:
                - profile
                - email
              userIDKey: subsub
              userNameKey: noname
          - id: bitbucket
            displayName: bitbucket
            type: BitbucketCloud
            bitbucketCloud:
              clientID: plainstring
              clientSecret: plainstring
              teams:
                - only
                - team
          - id: ldap
            type: LDAP
            displayName: ldap
            ldap:
              host: "ldap.host.example.com:1234"
              rootCAData: plainstring
              insecureSkipVerify: true
              bindDN: plainstring
              bindPW: plainstring
              startTLS: true
              userSearch:
                baseDN: plainstring
                filter: plainstring
                username: uuid
                idAttr: uuid
                emailAttr: email
                nameAttr: sub
              groupSearch:
                baseDN: plainstring
                filter: plainstring
                nameAttr: name
                userMatchers:
                - userAttr: uuid
                  groupAttr: groups
    discoveredDexCA:
      __ConstantChoices__: [teststring, __EmptyItem__]
    controlPlaneConfigurator:
      oidcCA:
        __ConstantChoices__:
          - test
          - __EmptyItem__
    dexAuthenticatorCRDs:
      __ConstantChoices__:
      - __EmptyItem__
      -
        - credentials:
            appDexSecret: plainstring
            cookieSecret: plainstring
          name: dex-authenticator
          encodedName: dex-authenticator
          namespace: dex-authenticator-namespace
          spec:
            applicationDomain: dex-authenticator.example.com
            applicationIngressCertificateSecretName: dex-authenticator-tls
            applicationIngressClassName: nginx
            sendAuthorizationHeader: true
          allowAccessToKubernetes: false
        - credentials:
            appDexSecret: plainstring
            cookieSecret: plainstring
          name: test
          encodedName: test
          namespace: test-namespace
          spec:
            applicationDomain: test.example.com
            applicationIngressCertificateSecretName: test-tls
            applicationIngressClassName: not-nginx
            nodeSelector:
              testnode: ""
            tolerations:
              - key: foo
                operator: Equal
                value: bar
          allowAccessToKubernetes: true
