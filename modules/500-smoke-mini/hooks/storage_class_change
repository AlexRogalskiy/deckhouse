#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 1
    kubernetes:
    # main
    - name: pvc
      group: main
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      jqFilter: |
        {
          "name": .metadata.name,
          "storageClassName": .spec.storageClassName
        }
    - name: statefulsets
      group: main
      apiVersion: apps/v1
      kind: StatefulSet
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      jqFilter: .metadata.name
    - name: default_sc
      group: main
      apiVersion: storage.k8s.io/v1
      kind: Storageclass
      jqFilter: |
        (.metadata.annotations."storageclass.beta.kubernetes.io/is-default-class" == "true") or
        (.metadata.annotations."storageclass.kubernetes.io/is-default-class" == "true")
    # pvc_modified
    - name: pvc_modified
      executeHookOnEvent: ["Modified"]
      executeHookOnSynchronization: false
      group: pvc_modified
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      jqFilter: |
        {
          "name": .metadata.name,
          "isDeletionTimestamp": (if .metadata | has("deletionTimestamp") then true else false end)
        }
    - name: pods
      group: pvc_modified
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      jqFilter: |
        {
          "name": .metadata.name,
          "isPending": (if .status.phase == "Pending" then true else false end)
        }
    # pvc_deleted
    - name: pvc_deleted
      executeHookOnEvent: ["Deleted"]
      executeHookOnSynchronization: false
      group: pvc_deleted
      apiVersion: v1
      kind: PersistentVolumeClaim
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      jqFilter: |
        {
          "name": .metadata.name,
          "isDeletionTimestamp": (if .metadata | has("deletionTimestamp") then true else false end)
        }
    - name: pods
      group: pvc_deleted
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: ["d8-smoke-mini"]
      labelSelector:
        matchLabels:
          app: smoke-mini
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      jqFilter: |
        {
          "name": .metadata.name,
          "isPending": (if .status.phase == "Pending" then true else false end)
        }
EOF
}


function __on_group::pvc_modified() {
  for i in $(context::jq -r '.snapshots.pvc_modified | keys[]'); do
    if context::jq -er --argjson i "$i" '.snapshots.pvc_modified[$i].filterResult.isDeletionTimestamp' >/dev/null; then
      pvc_name="$(context::jq -er --argjson i "$i" '.snapshots.pvc_modified[$i].filterResult.name')"
      pod_name="$(echo "$pvc_name" | cut -d- -f2-)"
      if context::jq -er --arg pod_name "$pod_name" '.snapshots.pods[].filterResult | select(.name == $pod_name)'; then
        kubernetes::delete_if_exists::non_blocking "d8-smoke-mini" "pod/$pod_name"
        echo "!!! NOTICE: deleting pod/$pod_name because persistentvolumeclaim/$pvc_name is Terminating !!!"
      fi
    fi
  done
}

function __on_group::pvc_deleted() {
  for i in $(context::jq -r '.snapshots.pods | keys[]'); do
    if context::jq -er --argjson i "$i" '.snapshots.pods[$i].filterResult.isPending'; then
      pod_name="$(context::get snapshots.pods.$i.filterResult.name)"
      pvc_name="disk-$pod_name"
      kubernetes::delete_if_exists::non_blocking "d8-smoke-mini" "pod/$pod_name"
      echo "!!! NOTICE: deleting pod/$pod_name because persistentvolumeclaim/$pvc_name was deleted !!!"
    fi
  done
}

function __main__() {
  effective_storage_class="false"
  current_storage_class="false"

  if context::jq -er '.snapshots.default_sc[] | select(.filterResult == true)' >/dev/null; then
    effective_storage_class="$(context::jq -r '[.snapshots.default_sc[] | select(.filterResult == true)] | first | .object.metadata.name')"
  fi

  if values::has --config global.storageClass; then
    effective_storage_class="$(values::get --config global.storageClass)"
  fi

  if context::has snapshots.pvc.0 ; then
    effective_storage_class="$(context::get snapshots.pvc.0.filterResult.storageClassName)"
    current_storage_class="$effective_storage_class"
  else
    current_storage_class="emptydir"
  fi

  if values::has --config smokeMini.storageClass; then
    effective_storage_class="$(values::get --config smokeMini.storageClass)"
  fi

  values::set smokeMini.internal.effectiveStorageClass "$effective_storage_class"

  if [ "$current_storage_class" != "$effective_storage_class" ]; then
    for i in $(context::jq -r '.snapshots.pvc | keys[]'); do
      pvc_name="$(context::get snapshots.pvc.$i.filterResult.name)"
      kubernetes::delete_if_exists::non_blocking "d8-smoke-mini" "persistentvolumeclaim/$pvc_name"
      echo "!!! NOTICE: storage class changed, deleting persistentvolumeclaim/$pvc_name !!!"
    done
    for i in $(context::jq -r '.snapshots.statefulsets | keys[]'); do
      sts_name="$(context::get snapshots.statefulsets.$i.filterResult)"
      kubernetes::delete_if_exists::non_blocking "d8-smoke-mini" "statefulset/$sts_name"
      echo "!!! NOTICE: storage class changed, deleting statefulset/$sts_name !!!"
    done
  fi
}

hook::run $@
