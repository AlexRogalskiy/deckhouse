{{- define "ingress-controller" }}
{{- $context := index . 0 }}
{{- $crd := index . 1 }}
{{- $name := index . 2 }}

  {{- if ( $context.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1beta2
kind: VerticalPodAutoscaler
metadata:
  name: controller-{{ $name }}
  namespace: d8-ingress-nginx
{{ include "helm_lib_module_labels" (list $context (dict "app" "controller" "name" $name )) | indent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: DaemonSet
    name: controller-{{ $name }}
    {{- if eq $crd.spec.resourcesRequests.mode "VPA" }}
  updatePolicy:
    updateMode: {{ $crd.spec.resourcesRequests.vpa.mode | default "Initial" | quote }}
  resourcePolicy:
    containerPolicies:
    - containerName: controller
      maxAllowed:
        cpu: {{ $crd.spec.resourcesRequests.vpa.cpu.max | default "50m" | quote }}
        memory: {{ $crd.spec.resourcesRequests.vpa.memory.max | default "200Mi" | quote }}
      minAllowed:
        cpu: {{ $crd.spec.resourcesRequests.vpa.cpu.min | default "10m" | quote }}
        memory: {{ $crd.spec.resourcesRequests.vpa.memory.min | default "50Mi" | quote }}
    {{- else }}
  updatePolicy:
    updateMode: "Off"
    {{- end }}
  {{- end }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: controller-{{ $name }}
  namespace: d8-ingress-nginx
{{ include "helm_lib_module_labels" (list $context (dict "app" "controller" "name" $name )) | indent 2 }}
spec:
{{- /* TODO: change to "maxUnavailable: 10%" when PDB percentage will support daemonsets */}}
  minAvailable: 0
  selector:
    matchLabels:
      app: controller
      name: {{ $name }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: controller-{{ $name }}
  namespace: d8-ingress-nginx
{{ include "helm_lib_module_labels" (list $context (dict "app" "controller" "name" $name )) | indent 2 }}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: controller
      name: {{ $name }}
  template:
    metadata:
      labels:
        app: controller
        name: {{ $name }}
    spec:
  {{- if $crd.spec.nodeSelector }}
      nodeSelector:
{{ $crd.spec.nodeSelector | toYaml | indent 8 }}
  {{- else }}
{{- include "helm_lib_node_selector" (tuple $context "frontend") | indent 6 }}
  {{- end }}
  {{- if $crd.spec.tolerations }}
      tolerations:
{{ $crd.spec.tolerations | toYaml | indent 6 }}
  {{- else }}
{{- include "helm_lib_tolerations" (tuple $context "frontend") | indent 6 }}
  {{- end }}
{{- include "helm_lib_priority_class" (tuple $context "cluster-high") | indent 6 }}
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      imagePullSecrets:
      - name: deckhouse-registry
      containers:
      - image: {{ $context.Values.global.modulesImages.registry }}/ingress-nginx/controller-{{ $crd.spec.controllerVersion | replace "." "-" }}:{{ pluck (printf "controller%s" ($crd.spec.controllerVersion | replace "." "")) $context.Values.global.modulesImages.tags.ingressNginx | first }}
        name: controller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
  {{- if semverCompare ">=0.33" ($crd.spec.controllerVersion | default $context.Values.ingressNginx.defaultControllerVersion) }}
    {{- if $crd.spec.geoIP2.maxmindLicenseKey }}
        - name: LUA_USE_GEOIP2
          value: "true"
    {{- end }}
  {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 2
          timeoutSeconds: 5
        args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/{{ $crd.name }}-config
        - --v=2
        - --ingress-class={{ $crd.spec.ingressClass }}
        - --healthz-port=10254
        - --http-port=80
        - --https-port=443
        - --update-status=false
  {{- if $crd.spec.customErrors }}
        - --default-backend-service={{ $crd.spec.customErrors.namespace }}/{{ $crd.spec.customErrors.serviceName }}
  {{- end }}
  {{- if semverCompare ">=0.33" ($crd.spec.controllerVersion | default $context.Values.ingressNginx.defaultControllerVersion) }}
    {{- if $crd.spec.geoIP2.maxmindLicenseKey }}
        - --maxmind-license-key={{ $crd.spec.geoIP2.maxmindLicenseKey }}
      {{- if $crd.spec.geoIP2.maxmindEditionIDs }}
        - --maxmind-edition-ids={{ $crd.spec.geoIP2.maxmindEditionIDs | join "," }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if semverCompare ">=0.26" ($crd.spec.controllerVersion | default $context.Values.ingressNginx.defaultControllerVersion) }}
        lifecycle:
          preStop:
            exec:
              command:
                - /wait-shutdown
  {{- end }}
  {{- if eq $crd.spec.resourcesRequests.mode "Static" }}
        resources:
          requests:
            cpu: {{ $crd.spec.resourcesRequests.static.cpu | default "50m" | quote }}
            memory: {{ $crd.spec.resourcesRequests.static.memory | default "200Mi" | quote }}
  {{- end }}
        ports:
        - containerPort: 80
  {{- if eq $crd.spec.inlet "HostPort"}}
    {{- if $crd.spec.hostPort.httpPort }}
          hostPort: {{ $crd.spec.hostPort.httpPort }}
    {{- end }}
  {{- end }}
  {{- if eq $crd.spec.inlet "HostPortWithProxyProtocol"}}
    {{- if $crd.spec.hostPortWithProxyProtocol.httpPort }}
          hostPort: {{ $crd.spec.hostPortWithProxyProtocol.httpPort }}
    {{- end }}
  {{- end }}
        - containerPort: 443
  {{- if eq $crd.spec.inlet "HostPort"}}
    {{- if $crd.spec.hostPort.httpsPort }}
          hostPort: {{ $crd.spec.hostPort.httpsPort }}
    {{- end }}
  {{- end }}
  {{- if eq $crd.spec.inlet "HostPortWithProxyProtocol"}}
    {{- if $crd.spec.hostPortWithProxyProtocol.httpsPort }}
          hostPort: {{ $crd.spec.hostPortWithProxyProtocol.httpsPort }}
    {{- end }}
  {{- end }}
        volumeMounts:
        - mountPath: /var/lib/nginx/body
          name: client-body-temp-path
        - mountPath: /var/lib/nginx/fastcgi
          name: fastcgi-temp-path
        - mountPath: /var/lib/nginx/proxy
          name: proxy-temp-path
        - mountPath: /var/lib/nginx/scgi
          name: scgi-temp-path
        - mountPath: /var/lib/nginx/uwsgi
          name: uwsgi-temp-path
        - mountPath: /etc/nginx/ssl/client.crt
          name: secret-nginx-auth-tls-crt
          subPath: client.crt
          readOnly: true
        - mountPath: /etc/nginx/ssl/client.key
          name: secret-nginx-auth-tls-key
          subPath: client.key
          readOnly: true
      - image: {{ $context.Values.global.modulesImages.registry }}/ingress-nginx/protobuf-exporter:{{ $context.Values.global.modulesImages.tags.ingressNginx.protobufExporter }}
        name: protobuf-exporter
      - name: kube-rbac-proxy
        image: {{ $context.Values.global.modulesImages.registry }}/common/kube-rbac-proxy:{{ $context.Values.global.modulesImages.tags.common.kubeRbacProxy }}
        args:
        - "--secure-listen-address=$(KUBE_RBAC_PROXY_LISTEN_ADDRESS):10354"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: KUBE_RBAC_PROXY_LISTEN_ADDRESS
          value: "0.0.0.0"
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            upstreams:
            - upstream: http://127.0.0.1:10254/metrics
              path: /controller/metrics
              authorization:
                resourceAttributes:
                  namespace: d8-ingress-nginx
                  apiGroup: apps
                  apiVersion: v1
                  resource: daemonsets
                  subresource: prometheus-controller-metrics
                  name: ingress-nginx
            - upstream: http://127.0.0.1:9091/metrics
              path: /protobuf/metrics
              authorization:
                resourceAttributes:
                  namespace: d8-ingress-nginx
                  apiGroup: apps
                  apiVersion: v1
                  resource: daemonsets
                  subresource: prometheus-protobuf-metrics
                  name: ingress-nginx
        ports:
        - containerPort: 10354
          name: https-metrics
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
      volumes:
      - name: client-body-temp-path
        emptyDir: {}
      - name: fastcgi-temp-path
        emptyDir: {}
      - name: proxy-temp-path
        emptyDir: {}
      - name: scgi-temp-path
        emptyDir: {}
      - name: uwsgi-temp-path
        emptyDir: {}
      - name: secret-nginx-auth-tls-crt
        secret:
          secretName: {{ $crd.name }}-ingress-nginx-auth-tls
          items:
          - key: tls.crt
            path: client.crt
      - name: secret-nginx-auth-tls-key
        secret:
          secretName: {{ $crd.name }}-ingress-nginx-auth-tls
          items:
          - key: tls.key
            path: client.key
{{- end }}


{{- $context := . }}
{{- range $crd := $context.Values.ingressNginx.internal.ingressControllers }}
  {{ include "ingress-controller" (list $context $crd $crd.name ) }}
{{- end }}
