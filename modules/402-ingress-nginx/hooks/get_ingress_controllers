#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: controller
      group: main
      keepFullObjectsInMemory: false
      apiVersion: deckhouse.io/v1alpha1
      kind: IngressNginxController
      queue: /modules/$(module::name::kebab_case)
      jqFilter: |
        .spec.config //= {}
        | .spec.hstsOptions //= {}
        | .spec.geoIP2 //= {}
        | .spec.resourcesRequests //= {}
        | if .spec.resourcesRequests.mode == null then .spec.resourcesRequests.mode = "VPA" else . end
        | .spec.resourcesRequests.vpa //= {}
        | .spec.resourcesRequests.vpa.cpu //= {}
        | .spec.resourcesRequests.vpa.memory //= {}
        | .spec.resourcesRequests.static //= {}
        | if .spec.inlet == "LoadBalancer" then .spec.loadBalancer //= {} else .spec.loadBalancer |= {} end
        | if .spec.inlet == "LoadBalancerWithProxyProtocol" then .spec.loadBalancerWithProxyProtocol //= {} else .spec.loadBalancerWithProxyProtocol |= {} end
        | if .spec.inlet == "HostPort" then .spec.hostPort //= {} else .spec.hostPort |= {} end
        | if .spec.inlet == "HostPortWithProxyProtocol" then .spec.hostPortWithProxyProtocol //= {} else .spec.hostPortWithProxyProtocol |= {} end
        | if .spec.inlet == "HostWithFailover" then .spec.hostWithFailover //= {} else .spec.hostWithFailover |= {} end
        | {"name": .metadata.name, "spec": .spec}
EOF
}

function __main__() {
  if [[ $(context::jq -rc '.snapshots.controller | length') == "0" ]]; then
    values::set ingressNginx.internal.ingressControllers '[]'
    return 0
  fi

  default_controller_version=$(values::get ingressNginx.defaultControllerVersion)
  controllers=$(context::jq -rc --arg default_controller_version "$default_controller_version" '
    [ .snapshots.controller[] | .filterResult | .spec.controllerVersion //= $default_controller_version ]')

  for key in $(jq -rc 'keys[]' <<< "${controllers}"); do
    controller_spec=$(jq -rc --arg key "$key" '.[$key | tonumber]' <<< "${controllers}")
    if [[ $(jq -rc '.spec.acceptRequestsFrom' <<< ${controller_spec}) != "null" ]]; then
      for index in $(jq -rc '.spec.acceptRequestsFrom | keys[]' <<< ${controller_spec}); do

        value=$(jq -rc --arg index "$index" '.spec.acceptRequestsFrom[$index | tonumber]' <<< ${controller_spec})
        regexp=$(rgxg cidr "$value")

        controllers=$(jq -rc '.[$key | tonumber].spec.acceptRequestsFrom[$index | tonumber] = $regexp' \
          --arg key "$key" \
          --arg index "$index" \
          --arg regexp "~${regexp//\\/$''}" \
          <<< ${controllers})
      done
    fi
  done

  values::set ingressNginx.internal.ingressControllers "$controllers"
}

hook::run "$@"
