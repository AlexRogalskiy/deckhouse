diff --git a/internal/ingress/controller/controller.go b/internal/ingress/controller/controller.go
index ff8557004..6802e006d 100644
--- a/internal/ingress/controller/controller.go
+++ b/internal/ingress/controller/controller.go
@@ -511,7 +511,7 @@ func (n *NGINXController) getBackendServers(ingresses []*ingress.Ingress) ([]*in
 			}

 			for _, path := range rule.HTTP.Paths {
-				upsName := upstreamName(ing.Namespace, path.Backend.ServiceName, path.Backend.ServicePort)
+				upsName := upstreamName(ing.Namespace, ing.Name, path.Backend.ServiceName, path.Backend.ServicePort)

 				ups := upstreams[upsName]

@@ -706,11 +706,12 @@ func (n *NGINXController) createUpstreams(data []*ingress.Ingress, du *ingress.B

 		var defBackend string
 		if ing.Spec.Backend != nil {
-			defBackend = upstreamName(ing.Namespace, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)
+			defBackend = upstreamName(ing.Namespace, ing.Name, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)

 			klog.V(3).Infof("Creating upstream %q", defBackend)
 			upstreams[defBackend] = newUpstream(defBackend)

+			upstreams[defBackend].Ingress = &ing.Ingress
 			upstreams[defBackend].UpstreamHashBy.UpstreamHashBy = anns.UpstreamHashBy.UpstreamHashBy
 			upstreams[defBackend].UpstreamHashBy.UpstreamHashBySubset = anns.UpstreamHashBy.UpstreamHashBySubset
 			upstreams[defBackend].UpstreamHashBy.UpstreamHashBySubsetSize = anns.UpstreamHashBy.UpstreamHashBySubsetSize
@@ -764,7 +765,7 @@ func (n *NGINXController) createUpstreams(data []*ingress.Ingress, du *ingress.B
 			}

 			for _, path := range rule.HTTP.Paths {
-				name := upstreamName(ing.Namespace, path.Backend.ServiceName, path.Backend.ServicePort)
+				name := upstreamName(ing.Namespace, ing.Name, path.Backend.ServiceName, path.Backend.ServicePort)

 				if _, ok := upstreams[name]; ok {
 					continue
@@ -772,6 +773,7 @@ func (n *NGINXController) createUpstreams(data []*ingress.Ingress, du *ingress.B

 				klog.V(3).Infof("Creating upstream %q", name)
 				upstreams[name] = newUpstream(name)
+				upstreams[name].Ingress = &ing.Ingress
 				upstreams[name].Port = path.Backend.ServicePort

 				upstreams[name].UpstreamHashBy.UpstreamHashBy = anns.UpstreamHashBy.UpstreamHashBy
@@ -983,7 +985,7 @@ func (n *NGINXController) createServers(data []*ingress.Ingress,
 		}

 		if ing.Spec.Backend != nil {
-			defUpstream := upstreamName(ing.Namespace, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)
+			defUpstream := upstreamName(ing.Namespace, ing.Name, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)

 			if backendUpstream, ok := upstreams[defUpstream]; ok {
 				// use backend specified in Ingress as the default backend for all its rules
@@ -1235,7 +1237,7 @@ func mergeAlternativeBackends(ing *ingress.Ingress, upstreams map[string]*ingres

 	// merge catch-all alternative backends
 	if ing.Spec.Backend != nil {
-		upsName := upstreamName(ing.Namespace, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)
+		upsName := upstreamName(ing.Namespace, ing.Name, ing.Spec.Backend.ServiceName, ing.Spec.Backend.ServicePort)

 		altUps := upstreams[upsName]

@@ -1272,7 +1274,7 @@ func mergeAlternativeBackends(ing *ingress.Ingress, upstreams map[string]*ingres

 	for _, rule := range ing.Spec.Rules {
 		for _, path := range rule.HTTP.Paths {
-			upsName := upstreamName(ing.Namespace, path.Backend.ServiceName, path.Backend.ServicePort)
+			upsName := upstreamName(ing.Namespace, ing.Name, path.Backend.ServiceName, path.Backend.ServicePort)

 			altUps := upstreams[upsName]

diff --git a/internal/ingress/controller/nginx.go b/internal/ingress/controller/nginx.go
index 0cc1bbe34..4416028e1 100644
--- a/internal/ingress/controller/nginx.go
+++ b/internal/ingress/controller/nginx.go
@@ -35,6 +35,8 @@ import (
 	"text/template"
 	"time"

+	"k8s.io/api/networking/v1beta1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	proxyproto "github.com/armon/go-proxyproto"
 	"github.com/eapache/channels"
 	apiv1 "k8s.io/api/core/v1"
@@ -960,8 +962,12 @@ func configureBackends(rawBackends []*ingress.Backend) error {

 	for i, backend := range rawBackends {
 		var service *apiv1.Service
+		var v1beta1ingress *v1beta1.Ingress
 		if backend.Service != nil {
-			service = &apiv1.Service{Spec: backend.Service.Spec}
+			service = &apiv1.Service{ObjectMeta: metav1.ObjectMeta{Name: backend.Service.ObjectMeta.Name}, Spec: backend.Service.Spec}
+		}
+		if backend.Ingress != nil {
+			v1beta1ingress = &v1beta1.Ingress{ObjectMeta: metav1.ObjectMeta{Name: backend.Ingress.ObjectMeta.Name}}
 		}
 		luaBackend := &ingress.Backend{
 			Name:                 backend.Name,
@@ -971,6 +977,7 @@ func configureBackends(rawBackends []*ingress.Backend) error {
 			UpstreamHashBy:       backend.UpstreamHashBy,
 			LoadBalancing:        backend.LoadBalancing,
 			Service:              service,
+			Ingress:              v1beta1ingress,
 			NoServer:             backend.NoServer,
 			TrafficShapingPolicy: backend.TrafficShapingPolicy,
 			AlternativeBackends:  backend.AlternativeBackends,
diff --git a/internal/ingress/controller/util.go b/internal/ingress/controller/util.go
index 56273f639..80aa82be5 100644
--- a/internal/ingress/controller/util.go
+++ b/internal/ingress/controller/util.go
@@ -43,8 +43,8 @@ func newUpstream(name string) *ingress.Backend {
 }

 // upstreamName returns a formatted upstream name based on namespace, service, and port
-func upstreamName(namespace string, service string, port intstr.IntOrString) string {
-	return fmt.Sprintf("%v-%v-%v", namespace, service, port.String())
+func upstreamName(namespace string, ingress string, service string, port intstr.IntOrString) string {
+	return fmt.Sprintf("%v-%v-%v-%v", namespace, ingress, service, port.String())
 }

 // sysctlSomaxconn returns the maximum number of connections that can be queued
diff --git a/internal/ingress/types.go b/internal/ingress/types.go
index 63714d739..97a0a3984 100644
--- a/internal/ingress/types.go
+++ b/internal/ingress/types.go
@@ -84,6 +84,7 @@ type Backend struct {
 	// Name represents an unique apiv1.Service name formatted as <namespace>-<name>-<port>
 	Name    string             `json:"name"`
 	Service *apiv1.Service     `json:"service,omitempty"`
+	Ingress *networking.Ingress `json:"ingress,omitempty"`
 	Port    intstr.IntOrString `json:"port"`
 	// SSLPassthrough indicates that Ingress controller will delegate TLS termination to the endpoints.
 	SSLPassthrough bool `json:"sslPassthrough"`
diff --git a/internal/ingress/zz_generated.deepcopy.go b/internal/ingress/zz_generated.deepcopy.go
index e8dfd1903..5eecbfa6f 100644
--- a/internal/ingress/zz_generated.deepcopy.go
+++ b/internal/ingress/zz_generated.deepcopy.go
@@ -22,6 +22,7 @@ package ingress

 import (
 	v1 "k8s.io/api/core/v1"
+	v1beta1 "k8s.io/api/networking/v1beta1"
 )

 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
@@ -32,6 +33,11 @@ func (in *Backend) DeepCopyInto(out *Backend) {
 		*out = new(v1.Service)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Ingress != nil {
+		in, out := &in.Ingress, &out.Ingress
+		*out = new(v1beta1.Ingress)
+		(*in).DeepCopyInto(*out)
+	}
 	out.Port = in.Port
 	if in.Endpoints != nil {
 		in, out := &in.Endpoints, &out.Endpoints
