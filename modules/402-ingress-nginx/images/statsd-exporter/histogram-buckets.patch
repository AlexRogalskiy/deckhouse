diff --git a/exporter.go b/exporter.go
index c252e82..040bf8c 100644
--- a/exporter.go
+++ b/exporter.go
@@ -176,6 +176,48 @@ func (b *Exporter) handleEvent(event Event) {
 			return
 		}

+		// If counter mapped to histogram timer, increase all buckets counters above the value
+		if mapping.TimerType == mapper.TimerTypeHistogram {
+			bucket, ok := prometheusLabels["le"]
+			if !ok {
+				log.Errorf(regErrF, metricName, "No bucket label specified for: %s %v", metricName, prometheusLabels)
+				return
+			}
+
+			if bucket != "+Inf" {
+				bucketNumber, err := strconv.ParseFloat(bucket, 64)
+				if err != nil {
+					log.Errorf(regErrF, metricName, "Wrong bucket value: %s %v", bucket, err)
+					return
+				}
+
+				for _, histogramBucket := range mapping.Buckets {
+					if histogramBucket >= bucketNumber {
+						prometheusLabels["le"] = strconv.FormatFloat(histogramBucket, 'f', -1, 64)
+						counter, err := b.registry.getCounter(metricName, prometheusLabels, help, mapping)
+						if err == nil {
+							counter.Add(event.Value())
+							eventStats.WithLabelValues("counter").Inc()
+						} else {
+							log.Debugf(regErrF, metricName, err)
+							conflictingEventStats.WithLabelValues("counter").Inc()
+						}
+					}
+				}
+			}
+
+			prometheusLabels["le"] = "+Inf"
+			counter, err := b.registry.getCounter(metricName, prometheusLabels, help, mapping)
+			if err == nil {
+				counter.Add(event.Value())
+				eventStats.WithLabelValues("counter").Inc()
+			} else {
+				log.Debugf(regErrF, metricName, err)
+				conflictingEventStats.WithLabelValues("counter").Inc()
+			}
+			return
+		}
+
 		counter, err := b.registry.getCounter(metricName, prometheusLabels, help, mapping)
 		if err == nil {
 			counter.Add(event.Value())
