- name: kubernetes.ingress-nginx.info
  rules:
  - record: ingress_nginx_overall_info
    expr: count({__name__=~"ingress_nginx_overall_.*", __name__!="ingress_nginx_overall_info"}) by (job,  controller, app, node, endpoint, content_kind, namespace, vhost) * 0 + 1
  - record: ingress_nginx_detail_info
    expr: count({__name__=~"ingress_nginx_detail_.*", __name__!="ingress_nginx_detail_info", __name__!~"ingress_nginx_detail_backend_.*"}) by (job, controller, app, node, endpoint, content_kind, namespace, ingress, service, service_port, vhost, location) * 0 + 1
  - record: ingress_nginx_detail_backend_info
    expr: count({__name__=~"ingress_nginx_detail_backend_.*", __name__!="ingress_nginx_detail_backend_info"}) by (job, controller, app, node, endpoint, namespace, ingress, service, service_port, vhost, location, pod_ip) * 0 + 1
  - alert: NginxIngressConfigTestFailed
    expr: nginx_ingress_controller_config_last_reload_successful == 0
    for: 10m
    labels:
      impact: marginal
      likelihood: certain
    annotations:
      plk_protocol_version: "1"
      plk_markup_format: markdown
      description: |-
        Ingress controller {{ $labels.controller }} in namespace {{ $labels.controller_namespace }} failed config test (nginx -t)
        Consider the following:
        1. Check controllers log:
        `kubectl -n {{ $labels.controller_namespace }} logs {{ $labels.controller_pod }} -c ingress-nginx-controller`
        2. Find the newest ingress on cluster:
        `kubectl get ingress --all-namespaces --sort-by="metadata.creationTimestamp"`
        3. Most likely an error in configuration-snippet or server-snippet
      summary: >
        Config test failed on nginx ingress {{ $labels.controller }} in {{ $labels.controller_namespcae }} namespace.
  - alert: NginxIngressSslWillExpire
    expr: count by (job, controller, class, host, namespace) (nginx_ingress_controller_ssl_expire_time_seconds < (time() + (14 * 24 * 3600)))
    for: 1h
    labels:
      severity_level: "5"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_incident_initial_status: "todo"
      description: |-
        SSL certificate for {{ $labels.host }} in {{ $labels.namespace }} will expire in less than 2 weeks
      summary: >
        Certificate expires soon.
  - alert: NginxIngressSslExpired
    expr: count by (job, controller, class, host, namespace) (nginx_ingress_controller_ssl_expire_time_seconds < time())
    for: 1m
    labels:
      severity_level: "4"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_incident_initial_status: "todo"
      description: |-
        SSL certificate for {{ $labels.host }} in {{ $labels.namespace }} has expired. https://{{ $labels.host }} version of site doesn't work!
      summary: >
        Certificate has expired
  - alert: NginxIngressProtobufExporterHasErrors
    expr: sum by (type, node, controller) (increase(protobuf_exporter_errors_total[5m])) > 0
    for: 10m
    labels:
      severity_level: "8"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      description: |-
        Ingress Nginx sidecar-container with protobuf_exporter has {{ $labels.type }} errors.

        Please check ingress-controller logs:
        `kubectl -n d8-ingress-nginx logs $(kubectl -n d8-ingress-nginx get pods -l app=controller,name={{ $labels.controller }} -o wide | grep {{ $labels.node }} | awk '{print $1}') -c protobuf-exporter`
      summary: >
        Ingress Nginx sidecar-container with protobuf_exporter has {{ $labels.type }} errors.
  - alert: D8NginxIngressDeprecated
    expr: max(d8_nginx_ingress_deprecated > 0)
    labels:
      severity_level: "9"
      # after migrating alert to new module, we have to use old module name in labels to
      # avoid creating new events in Polk
      d8_module: nginx_ingress
    annotations:
      plk_protocol_version: "1"
      plk_markup_format: "markdown"
      plk_incident_initial_status: "todo"
      description: |
        Модуль nginx-ingress объявлен устаревшим и больше не поддерживается.

        Необходимо использовать новый модуль ingress-nginx.
        * Выберите подходящий Inlet внимательно прочитав документацию.
        * Убедитесь что в кластере не используется rewrite-target-migration (rwr).
        * По окончании миграции отключите модуль nginxIngress в configmap deckhouse `nginxIngressEnabled: "false"`
      summary: |
        В кластере используется устаревший модуль nginx-ingress
  - alert: D8IngressNginxControllerVersionDeprecated
    expr: sum by (controller_name, controller_version) (d8_ingress_nginx_controller{controller_version=~"0.25|0.26"})
    labels:
      tier: cluster
      severity_level: "9"
    annotations:
      plk_protocol_version: "1"
      plk_markup_format: markdown
      plk_incident_initial_status: "todo"
      description: |-
        Found deprecated Ingress Nginx controller version: {{`{{$labels.controller_version}}`}}
        Please upgrade {{`{{$labels.controller_name}}`}} IngressNginxController
        This version deprecated and does not have newest improvements and patches
      summary: >
        Deprecated version of IngressNginxController {{`{{$labels.controller_version}}`}} found
