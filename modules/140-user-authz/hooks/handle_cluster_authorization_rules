#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: ccr
      queue: /modules/$(module::name::kebab_case)
      includeSnapshotsFrom: ["ccr"]
      keepFullObjectsInMemory: true
      kind: ClusterRole
      apiVersion: 'rbac.authorization.k8s.io/v1'
      jqFilter: |
        select(
          .metadata.annotations."user-authz.deckhouse.io/access-level" == ("User", "PrivilegedUser", "Editor", "Admin", "ClusterEditor", "ClusterAdmin")
        ) | .metadata.annotations."user-authz.deckhouse.io/access-level" as \$accessLevel | ((\$accessLevel[0:1] | ascii_downcase) + \$accessLevel[1:])
    - name: car
      queue: /modules/$(module::name::kebab_case)
      includeSnapshotsFrom: ["car"]
      keepFullObjectsInMemory: true
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterAuthorizationRule
EOF
}

function __on_kubernetes::ccr() {
  customClusterRoles="$(
    context::jq -r '[.snapshots.ccr[] | select(.filterResult != null)] | reduce .[] as $i
    ({"user": [], "privilegedUser":[], "editor": [], "admin": [], "clusterEditor": [], "clusterAdmin": []}; .[$i.filterResult] += [$i.object.metadata.name])
    | {
      user:           (.user | unique),
      privilegedUser: (.user + .privilegedUser | unique),
      editor:         (.user + .privilegedUser + .editor | unique),
      admin:          (.user + .privilegedUser + .editor + .admin | unique),
      clusterEditor:  (.user + .privilegedUser + .editor + .clusterEditor | unique),
      clusterAdmin:   (.user + .privilegedUser + .editor + .admin + .clusterEditor + .clusterAdmin | unique)
    }')"
  values::set userAuthz.internal.customClusterRoles "${customClusterRoles}"
}

function __on_kubernetes::car() {
  values::set userAuthz.internal.crds "$(context::jq -r '[.snapshots.car[] | {"name": .object.metadata.name, "spec": .object.spec}]')"
  deprecated_cluster_authorization_rule_metric="$(context::jq -r '.snapshots.car[].object | select(.spec.accessLevel == "Master" or .spec.accessLevel == "Deploy")')"
  if [[ ! -z "${deprecated_cluster_authorization_rule_metric}" ]] ; then
    echo '{"name":"d8_deprecated_cluster_authorization_rule", "set": 1}' >> $METRICS_PATH
  else
    echo '{"name":"d8_deprecated_cluster_authorization_rule", "set": 0}' >> $METRICS_PATH
  fi
}

hook::run "$@"
