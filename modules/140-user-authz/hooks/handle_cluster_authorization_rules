#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: ccr
      includeSnapshotsFrom: ["ccr"]
      kind: ClusterRole
      apiVersion: 'rbac.authorization.k8s.io/v1'
      jqFilter: |
        select(
          .metadata.annotations."user-authz.deckhouse.io/access-level" == ("User", "PrivilegedUser", "Editor", "Admin", "ClusterEditor", "ClusterAdmin")
        ) | .metadata.annotations."user-authz.deckhouse.io/access-level" as \$accessLevel | ((\$accessLevel[0:1] | ascii_downcase) + \$accessLevel[1:])
    - name: car
      includeSnapshotsFrom: ["car"]
      apiVersion: deckhouse.io/v1alpha1
      kind: ClusterAuthorizationRule
EOF
}

function __on_kubernetes::ccr() {
  customClusterRoles="$(
    context::jq -r '[.snapshots.ccr[] | select(.filterResult != null)] | reduce .[] as $i
    ({"user": [], "privilegedUser":[], "editor": [], "admin": [], "clusterEditor": [], "clusterAdmin": []}; .[$i.filterResult] += [$i.object.metadata.name])
    | {
      user:           (.user | unique),
      privilegedUser: (.user + .privilegedUser | unique),
      editor:         (.user + .privilegedUser + .editor | unique),
      admin:          (.user + .privilegedUser + .editor + .admin | unique),
      clusterEditor:  (.user + .privilegedUser + .editor + .clusterEditor | unique),
      clusterAdmin:   (.user + .privilegedUser + .editor + .admin + .clusterEditor + .clusterAdmin | unique)
    }')"
  values::set userAuthz.internal.customClusterRoles "${customClusterRoles}"
}

function __on_kubernetes::car() {
  values::set userAuthz.internal.crds "$(context::jq -r '[.snapshots.car[] | {"name": .object.metadata.name, "spec": .object.spec}]')"
}

hook::run "$@"
