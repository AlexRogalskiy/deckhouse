#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
{
  "beforeHelm": 10,
  "onKubernetesEvent": [
    {
      "kind": "ClusterRole",
      "jqFilter": "[.metadata.name, .metadata.annotations]"
    }
  ]
}
EOF
}

function __main__() {
  customClusterRoles=$(
    kubectl get clusterrole -o json | jq '
      [
        .items[]
        | select(
          .metadata.annotations."user-authz.deckhouse.io/access-level" == ("User", "PrivilegedUser", "Editor", "Admin", "ClusterEditor", "ClusterAdmin")
        )
        | {
          level: (
            .metadata.annotations."user-authz.deckhouse.io/access-level" as $accessLevel | ($accessLevel[0:1] | ascii_downcase) + $accessLevel[1:]
          ),
          name: .metadata.name
        }
      ]
      | reduce .[] as $i ({"user": [], "privilegedUser":[], "editor": [], "admin": [], "clusterEditor": [], "clusterAdmin": []}; .[$i.level] += [$i.name] )
      | {
        user:   (.user | unique),
        privilegedUser: (.user + .privilegedUser | unique),
        editor: (.user + .privilegedUser + .editor | unique),
        admin:  (.user + .privilegedUser + .editor + .admin | unique),
        clusterEditor: (.user + .privilegedUser + .editor + .clusterEditor | unique),
        clusterAdmin:  (.user + .privilegedUser + .editor + .admin + .clusterEditor + .clusterAdmin | unique)
      }')
  values::set userAuthz.internal.customClusterRoles "$customClusterRoles"
}

hook::run "$@"
