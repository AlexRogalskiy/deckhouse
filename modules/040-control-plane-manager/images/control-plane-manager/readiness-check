#!/bin/bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# shellcheck disable=SC2174

if ! [ -f /tmp/ready ]; then
  echo "control-plane-manager converge is not completed" 1>&2
  exit 1
fi

timeout_in_seconds=3

function kube_token() {
    cat /var/run/secrets/kubernetes.io/serviceaccount/token
}

function etcd_members() {
  dial_timeout=1
  command_timeout=$(($timeout_in_seconds-$dial_timeout))

  etcdctl member list \
    --cacert=/etc/kubernetes/pki/etcd/ca.crt \
    --key=/etc/kubernetes/pki/etcd/healthcheck-client.key \
    --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \
    --dial-timeout="${dial_timeout}s" \
    --command-timeout="${command_timeout}s" \
    -w simple

    return $?
}

function etcd() {
  if ! members=$(etcd_members); then
    return 1
  fi
  ## Members example output ##
  # | ID            | STATUS |       NAME      |          PEER ADDRS         |         CLIENT ADDRS        | IS LEARNER |
  # be3d2c147b0ac2b8, started, sandbox-master-0, https://192.168.199.169:2380, https://192.168.199.169:2379, false
  ##
  # first, we need to check member with node ip is present in members list
  # second, we need to check that member with node ip is started
  # third, we need to check that member is NOT learner
  # see https://etcd.io/docs/v3.3/learning/learner/
  # until member is in learning it cannot participate in quorum
  # But in current in json output we cannot get 'isLearner' and 'Status' flags
  # We use it with caution because "started" and "false" can part of name
  # But main check is verify by IP
  echo "$members" | grep "$MY_IP" | grep "started" | grep "false" > /dev/null

  return $?
}


function api_server() {
  curl \
     --silent --fail -sS \
     --max-time "$timeout_in_seconds" \
     -H "Authorization: Bearer $(kube_token)" \
     --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
     "https://$MY_IP:6443/version" > /dev/null 2> /dev/null

  return $?
}

for component in api_server etcd; do
  if ! $component; then
    echo "$component is not available" 1>&2
    exit 1
  fi
done

exit 0
