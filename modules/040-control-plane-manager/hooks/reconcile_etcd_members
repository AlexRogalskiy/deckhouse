#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    schedule:
    - crontab: "*/5 * * * *"
      group: reconcile_etcd_members
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
      allowFailure: true
    kubernetes:
    - name: kubeadm_etcd_pods_ips
      group: reconcile_etcd_members
      keepFullObjectsInMemory: false
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
      allowFailure: true
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: etcd
          tier: control-plane
      jqFilter: |
        {
          client_url: (.metadata.annotations."kubeadm.kubernetes.io/etcd.advertise-client-urls" // ""),
          member_name: (.spec.containers[0].command[] | select(contains("--name=")) | split("=")[1] // "")
        }
    - name: etcd_certs
      group: reconcile_etcd_members
      keepFullObjectsInMemory: false
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
      allowFailure: true
      executeHookOnSynchronization: false
      executeHookOnEvent: []
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-pki]
      jqFilter: |
        {
          "ca.crt": (if .data."etcd-ca.crt" then .data."etcd-ca.crt" | @base64d else "" end),
          "client.crt": (if .data."etcd-ca.crt" then .data."etcd-ca.crt" | @base64d else "" end),
          "client.key": (if .data."etcd-ca.key" then .data."etcd-ca.key" | @base64d else "" end)
        }
EOF
}

function set_etcdctl_credentials() {
  cacert="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."ca.crt"')"
  cert="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."client.crt"')"
  key="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."client.key"')"

  certs_dir="/tmp/control-plane-manager/discover_etcd_servers/etcd-certs"
  ETCDCTL_CACERT="$certs_dir/ca.crt"
  ETCDCTL_CERT="$certs_dir/client.crt"
  ETCDCTL_KEY="$certs_dir/client.key"

  mkdir -p "$certs_dir"
  echo "$cacert" > "$ETCDCTL_CACERT"
  echo "$cert" > "$ETCDCTL_CERT"
  echo "$key" > "$ETCDCTL_KEY"

  ETCDCTL_ENDPOINTS="$1"

  if [[ -z "$ETCDCTL_ENDPOINTS" ]]; then
    echo "ERROR: Failed to find etcdctl endpoints"
    exit 1
  fi

  if [[ ! -s "$ETCDCTL_CERT" || ! -s "$ETCDCTL_KEY" || ! -s "$ETCDCTL_CACERT" ]]; then
    echo "etcd certs not present in a snapshot storage"
    exit 1
  fi

  export ETCDCTL_API=3
  export ETCDCTL_CACERT
  export ETCDCTL_CERT
  export ETCDCTL_KEY
  export ETCDCTL_ENDPOINTS
}

function __main__() {
  if zero_pods="$(context::jq -r '[.snapshots.kubeadm_etcd_pods_ips[].filterResult] | length == 0')" >/dev/null; then
    if [[ "$zero_pods" == "true" ]]; then
      >&2 echo 'No etcd Pods found in snapshot, skipping iteration'
      return 0
    fi
  else
    return 1
  fi

  members_json="$(context::jq -re '[.snapshots.kubeadm_etcd_pods_ips[].filterResult |
                                      if .client_url == "" then ("client_url should not be empty\n" | halt_error) else . end |
                                      if .member_name == "" then ("member_name should not be empty\n" | halt_error) else . end
                                    ]')"

  eps="$(jq -rn --argjson members_json "$members_json" '[$members_json | .[].client_url]')"
  values::set controlPlaneManager.internal.etcdServers "$eps"

  joined_eps="$(jq -rn --argjson eps "$eps" '$eps | join(",")')"
  set_etcdctl_credentials "$joined_eps"

  existing_members="$(etcdctl member list)"
  existing_members_names="$(echo "$existing_members" | cut -d',' -f3 | sort)"
  existing_members_names="${existing_members_names//[[:blank:]]/}"
  names="$(jq -rn --argjson members_json "$members_json" '$members_json | .[].member_name')"
  new_members="$(echo "$names" | sort)"

  remove_list="$(comm -23 <(echo "$existing_members_names") <(echo "$new_members"))"
  IFS=$'\n'
  for member in $remove_list; do
    unset IFS
    echo "Removing $member from cluster"
    member_hash="$(echo "$existing_members" | grep "$member" | cut -d',' -f1)"
    etcdctl member remove "$member_hash"
  done
  unset IFS
}

hook::run "$@"
