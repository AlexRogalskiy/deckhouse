#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    schedule:
    - crontab: "*/5 * * * *"
      group: reconcile_etcd_members
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
    kubernetes:
    - name: master_nodes
      group: reconcile_etcd_members
      keepFullObjectsInMemory: false
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
      apiVersion: v1
      kind: Node
      labelSelector:
        matchLabels:
          node-role.kubernetes.io/master: ""
      jqFilter: |
        {
          ip: (.status.addresses // [] |
          (map(select(.type == "InternalIP"))[0].address) as \$internal_ip |
          (map(select(.type == "ExternalIP"))[0].address) as \$external_ip |
          \$internal_ip // \$external_ip),
          node_name: (.metadata.name)
        }
    - name: etcd_certs
      group: reconcile_etcd_members
      keepFullObjectsInMemory: false
      queue: /modules/$(module::name::kebab_case)/reconcile_etcd_members
      executeHookOnSynchronization: false
      executeHookOnEvent: []
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-pki]
      jqFilter: |
        {
          "ca.crt": (if .data."etcd-ca.crt" then .data."etcd-ca.crt" | @base64d else "" end),
          "client.crt": (if .data."etcd-ca.crt" then .data."etcd-ca.crt" | @base64d else "" end),
          "client.key": (if .data."etcd-ca.key" then .data."etcd-ca.key" | @base64d else "" end)
        }
EOF
}

function set_etcdctl_credentials() {
  cacert="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."ca.crt"')"
  cert="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."client.crt"')"
  key="$(context::jq -r '.snapshots.etcd_certs[0].filterResult."client.key"')"

  certs_dir="/tmp/control-plane-manager/discover_etcd_servers/etcd-certs"
  ETCDCTL_CACERT="$certs_dir/ca.crt"
  ETCDCTL_CERT="$certs_dir/client.crt"
  ETCDCTL_KEY="$certs_dir/client.key"

  mkdir -p "$certs_dir"
  echo "$cacert" > "$ETCDCTL_CACERT"
  echo "$cert" > "$ETCDCTL_CERT"
  echo "$key" > "$ETCDCTL_KEY"

  ETCDCTL_ENDPOINTS="$1"

  if [[ -z "$ETCDCTL_ENDPOINTS" ]]; then
    echo "ERROR: Failed to find etcdctl endpoints"
    exit 1
  fi

  if [[ ! -s "$ETCDCTL_CERT" || ! -s "$ETCDCTL_KEY" || ! -s "$ETCDCTL_CACERT" ]]; then
    echo "etcd certs not present in a snapshot storage"
    exit 1
  fi

  export ETCDCTL_API=3
  export ETCDCTL_CACERT
  export ETCDCTL_CERT
  export ETCDCTL_KEY
  export ETCDCTL_ENDPOINTS
}

function __main__() {
  if zero_nodes="$(context::jq -r '[.snapshots.master_nodes[].filterResult] | length == 0')" >/dev/null; then
    if [[ "$zero_nodes" == "true" ]]; then
      >&2 echo 'No master Nodes found in snapshot, skipping iteration'
      return 0
    fi
  else
    return 1
  fi

  discovered_master_nodes="$(context::jq -re '[
                                      .snapshots.master_nodes[].filterResult |
                                      if .ip == "" then ("ip should not be empty\n" | halt_error) else . end |
                                      if .node_name == "" then ("node_name should not be empty\n" | halt_error) else . end
                                    ]
                                  ')"

  eps="$(jq -rn --argjson discovered_master_nodes "$discovered_master_nodes" '[$discovered_master_nodes | "https://" + .[].ip + ":2379"]')"
  values::set controlPlaneManager.internal.etcdServers "$eps"

  joined_eps="$(jq -rn --argjson eps "$eps" '$eps | join(",")')"
  set_etcdctl_credentials "$joined_eps"

  existing_members="$(etcdctl --insecure-skip-tls-verify=true member list)"
  existing_members_names="$(echo "$existing_members" | cut -d',' -f3 | sort)"
  existing_members_names="${existing_members_names//[[:blank:]]/}"

  discovered_master_names="$(jq -rn --argjson discovered_master_nodes "$discovered_master_nodes" '$discovered_master_nodes | .[].node_name' | sort)"
  if external_members_names="$(values::jq -re '.controlPlaneManager.etcd.externalMembersNames[]' 2>/dev/null)"; then
    discovered_master_names="${discovered_master_names}"$'\n'"${external_members_names}"
  fi

  remove_list="$(comm -23 <(echo "$existing_members_names") <(echo "$discovered_master_names"))"
  if [[ "$remove_list" == "$existing_members_names" ]]; then
    >&2 echo "Attempting do delete every single member from etcd cluster. Exiting."
    return 1
  fi

  IFS=$'\n'
  for member in $remove_list; do
    unset IFS
    echo "Removing $member from cluster"
    member_hash="$(echo "$existing_members" | grep "(?<=\s)$member(?=,)" | cut -d',' -f1)"
    etcdctl --insecure-skip-tls-verify=true member remove "$member_hash"
  done
  unset IFS
}

hook::run "$@"
