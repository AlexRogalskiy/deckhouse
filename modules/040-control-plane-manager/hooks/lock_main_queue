#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  execute_hook_on_synchronization="false"
  if [ -n "${D8_IS_TESTS_ENVIRONMENT-}" ]; then
    # The current test suite does not support snapshots while running
    # `afterHelm` with `executeHookOnSynchronization: false`.
    execute_hook_on_synchronization="true"
  fi
  cat << EOF
    configVersion: v1
    afterHelm: 20
    kubernetes:
    - name: cpm_pods
      group: main
      keepFullObjectsInMemory: false
      executeHookOnSynchronization: ${execute_hook_on_synchronization}
      executeHookOnEvent: []
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          app: d8-control-plane-manager
      jqFilter: |
        {
          "isReady": (if .status.conditions then .status.conditions[] | select(.type == "Ready") | .status == "True" else false end),
          "nodeName": (.spec.nodeName // null),
          "generation": (.metadata.labels."pod-template-generation" // null)
        }
    - name: cpm_ds
      group: main
      keepFullObjectsInMemory: false
      executeHookOnSynchronization: ${execute_hook_on_synchronization}
      executeHookOnEvent: []
      apiVersion: apps/v1
      kind: DaemonSet
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-control-plane-manager]
      jqFilter: |
        {
          "generation": (.metadata.generation // null)
        }

EOF
}

function lock_with_error() {
  >&2 echo "Lock the main queue: ${1}."
  return 1
}

function __main__() {
  # Lock deckhouse main queue while the control-plane is updating.

  if ! ds_generation="$(context::jq -er '.snapshots.cpm_ds[0].filterResult.generation')"; then
    lock_with_error "no control-plane-manager DaemonSet found"
  fi

  if context::jq -e --arg ds_generation "$ds_generation" '[.snapshots.cpm_pods[].filterResult | select(.nodeName and .generation == $ds_generation)] | any | not' >/dev/null; then
      lock_with_error "waiting for control-plane-manager Pods being rolled out"
  fi

  if context::jq -e --arg ds_generation "$ds_generation" '[.snapshots.cpm_pods[].filterResult | select(.nodeName and .generation == $ds_generation and (.isReady | not))] | any' >/dev/null; then
    lock_with_error "waiting for all control-plane-manager Pods to become Ready"
  fi
}

hook::run "$@"
