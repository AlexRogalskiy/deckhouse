diff --git a/cluster-autoscaler/core/scale_up.go b/cluster-autoscaler/core/scale_up.go
index 92cc172c..57320ca3 100644
--- a/cluster-autoscaler/core/scale_up.go
+++ b/cluster-autoscaler/core/scale_up.go
@@ -23,7 +23,7 @@ import (
 	"time"
 
 	apiv1 "k8s.io/api/core/v1"
-	extensionsv1 "k8s.io/api/extensions/v1beta1"
+	appsv1 "k8s.io/api/apps/v1"
 	"k8s.io/apimachinery/pkg/util/sets"
 	"github.com/gardener/autoscaler/cluster-autoscaler/cloudprovider"
 	"github.com/gardener/autoscaler/cluster-autoscaler/clusterstate"
@@ -245,7 +245,7 @@ var (
 // false if it didn't and error if an error occurred. Assumes that all nodes in the cluster are
 // ready and in sync with instance groups.
 func ScaleUp(context *context.AutoscalingContext, processors *ca_processors.AutoscalingProcessors, clusterStateRegistry *clusterstate.ClusterStateRegistry, unschedulablePods []*apiv1.Pod,
-	nodes []*apiv1.Node, daemonSets []*extensionsv1.DaemonSet) (*status.ScaleUpStatus, errors.AutoscalerError) {
+	nodes []*apiv1.Node, daemonSets []*appsv1.DaemonSet) (*status.ScaleUpStatus, errors.AutoscalerError) {
 	// From now on we only care about unschedulable pods that were marked after the newest
 	// node became available for the scheduler.
 	if len(unschedulablePods) == 0 {
diff --git a/cluster-autoscaler/core/static_autoscaler.go b/cluster-autoscaler/core/static_autoscaler.go
index d1e7f3ed..66379110 100644
--- a/cluster-autoscaler/core/static_autoscaler.go
+++ b/cluster-autoscaler/core/static_autoscaler.go
@@ -18,7 +18,7 @@ package core
 
 import (
 	"time"
-
+	"k8s.io/apimachinery/pkg/labels"
 	"github.com/gardener/autoscaler/cluster-autoscaler/cloudprovider"
 	"github.com/gardener/autoscaler/cluster-autoscaler/clusterstate"
 	"github.com/gardener/autoscaler/cluster-autoscaler/clusterstate/utils"
@@ -258,7 +258,7 @@ func (a *StaticAutoscaler) RunOnce(currentTime time.Time) errors.AutoscalerError
 		scaleDownForbidden = true
 		glog.V(1).Info("Unschedulable pods are very new, waiting one iteration for more")
 	} else {
-		daemonsets, err := a.ListerRegistry.DaemonSetLister().List()
+		daemonsets, err := a.ListerRegistry.DaemonSetLister().List(labels.Everything())
 		if err != nil {
 			glog.Errorf("Failed to get daemonset list")
 			return errors.ToAutoscalerError(errors.ApiCallError, err)
diff --git a/cluster-autoscaler/core/utils.go b/cluster-autoscaler/core/utils.go
index 9497bcf4..4fc9f7cd 100644
--- a/cluster-autoscaler/core/utils.go
+++ b/cluster-autoscaler/core/utils.go
@@ -38,7 +38,7 @@ import (
 	scheduler_util "github.com/gardener/autoscaler/cluster-autoscaler/utils/scheduler"
 
 	apiv1 "k8s.io/api/core/v1"
-	extensionsv1 "k8s.io/api/extensions/v1beta1"
+	appsv1 "k8s.io/api/apps/v1"
 	apiequality "k8s.io/apimachinery/pkg/api/equality"
 	kube_client "k8s.io/client-go/kubernetes"
 	kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
@@ -219,7 +219,7 @@ func CheckPodsSchedulableOnNode(context *context.AutoscalingContext, pods []*api
 //
 // TODO(mwielgus): Review error policy - sometimes we may continue with partial errors.
 func GetNodeInfosForGroups(nodes []*apiv1.Node, cloudProvider cloudprovider.CloudProvider, kubeClient kube_client.Interface,
-	daemonsets []*extensionsv1.DaemonSet, predicateChecker *simulator.PredicateChecker) (map[string]*schedulercache.NodeInfo, errors.AutoscalerError) {
+	daemonsets []*appsv1.DaemonSet, predicateChecker *simulator.PredicateChecker) (map[string]*schedulercache.NodeInfo, errors.AutoscalerError) {
 	result := make(map[string]*schedulercache.NodeInfo)
 
 	// processNode returns information whether the nodeTemplate was generated and if there was an error.
diff --git a/cluster-autoscaler/utils/daemonset/daemonset.go b/cluster-autoscaler/utils/daemonset/daemonset.go
index ca6784c9..13d4ad1d 100644
--- a/cluster-autoscaler/utils/daemonset/daemonset.go
+++ b/cluster-autoscaler/utils/daemonset/daemonset.go
@@ -23,12 +23,12 @@ import (
 	"github.com/gardener/autoscaler/cluster-autoscaler/simulator"
 
 	apiv1 "k8s.io/api/core/v1"
-	extensionsv1 "k8s.io/api/extensions/v1beta1"
+	appsv1 "k8s.io/api/apps/v1"
 	schedulercache "k8s.io/kubernetes/pkg/scheduler/cache"
 )
 
 // GetDaemonSetPodsForNode returns daemonset nodes for the given pod.
-func GetDaemonSetPodsForNode(nodeInfo *schedulercache.NodeInfo, daemonsets []*extensionsv1.DaemonSet, predicateChecker *simulator.PredicateChecker) []*apiv1.Pod {
+func GetDaemonSetPodsForNode(nodeInfo *schedulercache.NodeInfo, daemonsets []*appsv1.DaemonSet, predicateChecker *simulator.PredicateChecker) []*apiv1.Pod {
 	result := make([]*apiv1.Pod, 0)
 	for _, ds := range daemonsets {
 		pod := newPod(ds, nodeInfo.Node().Name)
@@ -39,7 +39,7 @@ func GetDaemonSetPodsForNode(nodeInfo *schedulercache.NodeInfo, daemonsets []*ex
 	return result
 }
 
-func newPod(ds *extensionsv1.DaemonSet, nodeName string) *apiv1.Pod {
+func newPod(ds *appsv1.DaemonSet, nodeName string) *apiv1.Pod {
 	newPod := &apiv1.Pod{Spec: ds.Spec.Template.Spec, ObjectMeta: ds.Spec.Template.ObjectMeta}
 	newPod.Namespace = ds.Namespace
 	newPod.Name = fmt.Sprintf("%s-pod-%d", ds.Name, rand.Int63())
diff --git a/cluster-autoscaler/utils/kubernetes/listers.go b/cluster-autoscaler/utils/kubernetes/listers.go
index 86fd8a12..28f9267e 100644
--- a/cluster-autoscaler/utils/kubernetes/listers.go
+++ b/cluster-autoscaler/utils/kubernetes/listers.go
@@ -20,13 +20,13 @@ import (
 	"time"
 
 	apiv1 "k8s.io/api/core/v1"
-	extensionsv1 "k8s.io/api/extensions/v1beta1"
+	appsv1 "k8s.io/api/apps/v1"
 	policyv1 "k8s.io/api/policy/v1beta1"
 	"k8s.io/apimachinery/pkg/fields"
 	"k8s.io/apimachinery/pkg/labels"
 	client "k8s.io/client-go/kubernetes"
 	v1lister "k8s.io/client-go/listers/core/v1"
-	v1extensionslister "k8s.io/client-go/listers/extensions/v1beta1"
+	v1appslister "k8s.io/client-go/listers/apps/v1"
 	v1policylister "k8s.io/client-go/listers/policy/v1beta1"
 	"k8s.io/client-go/tools/cache"
 	podv1 "k8s.io/kubernetes/pkg/api/v1/pod"
@@ -39,7 +39,7 @@ type ListerRegistry interface {
 	ScheduledPodLister() PodLister
 	UnschedulablePodLister() PodLister
 	PodDisruptionBudgetLister() PodDisruptionBudgetLister
-	DaemonSetLister() DaemonSetLister
+	DaemonSetLister() v1appslister.DaemonSetLister
 }
 
 type listerRegistryImpl struct {
@@ -48,13 +48,13 @@ type listerRegistryImpl struct {
 	scheduledPodLister        PodLister
 	unschedulablePodLister    PodLister
 	podDisruptionBudgetLister PodDisruptionBudgetLister
-	daemonSetLister           DaemonSetLister
+	daemonSetLister           v1appslister.DaemonSetLister
 }
 
 // NewListerRegistry returns a registry providing various listers to list pods or nodes matching conditions
 func NewListerRegistry(allNode NodeLister, readyNode NodeLister, scheduledPod PodLister,
 	unschedulablePod PodLister, podDisruptionBudgetLister PodDisruptionBudgetLister,
-	daemonSetLister DaemonSetLister) ListerRegistry {
+	daemonSetLister v1appslister.DaemonSetLister) ListerRegistry {
 	return listerRegistryImpl{
 		allNodeLister:             allNode,
 		readyNodeLister:           readyNode,
@@ -103,7 +103,7 @@ func (r listerRegistryImpl) PodDisruptionBudgetLister() PodDisruptionBudgetListe
 }
 
 // DaemonSetLister returns the daemonSetLister registered to this registry
-func (r listerRegistryImpl) DaemonSetLister() DaemonSetLister {
+func (r listerRegistryImpl) DaemonSetLister() v1appslister.DaemonSetLister {
 	return r.daemonSetLister
 }
 
@@ -270,29 +270,13 @@ func NewPodDisruptionBudgetLister(kubeClient client.Interface, stopchannel <-cha
 	}
 }
 
-// DaemonSetLister lists daemonsets.
-type DaemonSetLister interface {
-	List() ([]*extensionsv1.DaemonSet, error)
-}
-
-// DaemonSetListerImpl lists all daemonsets.
-type DaemonSetListerImpl struct {
-	daemonSetLister v1extensionslister.DaemonSetLister
-}
-
-// List returns all daemon sets
-func (lister *DaemonSetListerImpl) List() ([]*extensionsv1.DaemonSet, error) {
-	return lister.daemonSetLister.List(labels.Everything())
-}
 
 // NewDaemonSetLister builds a daemonset lister.
-func NewDaemonSetLister(kubeClient client.Interface, stopchannel <-chan struct{}) DaemonSetLister {
-	listWatcher := cache.NewListWatchFromClient(kubeClient.Extensions().RESTClient(), "daemonsets", apiv1.NamespaceAll, fields.Everything())
+func NewDaemonSetLister(kubeClient client.Interface, stopchannel <-chan struct{}) v1appslister.DaemonSetLister {
+	listWatcher := cache.NewListWatchFromClient(kubeClient.Apps().RESTClient(), "daemonsets", apiv1.NamespaceAll, fields.Everything())
 	store := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
-	lister := v1extensionslister.NewDaemonSetLister(store)
-	reflector := cache.NewReflector(listWatcher, &extensionsv1.DaemonSet{}, store, time.Hour)
+	lister := v1appslister.NewDaemonSetLister(store)
+	reflector := cache.NewReflector(listWatcher, &appsv1.DaemonSet{}, store, time.Hour)
 	go reflector.Run(stopchannel)
-	return &DaemonSetListerImpl{
-		daemonSetLister: lister,
-	}
+	return lister
 }
