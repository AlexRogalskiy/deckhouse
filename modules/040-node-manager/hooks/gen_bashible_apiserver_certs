#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  yq r -j - << EOF
    configVersion: v1
    beforeHelm: 5
    kubernetes:
    - name: secret
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [d8-cloud-instance-manager]
      nameSelector:
        matchNames: [bashible-api-server-tls]
      jqFilter: |
        {
          server_ca: (.data."ca.crt" | @base64d),
          server_crt: (.data."apiserver.crt" | @base64d),
          server_key: (.data."apiserver.key" | @base64d)
        }
EOF
}

function __main__() {

  # if in cluster has not tls secret for bashible api server
  # generate it

  if ! cert="$(context::get --required 'snapshots.secret.0.filterResult')" > /dev/null; then
    ca="$(jo CN=node-manager key="$(jo algo=ecdsa size=256)" ca="$(jo expiry=87600h)" | cfssl gencert -initca -)"
    ca_crt="$(jq .cert -r <<< "$ca")"

    # config for cfssl gencert
    config='{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","requestheader-client"]}}}'
    hostnames='["127.0.0.1","bashible-api.d8-cloud-instance-manager.svc"]'

    new_cert="$(jo CN=node-manager hosts="$hostnames" key="$(jo algo=ecdsa size=256)" \
        | cfssl gencert -ca=<(jq .cert -r <<< ${ca}) -ca-key=<(jq .key -r <<< "$ca") -config=<(echo "$config") -)"

    api_service_crt="$(jq .cert -r <<< "$new_cert")"
    api_service_key="$(jq .key -r <<< "$new_cert")"

    cert="$(jo "server_ca=$ca_crt" "server_crt=$api_service_crt" "server_key=$api_service_key")"
  fi

  values::set "nodeManager.internal.bashibleApiServerCA" "$(jq -r ".server_ca" <<< "$cert")"
  values::set "nodeManager.internal.bashibleApiServerCrt" "$(jq -r ".server_crt" <<< "$cert")"
  values::set "nodeManager.internal.bashibleApiServerKey" "$(jq -r ".server_key" <<< "$cert")"
}

hook::run "$@"
