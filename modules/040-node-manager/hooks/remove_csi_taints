#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: csinodes
      queue: /modules/$(module::name::kebab_case)/remove_csi_taints
      includeSnapshotsFrom: [csinodes,nodes]
      apiVersion: storage.k8s.io/v1beta1
      kind: CSINode
      watchEvent: ["Added", "Modified"]
      jqFilter: '{"name": .metadata.name}'
    - name: nodes
      queue: /modules/$(module::name::kebab_case)
      apiVersion: v1
      kind: Node
      watchEvent: ["Added", "Modified"]
      jqFilter: '{"needPatch": ([(.spec.taints // [])[] | select(.key == "node.flant.com/csi-not-bootstrapped")] | length > 0), "name": .metadata.name}'
EOF
}

function __on_kubernetes::nodes() {
  return 0
}

function __on_kubernetes::csinodes() {
  for csiNodeName in $(context::jq -r '.snapshots.csinodes[] | .filterResult.name'); do
    if context::jq -er --arg nodeName "$csiNodeName" '.snapshots.nodes[] | select(.filterResult.name == $nodeName and .filterResult.needPatch)' > /dev/null;
    then
      kubernetes::patch_jq "" "node/${csiNodeName}" '
        .spec.taints = [(.spec.taints // [])[] |
        select(.key != "node.flant.com/csi-not-bootstrapped")] |
        if (.spec.taints | length == 0) then del(.spec.taints) else . end'
    fi
  done
}

hook::run "$@"
