{{- $_ := set . "Version" ( splitList "/" .Values.global.doc_version | last ) }}
{{- $_ := set . "VersionURLNormalized" ( printf "%s" .Version | lower | replace "+" "-plus-" | replace "_" "-u-" ) }}
{{- $_ := set . "VersionDNSNormalized" ( printf "%s" .Version | lower | replace "+" "-plus-" | replace "_" "-u-" | replace "." "-dot-" ) }}
{{- $host := .Values.global.url }}

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: main
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
    nginx.ingress.kubernetes.io/session-cookie-name: ingress_route
    nginx.ingress.kubernetes.io/configuration-snippet: |
{{- if (eq .Values.global.env "web-early") }}
      auth_request_set $saml_authorization $upstream_http_authorization;
      proxy_set_header Authorization $saml_authorization;
{{- end }}
      proxy_set_header X-Original-URI         $request_uri;
      ssi on;
      ssi_silent_errors on;
{{- include "rewrites" . | indent 6 }}
{{- if or (eq .Values.global.env "web-production") (eq .Values.global.env "web-test") }}
    nginx.ingress.kubernetes.io/auth-signin: https://$host/dex-authenticator/sign_in
    nginx.ingress.kubernetes.io/auth-url: https://{{ .Chart.Name }}-public-dex-authenticator.deckhouse-{{ .Values.global.env }}.svc.cluster.local/dex-authenticator/auth
    nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email
{{- else if (eq .Values.global.env "web-early") }}
    nginx.ingress.kubernetes.io/auth-url: "http://{{ .Chart.Name }}-saml-authenticator.deckhouse-{{ .Values.global.env }}.svc.cluster.local/saml/auth"
    nginx.ingress.kubernetes.io/auth-signin: "/saml/login"
    nginx.ingress.kubernetes.io/auth-method: "GET"
{{- else }}
    nginx.ingress.kubernetes.io/auth-url: http://basic-auth.kube-basic-auth.svc.cluster.local/deckhouse
{{- end }}
spec:
  tls:
  - hosts:
      - {{ $host }}
{{- if eq .Values.global.env "web-production" }}
      - www.{{ $host }}
{{- end }}
    secretName: tls-{{ $host }}
  rules:
  - host: {{ $host }}
    http:
      paths:
      - path: /
        backend:
          serviceName: backend
          servicePort: http
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: {{ .Chart.Name }}-cert
spec:
  secretName: tls-{{ $host }}
  issuerRef:
    kind: ClusterIssuer
{{- if hasPrefix "review" .Values.global.env }}
    name: letsencrypt-staging
{{- else }}
    name: letsencrypt
{{- end }}
  commonName: {{ $host }}
  dnsNames:
  - {{ $host }}
{{- if eq .Values.global.env "web-production" }}
  - www.{{ $host }}
{{- end }}
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - {{ $host }}
{{- if eq .Values.global.env "web-production" }}
      - www.{{ $host }}
{{- end }}
{{- if eq .Values.global.env "web-early" }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}-saml
spec:
  tls:
  - hosts:
    - {{ $host }}
    secretName: tls-{{ $host }}
  rules:
  - host: {{ $host }}
    http:
      paths:
      - path: /saml
        backend:
          serviceName: {{ .Chart.Name }}-saml-authenticator
          servicePort: http
{{- end }}
{{- if or (eq .Values.global.env "web-production") (eq .Values.global.env "web-test") }}
---
apiVersion: deckhouse.io/v1alpha1
kind: DexAuthenticator
metadata:
  name: {{ .Chart.Name }}-public
spec:
  applicationDomain: {{ $host }}
  sendAuthorizationHeader: false
  applicationIngressCertificateSecretName: tls-{{ $host }}
  applicationIngressClassName: "nginx"
  keepUsersLoggedInFor: "720h"
{{- end }}
