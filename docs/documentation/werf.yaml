{{ $BASE_NGINX_ALPINE := "nginx:1.15.12-alpine@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555" }}

project: deckhouse-web
configVersion: 1

---
artifact: static-pages
from: jekyll/jekyll:3.8
fromCacheVersion: 20210402
ansible:
  install:
    - shell: |
        apk add rsync
        gem update bundler
    - name: "Install Dependencies"
      shell: bundle install
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
  setup:
    - name: "Preparing modules structure"
      shell: |
        export MODULES_SRC_DIR=/src/modules
        export MODULES_DST_EN=/srv/jekyll-data/documentation/modules_en
        export MODULES_DST_RU=/srv/jekyll-data/documentation/modules_ru
        ./modules_prepare.sh
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
    - name: "Add permalinks"
      shell: |
        for i in $(find . -regex '.*.md' -print); do
          grep -q "^---" $i
          if [ $? -gt 0 ]; then continue; fi
          cat $i | tr -d '\n' | grep -lv "^---.*permalink: .*---" &> /dev/null
          if [ $? -eq 0 ]; then
            # permalink is absent, add permalink
            # PERMALINK="/$(echo $i | sed -E 's#(modules_)(en|ru)/#\2/modules/#' | sed 's#docs/##g'| tr '[:upper:]' '[:lower:]' | sed 's#\.md$#.html#' | sed 's#^\.\/##' | sed 's#readme\.html$#index.html#' )"
            PERMALINK="/$(echo $i | sed -E 's#(modules_)(en|ru)/#\2/modules/#' | sed 's#docs/##g'| tr '[:upper:]' '[:lower:]' | sed 's#\.md$#.html#' | sed 's#^\.\/##' | sed 's#readme\.html$##' )"
            sed -i "1apermalink: $PERMALINK" $i
          fi
        done
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
    - name: "Generate module configuration schemas"
      shell: |
        export MODULES_DIR=modules_en
        for schema_path in $(find $MODULES_DIR -regex '^.*/openapi/config-values.yaml$' -print); do
          module_path=$(echo $schema_path | cut -d\/ -f-2 )
          module_name=$(echo $schema_path | cut -d\/ -f2 | cut -d- -f2-)
          mkdir -p _data/schemas/${module_name}
          cp -f $schema_path _data/schemas/${module_name}/
          grep -q '<!-- SCHEMA -->' ${module_path}/docs/CONFIGURATION.md
          if [ $? -eq 0 ]; then
            # Apply schema
            echo "Generating schema ${schema_path} for ${module_path}/docs/CONFIGURATION.md"
            sed -i "s#<!-- SCHEMA -->#\{\% include jsonschema_object.md object=site.data.schemas.${module_name}.config-values \%\}#" ${module_path}/docs/CONFIGURATION.md
          else
            echo "WARNING: Schema ${schema_path} found but there is no '<!-- SCHEMA -->' placeholder in the ${module_path}/docs/CONFIGURATION.md"
          fi
        done
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation
    - name: "Generate CR schemas"
      shell: |
        export MODULES_DIR=modules_en
        for schema_path in $(find $MODULES_DIR -regex '^.*/crds/.*.yaml$' -print | sort); do
          module_path=$(echo $schema_path | cut -d\/ -f-2 )
          module_name=$(echo $schema_path | cut -d\/ -f2 | cut -d- -f2-)
          schema_path_relative=$(echo $schema_path | cut -d\/ -f3- | sed "s#\.yaml##; s#\/#\.#")
          mkdir -p _data/schemas/${module_name}/crds
          cp -f $schema_path _data/schemas/${module_name}/crds/
          grep -q '<!-- SCHEMA -->' ${module_path}/docs/CR.md &> /dev/null
          if [ $? -eq 0 ]; then
            # Apply schema
            echo "OK: Generating schema ${schema_path} for ${module_path}/docs/CR.md"
            sed -i "/<!-- SCHEMA -->/i\{\{ site.data.schemas.${module_name}.${schema_path_relative} \| format_crd \}\}" ${module_path}/docs/CR.md
          else
            echo "WARNING: Schema ${schema_path} found but there is no '<!-- SCHEMA -->' placeholder in the ${module_path}/docs/CR.md"
          fi
        done
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation
    - name: "Generate sidebars"
      shell: |
        export MODULES_DIR=modules_en
        /bin/bash ./modules_make_data > _data/sidebars/modules.yml2 &&  sed '1,+4d' _data/sidebars/modules.yml >> _data/sidebars/modules.yml2  && mv -f _data/sidebars/modules.yml2 _data/sidebars/modules.yml
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
    - shell: |
        mkdir -m 777 -p /app/_site/
        JEKYLL_ENV=production jekyll build -d /app/_site/
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
    - name: "Link checking"
      shell: |
        exit 0 || (bundle exec htmlproofer \
          --allow-hash-href \
          --empty-alt-ignore \
          --check_html \
          --url_ignore "/localhost/,/https\:\/\/t.me/,/gitlab.com\/profile/,/.slack.com/,/habr.com/,/flant.ru/,/candi\/bashible\/bashbooster/,/\.yml$/,/\.yaml$/,/\.tmpl$/,/\.tpl$/" \
          ./_site/ &> /app/_site/link_test_report.txt ) || true
        cat /app/_site/link_test_report.txt
      args:
        executable: /bin/bash
        chdir: /srv/jekyll-data/documentation/
git:
- add: /docs
  to: /srv/jekyll-data
  owner: jekyll
  group: jekyll
  includePaths:
    - site/_config.yml
    - site/Gemfile
    - site/Gemfile.lock
    - documentation
  excludePaths:
  - '**/werf*.yaml'
  - '**/docker-compose.yml'
  - '**/.werf'
  - '**/.helm'
  stageDependencies:
    install: ['site/Gemfile','site/Gemfile.lock']
    setup: '**/*'
- add: /modules
  to: /src/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['**/docs/','**/openapi/','**/crds/']
# CRDs
- add: /modules/010-user-authn-crd/crds
  to: /srv/jekyll-data/modules/150-user-authn/crds
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/openapi/node_group.yaml
  to: /srv/jekyll-data/modules/040-node-manager/crds/node_group.yaml
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/aws/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-aws/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/azure/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-azure/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/gcp/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-gcp/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/openstack/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-openstack/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/vsphere/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-vsphere/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/yandex/openapi/
  to: /srv/jekyll-data/modules/030-cloud-provider-yandex/crds/
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /modules/010-prometheus-crd/crds/grafanadashboarddefinition.yaml
  to: /srv/jekyll-data/modules/300-prometheus/crds/grafanadashboarddefinition.yaml
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
---
image: web
from: {{ $BASE_NGINX_ALPINE }}
ansible:
  setup:
  - name: "Setup /etc/nginx/nginx.conf"
    copy:
      content: |
{{ .Files.Get ".werf/nginx.conf" | indent 8 }}
      dest: /etc/nginx/nginx.conf
import:
- artifact: static-pages
  add: /app/_site
  to: /app/
  before: setup
