#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  yq r -j - << EOF
    configVersion: v1
    kubernetes:
    - name: is-bootstraped-cm
      apiVersion: v1
      kind: ConfigMap
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-cluster-is-bootstraped]
    - name: not-master-and-ready-nodes
      apiVersion: v1
      kind: Node
      watchEvent: ["Added", "Modified"]
      jqFilter: '
        (.spec.taints == null or ([.spec.taints[] | select(.key == "node-role.kubernetes.io/master")] | any | not))
        and
        (.status.conditions | [.[] | select(.type == "Ready")] | all(.[] ; .status == "True"))
      '
EOF
}

function __on_kubernetes::is-bootstraped-cm::synchronization() {
  if context::has objects.0; then
    values::set global.clusterIsBootstrapped true
  fi
}

function __on_kubernetes::is-bootstraped-cm::added_or_modified() {
  values::set global.clusterIsBootstrapped true
}

function __on_kubernetes::not-master-and-ready-nodes::synchronization() {
  if values::is_true global.clusterIsBootstrapped; then
    return 0
  fi

  if context::jq -e '[.objects[] | .filterResult] | any' >/dev/null 2>&1; then
    values::set global.clusterIsBootstrapped true
    kubernetes::create_yaml << EOF
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: d8-cluster-is-bootstraped
        namespace: kube-system
EOF
  fi
}

function __on_kubernetes::not-master-and-ready-nodes::added_or_modified() {
  if values::is_true global.clusterIsBootstrapped; then
    return 0
  fi

  if context::is_true filterResult; then
    values::set global.clusterIsBootstrapped true
    kubernetes::create_yaml << EOF
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: d8-cluster-is-bootstraped
        namespace: kube-system
EOF
  fi
}

hook::run $@
