#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    onStartup: 1
EOF

}

function __main__() {
  kubectl -n antiopa delete secrets -l owner=helm 2> /dev/null

  helm2_releases="$(kubectl -n d8-system get cm -l OWNER=TILLER -o json | jq -rc '.items[] | .metadata.labels.NAME' | sort | uniq)"
  helm3_releases="$(kubectl -n d8-system get secrets -l owner=helm -o json | jq -rc '.items[].metadata.labels.name' | sort | uniq)"

  helm2_releases_to_convert="$(comm -23 <(echo "$helm2_releases") <(echo "$helm3_releases"))"

  IFS=$'\n'
  for release in $helm2_releases_to_convert; do
    unset IFS
    /usr/local/bin/helm 2to3 convert --release-storage configmaps --tiller-out-cluster --tiller-ns d8-system ${release} --release-versions-max 1

    if secret="$(kubectl -n antiopa get secret -l owner=helm,name="$release" -o json | jq '.items[0]')" 2>/dev/null ; then
      # migrate from antiopa to d8-system
      echo -n '"' > /tmp/release_data
      jq '.data.release' <<< "$secret" -r | base64 -d | base64 -d | gunzip | jq '.namespace = "d8-system"' | gzip | base64 -w0 | base64 -w0 >> /tmp/release_data
      echo '"' >> /tmp/release_data
      jq --argfile release_data /tmp/release_data '.metadata.namespace = "d8-system" | .data.release = $release_data' <<< "$secret" | kubectl create -f -
      kubectl -n antiopa delete secret -l owner=helm,name="$release"
    fi
  done
  unset IFS
}

hook::run $@
