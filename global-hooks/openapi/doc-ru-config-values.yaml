type: object
properties:
  storageClass:
    type: string
    x-doc-default: null
    x-examples: [ "storage-class" ]
    description: |
      Имя storage class, который будет использоваться для всех служебных компонентов (prometheus, grafana, openvpn, ...).
        * По умолчанию — null, а значит служебные будут использовать `cluster.defaultStorageClass` (который определяется автоматически), а если такого нет — `emptyDir`.
        * Этот параметр имеет смысл использовать только в исключительных ситуациях.
    highAvailability:
      type: boolean
      x-examples: [ true ]
      description: |
        Глобальный включатель режима отказоустойчивости для модулей, которые это поддерживают.
        По умолчанию не определён и решение принимается на основе autodiscovery-параметра `global.discovery.clusterControlPlaneIsHighlyAvailable`.
  modules:
    description:
      Параметры для служебных компонентов.
    additionalProperties: false
    type: object
    properties:
      ingressClass:
        type: string
        default: nginx
        x-examples: [ "my-ingress" ]
        description: |
          Класс Ingress-контроллера, который используется для служебных компонентов.
          По умолчанию `nginx`.
      publicDomainTemplate:
        type: string
        x-examples: [ "%s.example.com" ]
        # only check that is containing %s
        pattern: '.*%s.*'
        description: |
          Шаблон c ключом `%s` в качестве динамической части строки.
          Шаблон будет использоваться при образовании служебных DNS-записей, необходимых для внутренних нужд Deckhouse и работы модулей.
          **Нельзя** использовать в кластере (создавать Ingress-ресурсы) DNS-имена подпадающие под указанный шаблон,
          во избежание пересечений с создаваемыми Deckhouse Ingress-ресурсами.
          Пример шаблона - `%s.kube.company.my`. Если параметр не указан, то Ingress-ресурсы создаваться не будут.
      placement:
        description: |
          Настройки, определяющие расположение компонентов Deckhouse.
        type: object
        additionalProperties: false
        properties:
          customTolerationKey:
            description:
              Cписок ключей пользовательских taint'ов.
              Необходимо указывать, чтобы позволить шедулится на выделенные узлы критическим add-on'ам, таким как например cni и csi.
            x-doc-example: |
              ```yaml
              customTolerationKeys:
              - dedicated.example.com
              - node-dedicated.example.com/master
              ```
            type: array
            items:
              type: string
      https:
        description: |
          Способ реализации HTTPS, используемый служебными компонентами.
        type: object
        additionalProperties: false
        x-examples:
          - certManager:
              clusterIssuerName: letsencrypt
            mode: CertManager
          - mode: Disabled
          - mode: OnlyInURI
          - mode: CustomCertificate
            customCertificate:
              secretName: plainstring
        properties:
          mode:
            type: string
            description: |
              Режим работы HTTPS:
                * `Disabled` — в данном режиме все служебные компоненты будут работать только по http (некоторые модули могут не работать, например [user-authn](modules/150-user-authn/));
                * `CertManager` — все служебные компоненты будут работать по https и заказывать сертификат с помощью clusterissuer заданном в параметре `certManager.clusterIssuerName`;
                * `CustomCertificate` — все служебные компоненты будут работать по https используя сертификат из namespace `d8-system`;
                * `OnlyInURI` — все служебные компоненты будут работать по http (подразумевая, что перед ними стоит внешний https-балансер, который терминирует https).
              По умолчанию `CertManager`.
            default: CertManager
            enum:
            - Disabled
            - CertManager
            - CustomCertificate
            - OnlyInURI
          certManager:
            type: object
            additionalProperties: false
            properties:
              clusterIssuerName:
                type: string
                default: 'letsencrypt'
                x-doc-default: 'letsencrypt'
                description: |
                  Указываем, какой ClusterIssuer использовать для служебных компонентов
                  (в данный момент доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои).
          customCertificate:
            type: object
            default: {}
            additionalProperties: false
            properties:
              secretName:
                type: string
                description: |
                  Указываем имя secret'а в namespace `d8-system`, который будет использоваться для системных компонентов.
                  Данный секрет должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
                default: "false"
                x-doc-default: 'false'
    x-examples:
      - publicDomainTemplate: "%s.example.com"
        placement:
          customTolerationKey:
            - dedicated.example.com
            - node-dedicated.example.com/master
        https:
          mode: CustomCertificate
          customCertificate:
            secretName: plainstring
        resourcesRequests:
          everyNode:
            cpu: 42m
            memory: 2G
          masterNode:
            cpu: 2
            memory: 512Mi
      - publicDomainTemplate: "%s.example.com"
        placement:
          customTolerationKey:
            - dedicated.example.com
            - node-dedicated.example.com/master
        https:
          mode: CertManager
          certManager:
            clusterIssuerName: myown
        resourcesRequests:
          everyNode:
            cpu: 42m
            memory: 2G
          masterNode:
            cpu: 2
            memory: 512Mi
      resourcesRequests:
        description: |
          Количество CPU и memory, выделяемые для работы служебных компонентов.
        type: object
        additionalProperties: false
        properties:
          everyNode:
            type: object
            additionalProperties: false
            description: |
              Системные компоненты, работающие на каждом узле кластера (обычно это DaemonSet'ы).
            properties:
              cpu:
                description: |
                  Сумма CPU, выделяемая для всех компонентов на каждом узле (по умолчанию: 300m)
                type: string
                default: "300m"
                pattern: '^[0-9]+m?$'
              memory:
                description: |
                  Суммарный объем памяти, выделяемый для всех компонентов на каждом узле (по умолчанию: 512Mi)
                type: string
                default: "512Mi"
                pattern: '^[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$'
          masterNode:
            type: object
            additionalProperties: false
            description: |
              Системные компоненты (control plane и системные компоненты на master-узлах).
              **Внимание!** В случае managed-кластера Deckhouse не управляет control-plane компонентами, поэтому все ресурсы отдаются системным компонентам.
            properties:
              cpu:
                description: |
                  Сумма CPU, выделяемая для системных компонентов на master-узлах сверх `everyNode`.
                    * Для кластера, управляемого Deckhouse, значение по умолчанию определяется автоматически: `.status.allocatable.cpu` минимального master-узла (но не более 4 ядер) минус `everyNode`.
                    * Для managed-кластера значение по умолчанию - 1 ядро минус `everyNode`.
                type: string
                pattern: '^[0-9]+m?$'
              memory:
                description: |
                  Суммарный объем памяти, выделяемый для системных компонентов на master-узлах сверх `everyNode`.
                    * Для кластера, управляемого Deckhouse, значение по умолчанию определяется автоматически: `.status.allocatable.memory` минимального master-узла (но не более 8 Гб) минус `everyNode`.
                    * Для managed-кластера значение по умолчанию - 1 Гб минус `everyNode`.
                type: string
                pattern: '^[0-9]+(E|P|T|G|M|K|Ei|Pi|Ti|Gi|Mi|Ki)?$'
