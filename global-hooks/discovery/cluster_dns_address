#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: kube_dns_svc_d8
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Service
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-kube-dns]
      jqFilter: '.spec.clusterIP'
    - name: kube_dns_svc_orig
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Service
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [kube-dns]
      jqFilter: '.spec.clusterIP'
EOF
}

function __main__() {
  if context::has snapshots.kube_dns_svc_d8.0 && [[ "$(context::get snapshots.kube_dns_svc_d8.0.filterResult)" != "None" ]]; then
    values::set global.discovery.clusterDNSAddress "$(context::get snapshots.kube_dns_svc_d8.0.filterResult)"
  elif context::has snapshots.kube_dns_svc_orig.0 && [[ "$(context::get snapshots.kube_dns_svc_orig.0.filterResult)" != "None" ]]; then
    values::set global.discovery.clusterDNSAddress "$(context::get snapshots.kube_dns_svc_orig.0.filterResult)"
  else
    >&2 echo "ERROR: can't find a single kube-dns service"
    return 1
  fi
}

hook::run "$@"
