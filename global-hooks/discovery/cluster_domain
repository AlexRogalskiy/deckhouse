#!/bin/bash
# Auto-detector for internal domain (i.e. cluster.local).

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:

    - name: cm
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: ConfigMap
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [coredns, d8-kube-dns]
      jqFilter: |
        .data.Corefile | match("\\\\s+kubernetes\\\\s+(\\\\S+?)\\\\.?\\\\s+in-addr.arpa\\\\s+ip6.arpa\\\\s+\\\\{") | .captures[0].string

    - name: pod
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-dns
      jqFilter: |
        .spec.containers[0] | (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--domain=(\\\\S+?)\\\\.?(\\\\s+|$)") | .captures[1].string
EOF
}

function __main__() {
  cluster_domain="cluster.local"

  if values::has global.discovery.clusterDomain; then
    cluster_domain=$(values::get global.discovery.clusterDomain)
  elif ! context::is_null snapshots.cm.0.filterResult; then
    cluster_domain="$(context::get snapshots.cm.0.filterResult)"
  elif ! context::is_null snapshots.pod.0.filterResult; then
    cluster_domain="$(context::get snapshots.pod.0.filterResult)"
  fi

  values::set global.discovery.clusterDomain "${cluster_domain}"
}

hook::run $@
