#!/bin/bash

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: node_internal_ips
      group: node_internal_ips
      kind: Node
      apiVersion: v1
      jqFilter: '[.status.addresses[]? | select (.type == "InternalIP") | .address]'

    - name: pod_subnet_by_component
      group: pod_subnet
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: kube-controller-manager
          tier: control-plane
      jqFilter: |
        .spec.containers[] | select(.name == "kube-controller-manager") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--cluster-cidr=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: pod_subnet_by_k8s_app
      group: pod_subnet
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-controller-manager
      jqFilter: |
        .spec.containers[] | select(.name == "kube-controller-manager") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--cluster-cidr=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: service_subnet_by_component
      group: service_subnet
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: kube-apiserver
          tier: control-plane
      jqFilter: |
        .spec.containers[] | select(.name == "kube-apiserver") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--service-cluster-ip-range=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: service_subnet_by_k8s_app
      group: service_subnet
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-apiserver
      jqFilter: |
        .spec.containers[] | select(.name == "kube-apiserver") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--service-cluster-ip-range=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: cluster_configuration
      apiVersion: v1
      kind: Secret
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      namespace:
        nameSelector:
          matchNames: [d8-system]
      nameSelector:
        matchNames: [d8-cluster-configuration]
      jqFilter: '.data."cluster-configuration.yaml"'
EOF

}

### nodeInternalIPs
function __on_group::node_internal_ips() {
  node_internal_ips="$(context::jq -r '[.snapshots.node_internal_ips[] | .filterResult] | add | sort')"
  values::set global.discovery.nodeInternalIPs "$node_internal_ips"
}

### podSubnet
function __on_group::pod_subnet() {
  if context::has 'snapshots.cluster_configuration.0'; then
    return 0
  fi

  pod_subnet_candidates=$(context::jq -er '.snapshots.pod_subnet_by_component + .snapshots.pod_subnet_by_k8s_app')
  if [[ "$pod_subnet_candidates" == "[]" ]]; then
    >&2 echo "WARNING: can't discover pod subnet"
    return 0
  fi

  pod_subnet="$(jq -rc '.[0].filterResult' <<< ${pod_subnet_candidates})"
  values::set global.discovery.podSubnet "$pod_subnet"
}

### serviceSubnet
function __on_group::service_subnet() {
  if context::has 'snapshots.cluster_configuration.0'; then
    return 0
  fi

  service_subnet_candidates=$(context::jq -er '.snapshots.service_subnet_by_component + .snapshots.service_subnet_by_k8s_app')
  if [[ "$service_subnet_candidates" == "[]" ]]; then
    >&2 echo "WARNING: can't discover service subnet"
    return 0
  fi

  service_subnet="$(jq -rc '.[0].filterResult' <<< ${service_subnet_candidates})"
  values::set global.discovery.serviceSubnet "$service_subnet"
}

hook::run "$@"
