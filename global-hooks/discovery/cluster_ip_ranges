#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    kubernetes:
    - name: pod_subnet_by_component
      group: pod_subnet
      keepFullObjectsInMemory: false
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: kube-controller-manager
          tier: control-plane
      jqFilter: |
        .spec.containers[] | select(.name == "kube-controller-manager") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--cluster-cidr=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: pod_subnet_by_k8s_app
      group: pod_subnet
      keepFullObjectsInMemory: false
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-controller-manager
      jqFilter: |
        .spec.containers[] | select(.name == "kube-controller-manager") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--cluster-cidr=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: service_subnet_by_component
      group: service_subnet
      keepFullObjectsInMemory: false
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          component: kube-apiserver
          tier: control-plane
      jqFilter: |
        .spec.containers[] | select(.name == "kube-apiserver") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--service-cluster-ip-range=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: service_subnet_by_k8s_app
      group: service_subnet
      keepFullObjectsInMemory: false
      includeSnapshotsFrom: ["cluster_configuration"]
      apiVersion: v1
      kind: Pod
      namespace:
        nameSelector:
          matchNames: [kube-system]
      labelSelector:
        matchLabels:
          k8s-app: kube-apiserver
      jqFilter: |
        .spec.containers[] | select(.name == "kube-apiserver") |
        (.command + .args) | join(" ") |
        match( "(^|\\\\s+)--service-cluster-ip-range=([0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\/[0-9]+)(\\\\s+|$)") | .captures[1].string

    - name: cluster_configuration
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      namespace:
        nameSelector:
          matchNames: [d8-system]
      nameSelector:
        matchNames: [d8-cluster-configuration]
      jqFilter: '.data."cluster-configuration.yaml"'
EOF

}

### podSubnet
function __on_group::pod_subnet() {
  if context::has 'snapshots.cluster_configuration.0'; then
    return 0
  fi

  pod_subnet_candidates=$(context::jq -er '.snapshots.pod_subnet_by_component + .snapshots.pod_subnet_by_k8s_app')
  if [[ "$pod_subnet_candidates" == "[]" ]]; then
    >&2 echo "WARNING: can't discover pod subnet"
    return 0
  fi

  pod_subnet="$(jq -rc '.[0].filterResult' <<< ${pod_subnet_candidates})"
  values::set global.discovery.podSubnet "$pod_subnet"
}

### serviceSubnet
function __on_group::service_subnet() {
  if context::has 'snapshots.cluster_configuration.0'; then
    return 0
  fi

  service_subnet_candidates=$(context::jq -er '.snapshots.service_subnet_by_component + .snapshots.service_subnet_by_k8s_app')
  if [[ "$service_subnet_candidates" == "[]" ]]; then
    >&2 echo "WARNING: can't discover service subnet"
    return 0
  fi

  service_subnet="$(jq -rc '.[0].filterResult' <<< ${service_subnet_candidates})"
  values::set global.discovery.serviceSubnet "$service_subnet"
}

hook::run "$@"
