#!/bin/bash

# Copyright 2021 Flant CJSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Migration 27.10.2020: Remove after release with this MR
source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    onStartup: 15
EOF
}

function __on_startup() {
  # if StaticClusterConfiguration already configured
  if kubectl get -n kube-system secret d8-static-cluster-configuration >/dev/null 2>/dev/null; then
    return 0
  fi

  # NodeGroups not found in cluster, probably it's a first bootstrap or a kops cluster
  if ! nodegroups=$(kubectl get ng -o json); then
    return 0
  fi

  networks_from_ng=$(jq -rc '[.items[].spec.static // {} | .internalNetworkCIDRs // [] | select(.)] | add | unique' <<< "$nodegroups")

  internal_network_cidrs=$(kubectl get nodes -o json \
    | jq -r '[.items[] | .metadata.annotations."node.deckhouse.io/internal-network-cidr" | select(.)]')

  networks_from_annotations=$(for key in $(jq -rc 'keys[]' <<< ${internal_network_cidrs}); do
    addr=$(jq -rc --arg key "$key" '.[$key | tonumber]' <<< ${internal_network_cidrs});
    export $(ipcalc -np "$addr")

    echo "\"$NETWORK/$PREFIX\""
  done | sort | uniq | jq -rcs '.')

  cidrs=$(jq --argjson ng "$networks_from_ng" -rc \
    '$ng + . | unique | .[] | "- \(.)"' <<< ${networks_from_annotations})

  if [[ "x$cidrs" == "x" ]]; then
    return 0
  fi

  config=$(cat <<EOF
apiVersion: deckhouse.io/v1
kind: StaticClusterConfiguration
internalNetworkCIDRs:
${cidrs}
EOF)

  cat <<EOF | kubernetes::replace_or_create_yaml
apiVersion: v1
data:
  static-cluster-configuration.yaml: $(base64 -w0 <<< ${config})
kind: Secret
metadata:
  labels:
    heritage: deckhouse
  name: d8-static-cluster-configuration
  namespace: kube-system
type: Opaque
EOF

  kubectl annotate node node.deckhouse.io/internal-network-cidr- --all
}

hook::run $@
