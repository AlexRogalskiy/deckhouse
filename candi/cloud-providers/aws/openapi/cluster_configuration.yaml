kind: AWSClusterConfiguration
apiVersions:
- apiVersion: deckhouse.io/v1
  openAPISpec:
    type: object
    additionalProperties: false
    required: [apiVersion, kind, layout, provider, masterNodeGroup, sshPublicKey]
    properties:
      apiVersion:
        type: string
        enum: [deckhouse.io/v1, deckhouse.io/v1alpha1]
      kind:
        type: string
        enum: [AWSClusterConfiguration]
      masterNodeGroup:
        required: [replicas, instanceClass]
        description: |
          Parameters of the master's NodeGroup.
        properties:
          replicas:
            type: integer
            minimum: 1
            description: |
              The number of master nodes to create.
          instanceClass:
            type: object
            required: [instanceType, ami]
            description: |
              Partial contents of the [AWSInstanceClass](https://deckhouse.io/en/documentation/v1/modules/030-cloud-provider-aws/cr.html#awsinstanceclass) CR.

              Possible values:
              * `instanceType`
              * `ami`
              * `additionalSecurityGroups`
              * `diskType`
              * `diskSizeGb`
            properties:
              instanceType:
                type: string
              ami:
                type: string
              additionalSecurityGroups:
                type: array
                items:
                  type: string
              diskType:
                description: Instance EBS disk type.
                example: "gp2"
                type: string
                enum: [gp2, io2, io1, st1, sc1]
              diskSizeGb:
                description: Instance disk size in gigabytes.
                example: 20
                type: integer
          zones:
            type: array
            items:
              type: string
            minItems: 1
            uniqueItems: true
            description: |
              A limited set of zones in which master nodes can be createed. An optional parameter.
          additionalTags:
            type: object
            additionalProperties:
              type: string
            description: |
              Tags to attach to instances being created in addition to the main ones (`AWSClusterConfiguration.tags`).
      nodeGroups:
        type: array
        description: |
          An array of additional NodeGroups for creating static nodes (e.g., for dedicated front nodes or gateways).
        items:
          type: object
          required: [name, replicas, instanceClass]
          properties:
            name:
              type: string
              description: |
                The name of the NodeGroup. It is used to generate the node name.
            replicas:
              type: integer
              description: |
                The number of nodes.
            nodeTemplate:
              description: |
                Parameters of Node objects in Kubernetes to add after registering the node.
              properties:
                labels:
                  type: object
                  additionalProperties:
                    type: string
                  description: |
                    The same as the `metadata.labels` standard [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#objectmeta-v1-meta).

                    * An example:

                      ```yaml
                      labels:
                        environment: production
                        app: warp-drive-ai
                      ```
                annotations:
                  type: object
                  additionalProperties:
                    type: string
                  description: |
                    The same as the `metadata.annotations` [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#objectmeta-v1-meta).

                    * An example:

                      ```yaml
                      annotations:
                        ai.fleet.com/discombobulate: "true"
                      ```
                taints:
                  type: array
                  description: |
                    The same as the `.spec.taints` field of the [Node](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#taint-v1-core) object. **Caution!** Only the `effect`, `key`, `values` are available.

                    * An example:

                      ```yaml
                      taints:
                      - effect: NoExecute
                        key: ship-class
                        value: frigate
                      ```
                  items:
                    type: object
                    properties:
                      effect:
                        type: string
                        enum: [NoSchedule, PreferNoSchedule, NoExecute]
                      key:
                        type: string
                      value:
                        type: string
            instanceClass:
              required: [instanceType, ami]
              type: object
              description: |
                Partial contents of the [AWSInstanceClass](https://deckhouse.io/en/documentation/v1/modules/030-cloud-provider-aws/cr.html#awsinstanceclass) CR.

                Possible values:
                * `instanceType`
                * `ami`
                * `additionalSecurityGroups`
                * `diskType`
                * `diskSizeGb`
              properties:
                instanceType:
                  type: string
                ami:
                  type: string
                additionalSecurityGroups:
                  type: array
                  items:
                    type: string
                diskType:
                  description: Instance EBS disk type.
                  example: "gp2"
                  type: string
                  enum: [gp2, io2, io1, st1, sc1]
                diskSizeGb:
                  description: Instance disk size in gigabytes.
                  example: 20
                  type: integer
            zones:
              type: array
              items:
                type: string
              minItems: 1
              uniqueItems: true
              description: |
                A limited set of zones in which nodes can be createed. An optional parameter.
            additionalTags:
              type: object
              additionalProperties:
                type: string
              description: |
                Tags to attach to instances being created in addition to the main ones (`AWSClusterConfiguration.tags`).
      layout:
        type: string
        description: |
          The name of the layout.
        enum: ['WithoutNAT', 'Standard']
      withoutNAT:
        type: object
        additionalProperties: false
        required: []
        properties: {}
      vpcNetworkCIDR:
        type: string
        pattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
        description: |
          A subnet to use in the VPC being created.

          * a mandatory parameter if the `existingVPCID` parameter is omitted.
      nodeNetworkCIDR:
        type: string
        pattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
        description: |
          A subnet to use for cluster nodes.

          * The IP range must overlap or match the VPC address range;
          * The IP range will be evenly split into subnets, one per Availability Zone in your region;
          * An optional but recommended parameter. By default, it corresponds to the whole range of VPC addresses;

          > If a new VPC is created along with a new cluster and no `vpcNetworkCIDR` is provided, then the range from  `nodeNetworkCIDR` is used for the VPC.
          > Thus, the entire VPC is allocated for the cluster networks, and you will not be able to add other resources to this VPC.
          >
          > The `nodeNetworkCIDR` range is distributed between subnets depending on the number of availability zones in the selected region. For example:
          > if `nodeNetworkCIDR: "10.241.1.0/20"` and there are three availability zones in the region, subnets will be created with the `/22` mask.
      existingVPCID:
        type: string
        description: |
          ID of the existing VPC to use for deploying.

          * A mandatory parameter if the `vpcNetworkCIDR` is omitted.
          * **Caution!** If there is an Internet Gateway in the target VPC, the deployment of the basic infrastructure will fail with an error. Currently, an Internet Gateway cannot be adopted.
      sshPublicKey:
        type: string
        description: |
          A public key for accessing nodes.
      tags:
        type: object
        additionalProperties:
          type: string
        description: |
          Tags to attach to newly created resources. You have to re-create all the machines to add new tags if tags were modified in the running cluster.
      provider:
        type: object
        additionalProperties: false
        required: [providerAccessKeyId, providerSecretAccessKey, region]
        description: |
          Parameters for connecting to the AWS API.
        properties:
          providerAccessKeyId:
            type: string
            description: |
              Access key [ID](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys).
          providerSecretAccessKey:
            type: string
            description: |
              Access key [secret](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys).
          region:
            type: string
            description: |
              The name of the AWS region where instances will be provisioned.
      zones:
        type: array
        items:
          type: string
        minItems: 1
        uniqueItems: true
        description: |
          A limited set of zones in which nodes can be created.
    allOf:
    - oneOf:
      - required: [layout]
        properties:
          layout:
            enum: [Standard]
            type: string
      - required: [layout]
        properties:
          layout:
            enum: [WithoutNAT]
            type: string
    - oneOf:
      - required: [vpcNetworkCIDR]
      - required: [existingVPCID]
