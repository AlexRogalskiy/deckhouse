Index: speaker/bgp_controller_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/speaker/bgp_controller_test.go b/speaker/bgp_controller_test.go
--- a/speaker/bgp_controller_test.go	(revision 846c55af003807f1fe4066711607122456509fc4)
+++ b/speaker/bgp_controller_test.go	(date 1637663691655)
@@ -181,6 +181,10 @@
 	panic("never called")
 }
 
+func (s *testK8S) HasExcludeLBLabel(nodeName string) (bool, error) {
+	return false, nil
+}
+
 func (s *testK8S) Infof(_ *v1.Service, evtType string, msg string, args ...interface{}) {
 	s.t.Logf("k8s Info event %q: %s", evtType, fmt.Sprintf(msg, args...))
 }
Index: internal/k8s/k8s.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/k8s/k8s.go b/internal/k8s/k8s.go
--- a/internal/k8s/k8s.go	(revision 846c55af003807f1fe4066711607122456509fc4)
+++ b/internal/k8s/k8s.go	(date 1637663725399)
@@ -9,6 +9,7 @@
 	"errors"
 	"fmt"
 	"net/http"
+	"time"
 
 	"go.universe.tf/metallb/internal/config"
 
@@ -29,6 +30,10 @@
 	"k8s.io/client-go/util/workqueue"
 )
 
+const (
+	LabelNodeExcludeBalancers = "node.kubernetes.io/exclude-from-external-load-balancers"
+)
+
 // Client watches a Kubernetes cluster and translates events into
 // Controller method calls.
 type Client struct {
@@ -575,6 +580,22 @@
 	}
 }
 
+func (c *Client) HasExcludeLBLabel(nodeName string) (bool, error) {
+	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
+	defer cancel()
+
+	node, err := c.client.CoreV1().Nodes().Get(ctx, nodeName, metav1.GetOptions{})
+	if err != nil {
+		return false, err
+	}
+
+	if _, ok := node.Labels[LabelNodeExcludeBalancers]; ok {
+		return true, nil
+	}
+
+	return false, nil
+}
+
 func serviceKeyForSlice(endpointSlice *discovery.EndpointSlice) (svcKey, error) {
 	if endpointSlice == nil {
 		return "", fmt.Errorf("nil EndpointSlice")
Index: speaker/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/speaker/main.go b/speaker/main.go
--- a/speaker/main.go	(revision 846c55af003807f1fe4066711607122456509fc4)
+++ b/speaker/main.go	(date 1637663691671)
@@ -24,6 +24,8 @@
 	"strings"
 	"syscall"
 
+	v1 "k8s.io/api/core/v1"
+
 	"go.universe.tf/metallb/internal/bgp"
 	"go.universe.tf/metallb/internal/config"
 	"go.universe.tf/metallb/internal/k8s"
@@ -31,7 +33,6 @@
 	"go.universe.tf/metallb/internal/logging"
 	"go.universe.tf/metallb/internal/speakerlist"
 	"go.universe.tf/metallb/internal/version"
-	v1 "k8s.io/api/core/v1"
 
 	"github.com/go-kit/kit/log"
 	"github.com/go-kit/kit/log/level"
@@ -55,6 +56,7 @@
 	UpdateStatus(svc *v1.Service) error
 	Infof(svc *v1.Service, desc, msg string, args ...interface{})
 	Errorf(svc *v1.Service, desc, msg string, args ...interface{})
+	HasExcludeLBLabel(nodeName string) (bool, error)
 }
 
 func main() {
@@ -147,6 +149,9 @@
 		os.Exit(1)
 	}
 	ctrl.client = client
+	for _, ctrlImpl := range ctrl.protocols {
+		ctrlImpl.setService(client)
+	}
 
 	sList.Start(client)
 	defer sList.Stop()
@@ -376,6 +381,7 @@
 	SetBalancer(log.Logger, string, net.IP, *config.Pool) error
 	DeleteBalancer(log.Logger, string, string) error
 	SetNode(log.Logger, *v1.Node) error
+	setService(service)
 }
 
 // Speakerlist represents a list of healthy speakers.
Index: speaker/layer2_controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/speaker/layer2_controller.go b/speaker/layer2_controller.go
--- a/speaker/layer2_controller.go	(revision 846c55af003807f1fe4066711607122456509fc4)
+++ b/speaker/layer2_controller.go	(date 1637663691663)
@@ -31,6 +31,11 @@
 	announcer *layer2.Announce
 	myNode    string
 	sList     SpeakerList
+	service service
+}
+
+func (c *layer2Controller) setService(svc service) {
+	c.service = svc
 }
 
 func (c *layer2Controller) SetConfig(log.Logger, *config.Config) error {
Index: speaker/bgp_controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/speaker/bgp_controller.go b/speaker/bgp_controller.go
--- a/speaker/bgp_controller.go	(revision 846c55af003807f1fe4066711607122456509fc4)
+++ b/speaker/bgp_controller.go	(date 1637663691647)
@@ -44,6 +44,11 @@
 	nodeLabels labels.Set
 	peers      []*peer
 	svcAds     map[string][]*bgp.Advertisement
+	service service
+}
+
+func (c *bgpController) setService(svc service) {
+	c.service = svc
 }
 
 func (c *bgpController) SetConfig(l log.Logger, cfg *config.Config) error {
@@ -169,10 +174,13 @@
 		// First, determine if the peering should be active for this
 		// node.
 		shouldRun := false
-		for _, ns := range p.cfg.NodeSelectors {
-			if ns.Matches(c.nodeLabels) {
-				shouldRun = true
-				break
+
+		if ok, _ := c.service.HasExcludeLBLabel(c.myNode); !ok {
+			for _, ns := range p.cfg.NodeSelectors {
+				if ns.Matches(c.nodeLabels) {
+					shouldRun = true
+					break
+				}
 			}
 		}
 
