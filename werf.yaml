project: deckhouse
configVersion: 1
---
image: common-base
from: alpine:3.11
ansible:
  beforeInstall:
  - apk: update_cache=yes

  - name: "Install dependencies"
    apk:
      name:
        - bash
        - bash-completion
        - ca-certificates
        - curl
        - pwgen
        - apache2-utils
        - bc
        - grep
        - tar
        - unzip
        - coreutils
        - util-linux
        - sed
        - gawk
        - netcat-openbsd
        - busybox-extras
        - vim
        - tini

  - name: "Install jo"
    apk:
      name:
      - jo
      repository: http://nl.alpinelinux.org/alpine/edge/community/
      update_cache: yes

  - name: "Install cfssl and rgxg"
    apk:
      name:
        - cfssl
        - rgxg
      repository: http://nl.alpinelinux.org/alpine/edge/testing/
      update_cache: yes

  - name: "Install yq"
    get_url:
      url: https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64
      checksum: "sha256:754c6e6a7ef92b00ef73b8b0bb1d76d651e04d26aa6c6625e272201afa889f8b"
      dest: /usr/local/bin/yq
      mode: +x

  - name: "Install kubectl"
    get_url:
      url: https://storage.googleapis.com/kubernetes-release/release/v1.14.10/bin/linux/amd64/kubectl
      checksum: "sha256:7729c6612bec76badc7926a79b26e0d9b06cc312af46dbb80ea7416d1fce0b36"
      dest: /usr/local/bin/kubectl
      mode: +x

  # TODO: checksum
  - name: "Install etcdctl"
    unarchive:
      extra_opts:
        - etcd-v3.3.10-linux-amd64/etcdctl
        - --strip-components=1
      src: https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz
      remote_src: yes
      dest: /usr/local/bin

  # TODO: checksum
  - name: "Install semver"
    unarchive:
      extra_opts:
        - semver-tool-2.1.0/src
        - --strip-components=2
      src: https://github.com/fsaintjacques/semver-tool/archive/2.1.0.tar.gz
      remote_src: yes
      dest: /usr/local/bin

  - name: "Install registry client"
    get_url:
      url: https://github.com/genuinetools/reg/releases/download/v0.16.0/reg-linux-amd64
      dest: /usr/local/bin/reg
      mode: +x
      checksum: "sha256:0470b6707ac68fa89d0cd92c83df5932c9822df7176fcf02d131d75f74a36a19"

  - name: "Shell comfort: inputrc"
    copy:
      content: |
{{ .Files.Get "deckhouse-controller/files/inputrc" | indent 8 }}
      dest: /etc/inputrc

  - name: "Shell comfort: bashrc"
    copy:
      content: |
{{ .Files.Get "deckhouse-controller/files/bashrc" | indent 8 }}
      dest: /root/.bashrc

  - name: "Shell comfort: vimrc"
    copy:
      content: |
{{ .Files.Get "deckhouse-controller/files/vimrc" | indent 8 }}
      dest: /root/.vimrc

  - name: "Shell comfort: kubectl completion"
    shell: kubectl completion bash > /root/.kubectl_completion.sh

  - name: "Shell comfort: history search"
    shell: |
      sed -i 's/\# \"\\e\[5~\": history-search-backward/\"\\e\[5~\": history-search-backward/' /etc/inputrc
      sed -i 's/^\# \"\\e\[6~\": history-search-forward/\"\\e\[6~\": history-search-forward/' /etc/inputrc

  - raw: rm -rf /var/cache/apk/*


---
image: base-for-go
fromImage: common-base
ansible:
  beforeInstall:
    - name: "Install dependencies"
      apk:
        name:
          - go
          - git
          - build-base
          - libstdc++
          - libgcc
          - libcurl

    - name: "Install dependencies from edge/main"
      apk:
        name:
          - binutils
          - binutils-dev
          - elfutils-dev
        repository: http://nl.alpinelinux.org/alpine/edge/main/

    - raw: rm -rf /var/cache/apk/*

docker:
  ENV:
    GOPATH: /usr/local/go
    PATH: /usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

---
image: base
fromImage: common-base
import:
- artifact: helm
  add: /helm/helm
  to: /usr/local/bin/helm
  before: install
ansible:
  install:
    - name: "Install helm 2to3 plugin"
      command: /usr/local/bin/helm plugin install https://github.com/helm/helm-2to3.git

---
image: dev
fromImage: base
fromCacheVersion: 2020-05-08.1
git:
- add: /
  to: /deckhouse
  includePaths:
  - candi
  - modules
  - global-hooks
  - shell-operator/frameworks/shell
  - shell_lib.sh
  - shell_lib
  - entrypoint.sh
  - jq_lib
  - helm_lib
  excludePaths:
  - docs
  - web
  - modules/*/docs
  - modules/*/README.md
  - modules/*/images
  - modules/*/hooks/*.go
  - modules/*/template_tests
  - modules/*/.namespace
  - modules/*/values_matrix_test.yaml
import:
- artifact: deckhouse-controller
  add: /deckhouse-controller/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  before: setup
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
ansible:
  setup:
  - name: "Add modules images tags.json"
    copy:
      content: |
{{ .Files.Get "modules/images_tags.json" | indent 8 }}
      dest: /deckhouse/modules/images_tags.json

  # Because of https://github.com/flant/werf/issues/1741 just make symlink for the entry point
  - name: "Make symlink for deckhouse entrypoint in the right location"
    shell: ln -s /deckhouse/entrypoint.sh /deckhouse/deckhouse

docker:
  ENV:
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks

---
artifact: kcov
from: flant/kcov-alpine:v0.5
---
image: tests
fromImage: base-for-go
fromCacheVersion: 2020-05-08.1
git:
- add: /
  to: /deckhouse
  stageDependencies:
    install:
      - go.mod
      - go.sum
import:
- artifact: deckhouse-controller
  add: /deckhouse-controller/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  before: setup
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup
- artifact: kcov
  add: /usr/bin/kcov
  to: /usr/bin/kcov
  before: setup
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
ansible:
  beforeInstall:
  - name: "Install dumb-init"
    apk:
      name:
        - dumb-init
      repository: http://nl.alpinelinux.org/alpine/edge/community/

  - name: "Install ginkgo"
    command: go get github.com/onsi/ginkgo/ginkgo

  - name: "Install dlv"
    command: go get github.com/go-delve/delve/cmd/dlv

  - name: "Add group for kcov"
    group:
      name: kcov-runner
      gid: 998
  - name: "Add user for kcov"
    user:
      name: kcov-runner
      group: kcov-runner
      uid: 999
      shell: /bin/bash

  - raw: rm -rf /var/cache/apk/*

  install:
  - name: "Download go modules"
    command: go mod download
    args:
      chdir: /deckhouse

docker:
  ENV:
    ADDON_OPERATOR_NAMESPACE: tests
    DECKHOUSE_POD: tests
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks
    CGO_CFLAGS: "-I/libjq/include"
    CGO_LDFLAGS: "-L/libjq/lib"
---
artifact: deckhouse-controller
fromImage: base-for-go
git:
- add: /deckhouse-controller
  to: /deckhouse-controller
  excludePaths:
  - development
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
    - go-build.sh
- add: /deckhouse-candi
  to: /deckhouse-candi
  excludePaths:
  - development
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "pkg/**/*.go"
import:
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup
ansible:
  beforeInstall:
  - apk:
      name: git,ca-certificates,gcc,libc-dev
      update_cache: yes
  - raw: rm -rf /var/cache/apk/*

  install:
  - shell: go mod download
    args:
      chdir: /deckhouse-controller

  setup:
  - command: /deckhouse-controller/go-build.sh /libjq
    args:
      chdir: /deckhouse-controller

---
artifact: deckhouse-candi
fromImage: base-for-go
git:
  - add: /deckhouse-candi
    to: /deckhouse-candi
    stageDependencies:
      install:
        - go.mod
        - go.sum
      setup:
        - "**/*.go"
        - go-build.sh
ansible:
  beforeInstall:
    - apk:
        name: git,ca-certificates
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
    - shell: go mod download
      args:
        chdir: /deckhouse-candi

  setup:
    - command: /deckhouse-candi/go-build.sh
      args:
        chdir: /deckhouse-candi

---
artifact: jq
from: alpine:3.11
git:
- url: https://github.com/stedolan/jq
  add: /
  to: /src
  commit: b6be13d5de6dd7d8aad5fd871eb6b0b30fc7d7f6
  stageDependencies:
    install:
      - "**/*"
ansible:
  install:
  - apk:
      name:
      - oniguruma-dev
      - automake
      - autoconf
      - libtool
      - build-base
      repository: http://nl.alpinelinux.org/alpine/edge/main/
      update_cache: yes
  - raw: rm -rf /var/cache/apk/*
  - shell: |
      cd /src
      autoreconf -fi
      ./configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --mandir=/usr/share/man \
        --localstatedir=/var \
        --disable-docs
      make LDFLAGS=-all-static
      make prefix=/usr install

---
artifact: libjq
from: alpine:3.11
git:
- url: https://github.com/flant/libjq-go
  tag: v1.6.1
  add: /
  to: /src
  stageDependencies:
    install:
      - "scripts/**"
    setup:
      - "modules/**"
ansible:
  install:
  - shell: /src/scripts/install-libjq-dependencies-alpine.sh
  - raw: rm -rf /var/cache/apk/*
  setup:
  - shell: /src/scripts/build-libjq-static.sh /src /libjq

---
artifact: helm
fromImage: base-for-go
git:
  - url: https://github.com/helm/helm
    add: /
    to: /helm
    tag: v3.2.4
    stageDependencies:
      install:
        - "**/*"
  - add: /helm/patches
    to: /patches
    stageDependencies:
      setup:
        - "**/*"
ansible:
  beforeInstall:
    - apk:
        name:
        - git
        - ca-certificates
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
    - command: go mod download
      args:
        chdir: /helm

  setup:
    - shell: |
        for p in $(find /patches -name \*.patch) ; do
          patch -p1 < $p
        done
      args:
        chdir: /helm
    - command: go build -o helm ./cmd/helm
      args:
        chdir: /helm
      environment:
        CGO_ENABLED: "0"

---
image: dev/install
fromImage: dev
import:
- artifact: deckhouse-candi
  add: /deckhouse-candi/deckhouse-candi
  to: /usr/bin/deckhouse-candi
  before: setup
ansible:
  beforeInstall:

  - name: "Add deckhouse-candi completion"
    shell: |
      echo 'eval "$(deckhouse-candi --completion-script-bash)"' >> /root/.bashrc

  - name: "Install dependencies"
    apk:
      name: [openssh-client]

  - name: "Install terraform"
    unarchive:
      src: https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
      remote_src: yes
      dest: /bin
      mode: +x

  - name: "Install terraform provider openstack"
    unarchive:
      src: https://releases.hashicorp.com/terraform-provider-openstack/1.26.0/terraform-provider-openstack_1.26.0_linux_amd64.zip
      remote_src: yes
      dest: /bin
      mode: +x

  - raw: rm -rf /var/cache/apk/*
