{{- define "deckhouse_dependencies" }}
- apk: update_cache=yes

- name: "Install dependencies"
  apk:
    name:
    - bash  # All hooks written in bash
    - bash-completion
    - jq
    - curl
    - pwgen
    - apache2-utils
    - bc
    - grep
    - tar
    - unzip
    - coreutils
    - util-linux
    - sed

# Hooks dependencies (from edge/testing)
- apk: name=jo repository=http://nl.alpinelinux.org/alpine/edge/testing/ update_cache=yes
- apk: name=cfssl repository=http://nl.alpinelinux.org/alpine/edge/testing/
- apk: name=rgxg repository=http://nl.alpinelinux.org/alpine/edge/testing/

- name: "Install yq"
  get_url:
    url: https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64
    checksum: "sha256:754c6e6a7ef92b00ef73b8b0bb1d76d651e04d26aa6c6625e272201afa889f8b"
    dest: /usr/local/bin/yq
    mode: +x

- name: "Install kubectl"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.14.10/bin/linux/amd64/kubectl
    checksum: "sha256:7729c6612bec76badc7926a79b26e0d9b06cc312af46dbb80ea7416d1fce0b36"
    dest: /usr/local/bin/kubectl
    mode: +x

# TODO: checksum
- name: "Install semver"
  unarchive:
    extra_opts:
    - semver-tool-2.1.0/src
    - --strip-components=2
    src: https://github.com/fsaintjacques/semver-tool/archive/2.1.0.tar.gz
    remote_src: yes
    dest: /usr/local/bin

# govc for vsphere-cloud-provider
# TODO: checksum
- shell: wget -O- https://github.com/vmware/govmomi/releases/download/v0.21.0/govc_linux_amd64.gz | gunzip -cq - > /usr/local/bin/govc && chmod +x /usr/local/bin/govc

# ca-certificates for helm
- apk: name=ca-certificates

# TODO: checksum
- name: "Install helm"
  unarchive:
    extra_opts:
    - linux-amd64/helm
    - --strip-components=1
    src: https://storage.googleapis.com/kubernetes-helm/helm-v2.14.1-linux-amd64.tar.gz
    remote_src: yes
    dest: /usr/local/bin
- raw: helm init --client-only

# TODO зачем второй раз скачиваем?
- name: "Install tiller"
  unarchive:
    extra_opts:
    - linux-amd64/tiller
    - --strip-components=1
    src: https://storage.googleapis.com/kubernetes-helm/helm-v2.14.1-linux-amd64.tar.gz
    remote_src: yes
    dest: /bin

- name: "Install registry client"
  get_url:
    url: https://github.com/genuinetools/reg/releases/download/v0.16.0/reg-linux-amd64
    dest: /usr/local/bin/reg
    mode: +x
    checksum: "sha256:0470b6707ac68fa89d0cd92c83df5932c9822df7176fcf02d131d75f74a36a19"
{{- end }}


project: deckhouse
configVersion: 1
---
image: dev
from: alpine:3.10
git:
- add: /
  to: /deckhouse
  includePaths:
  - modules
  - global-hooks
  - shell-operator/frameworks/shell
  - shell_lib.sh
  - shell_lib_legacy.sh
  - shell_lib
  - shell_lib_legacy
  - entrypoint.sh
  - jq_lib
  - helm_lib
  excludePaths:
  - modules/*/docs
  - modules/*/README.md
import:
- artifact: deckhouse-controller
  add: /deckhouse/deckhouse
  to: /usr/bin/deckhouse-controller
  before: setup
ansible:
  beforeInstall:
{{ include "deckhouse_dependencies" . | indent 2 }}

  - raw: rm -rf /var/cache/apk/*

  setup:
  - name: "Add modules images tags.json"
    copy:
      content: |
{{ .Files.Get "modules/images_tags.json" | indent 8 }}
      dest: /deckhouse/modules/images_tags.json
  - name: "Shell comfort: inputrc"
    copy:
      content: |
{{ .Files.Get "deckhouse/files/inputrc" | indent 8 }}
      dest: /etc/inputrc
  - name: "Shell comfort: bashrc"
    copy:
      content: |
{{ .Files.Get "deckhouse/files/bashrc" | indent 8 }}
      dest: /root/.bashrc
  - name: "Shell comfort: vimrc"
    copy:
      content: |
{{ .Files.Get "deckhouse/files/vimrc" | indent 8 }}
      dest: /root/.vimrc
  - name: "Shell comfort: kubectl completion"
    shell: kubectl completion bash > /root/.kubectl_completion.sh

  # Because of https://github.com/flant/werf/issues/1741 just move the entry point
  - name: "Move deckhouse entrypoint to the right location"
    shell: mv /deckhouse/entrypoint.sh /deckhouse/deckhouse

docker:
  ENV:
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks

---
artifact: kcov
from: flant/kcov-alpine:v0.4

---
image: tests
from: golang:1.13-alpine3.10
git:
- add: /
  to: /deckhouse
  includePaths:
  - testing
  stageDependencies:
    install:
      - testing/go.mod
      - testing/go.sum
import:
- artifact: deckhouse-controller
  add: /deckhouse/deckhouse
  to: /usr/bin/deckhouse-controller
  before: setup
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup
- artifact: kcov
  add: /usr/bin/kcov
  to: /usr/bin/kcov
  before: setup
ansible:
  beforeInstall:
{{ include "deckhouse_dependencies" . | indent 2 }}
  - apk:
      name:
      - vim
      - git
      - build-base
      - libstdc++
      - libgcc
      - curl
      - bash
      - libcurl
  - apk:
      name:
      - binutils
      - binutils-dev
      - elfutils-dev
      repository: http://nl.alpinelinux.org/alpine/edge/main/
  - command: go get github.com/onsi/ginkgo/ginkgo
  install:
  - command: go mod download
    args:
      chdir: /deckhouse/testing
  - command: addgroup -g 998 -S kcov-runner
  - command: adduser -u 999 -G kcov-runner -D -H -s /bin/bash kcov-runner

docker:
  ENV:
    ADDON_OPERATOR_NAMESPACE: tests
    DECKHOUSE_POD: tests
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks
    CGO_CFLAGS: "-I/libjq/build/jq/include"
    CGO_LDFLAGS: "'-L/libjq/build/onig/lib -L/libjq/build/jq/lib'"

---
artifact: deckhouse-controller
from: golang:1.13-alpine3.10
git:
- add: /deckhouse
  to: /deckhouse
  excludePaths:
  - development
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
    - go-build.sh
import:
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup
ansible:
  beforeInstall:
  - apk:
      name: git,ca-certificates,gcc,libc-dev
      update_cache: yes
  - command: rm -rf /var/cache/apk/*

  install:
  - shell: go mod download
    args:
      chdir: /deckhouse

  setup:
  - command: /deckhouse/go-build.sh /libjq
    args:
      chdir: /deckhouse

---
artifact: libjq
from: alpine:3.10
git:
- url: https://github.com/flant/libjq-go
  tag: v1.6.0
  add: /
  to: /src
  stageDependencies:
    install:
      - "scripts/**"
    setup:
      - "modules/**"
ansible:
  install:
  - shell: /src/scripts/install-libjq-dependencies-alpine.sh
  setup:
  - shell: /src/scripts/build-libjq-static.sh /src /libjq
