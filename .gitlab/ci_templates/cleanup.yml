.Cleanup registry template:
  stage: cleanup_registry
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  - if [[ -n "${DECKHOUSE_DEV_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_DEV_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_DEV_REGISTRY_USER}" --password-stdin ${DECKHOUSE_DEV_REGISTRY_HOST} 2>/dev/null; fi
  - if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_USER}" --password-stdin ${DECKHOUSE_REGISTRY_HOST} 2>/dev/null; fi
  - if [[ -n "${DECKHOUSE_REGISTRY_READ_HOST}" ]]; then echo ${DECKHOUSE_REGISTRY_READ_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_READ_USER}" --password-stdin ${DECKHOUSE_REGISTRY_READ_HOST} 2>/dev/null; fi
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - if [[ -n "${DEV_REGISTRY_PATH}" ]]; then export WERF_REPO="${DEV_REGISTRY_PATH}"; fi
  script:
  - werf cleanup --without-kube
  only:
    refs:
    - schedules
    variables:
    - $CLEANUP_SCHEDULE
  when: always

.Cleanup modules registry template:
  stage: cleanup_registry
  script:
  - ./modules_images_werf cleanup
  only:
    refs:
    - schedules
    variables:
    - $CLEANUP_SCHEDULE
  when: always

.Cleanup modules images template:
  stage: cleanup_builder
  script:
  - docker ps --filter status=exited -q | xargs --no-run-if-empty docker rm -v
  - docker images -f dangling=true -q | xargs --no-run-if-empty docker image rm
  only:
    refs:
    - schedules
    variables:
    - $CLEANUP_SCHEDULE
  when: always
