.Matrix Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
  - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
      -- ginkgo -vet=off --slowSpecThreshold=30 ./testing/matrix/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Hooks Configuration Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
  - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
      -- ginkgo -vet=off --slowSpecThreshold=30 ./testing/hooks_configuration/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
  - rm -rf testing/kcov-report
  - chmod -R 0777 testing
  - |
    >testing/dummy_dirs
    for dir in $(find -L global-hooks modules/*/hooks -type d); do
      echo "$dir" >> testing/dummy_dirs
      cat > "$dir/dummy" <<"EOF"
        #!/bin/bash
    EOF
    done
  - >
    werf run tests --docker-options="-v $(pwd):/deckhouse -w /deckhouse" --
    go test -vet=off ./modules/... ./global-hooks/...
  - cat testing/kcov-report/kcov-merged/coverage.json | grep '  "percent_covered"'
  after_script:
  - docker run --rm -v $(pwd)/testing:/testing -w /deckhouse ${BASE_ALPINE} chmod -R 0777 /testing
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  artifacts:
    when: always
    paths:
    - testing/kcov-report
    expire_in: 14 days
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.No Cyrillic Validation template:
  stage: testing
  script:
  - pwd
  - ./testing/validate_no_cyrillic.sh ${CI_PROJECT_ID} ${CI_COMMIT_SHA} ${FOX_ACCESS_TOKEN}
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Web links test:
  stage: testing
  variables:
    REPORT_FILE: link_test_report.txt
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-web
  script:
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - ./modules_images_werf test_web_links
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - source <(werf ci-env gitlab --config werf-web.yaml --verbose)
  - werf run --config werf-web.yaml dev/web-public --docker-options="--rm --entrypoint cat" -- /usr/share/nginx/html/link_test_report.txt | tee ${REPORT_FILE}
  - echo -e "\n#################################################\nPublic site link checking report...\n"
  - |
    cat ${REPORT_FILE} | grep -Eq 'finished successfully.$'
    if [ $? -ne 0 ]; then
      exit 1
    fi
  after_script:
    - rm -f ${REPORT_FILE}
  except:
    - schedules
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  allow_failure: true
  needs:
    - "Build"
    - "Build Website"
    - "Build Modules Images"
  interruptible: true

.Candictl Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - source <(werf ci-env gitlab --config werf-web.yaml --verbose)
  - werf run candictl-tests --docker-options="-v $(pwd):/deckhouse -w /deckhouse/candictl/hack/" -- bash test.sh --gitlab
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"

.Cloud layouts Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source <(multiwerf use 1.1 early-access)
  - source <(werf ci-env gitlab --config werf-web.yaml --verbose)
  - mkdir -p layouts-tests-tmp
  - mkdir "/mnt/cloud-layouts/layouts/${CI_JOB_ID}"
  - chmod -R 777 .
  - chmod -R 777 "/mnt/cloud-layouts/layouts/${CI_JOB_ID}"
  - werf run dev/install --docker-options="-e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} -e PREFIX=${CI_JOB_ID} -e DEV_BRANCH=${CI_COMMIT_REF_NAME} -e KUBERNETES_VERSION=${KUBERNETES_VERSION} -e PROVIDER=${PROVIDER:-not_provided} -e LAYOUT=${LAYOUT:-not_provided} -e LAYOUT_YANDEX_CLOUD_ID=${LAYOUT_YANDEX_CLOUD_ID:-not_provided} -e LAYOUT_YANDEX_FOLDER_ID=${LAYOUT_YANDEX_FOLDER_ID:-not_provided} -e LAYOUT_YANDEX_SERVICE_ACCOUNT_KEY_JSON=${LAYOUT_YANDEX_SERVICE_ACCOUNT_KEY_JSON:-not_provided} -e LAYOUT_GCP_SERVICE_ACCOUT_KEY_JSON=${LAYOUT_GCP_SERVICE_ACCOUT_KEY_JSON:-not_provided} -e LAYOUT_AWS_ACCESS_KEY=${LAYOUT_AWS_ACCESS_KEY:-not_provided} -e LAYOUT_AWS_SECRET_ACCESS_KEY=${LAYOUT_AWS_SECRET_ACCESS_KEY:-not_provided} -v $(pwd):/deckhouse -v "/mnt/cloud-layouts/layouts/${CI_JOB_ID}:/tmp" --user 999:999 --volume="/etc/group:/etc/group:ro" --volume="/etc/passwd:/etc/passwd:ro" --volume="/etc/shadow:/etc/shadow:ro" -w /deckhouse" -- bash /deckhouse/testing/cloud_layouts/script.sh
  after_script:
  - |
    if [[ ("$CI_COMMIT_REF_NAME" == "master") && ("$CI_JOB_STATUS" == "failed" || "$CI_JOB_STATUS" == "canceled") ]]; then
      curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
        -H 'Content-Type: application/json' \
        -d "{
        \"labels\": {
          \"severity_level\": 7,
          \"trigger\": \"CloudLayoutTestFailed\",
          \"provider\": \"$PROVIDER\",
          \"layout\": \"$LAYOUT\",
          \"kubernetes_version\": \"$KUBERNETES_VERSION\"
        },
        \"annotations\": {
          \"summary\": \"Scheduled Cloud Layout test failed\",
          \"description\": \"Check GitLab Job log for more information\",
          \"plk_protocol_version\": \"1\",
          \"plk_link_url/job\": \"$CI_JOB_URL\",
          \"plk_link_title_en/job\": \"GitLab Job\"
        }
      }"
    fi
  parallel:
    matrix:
    - PROVIDER: AWS
      LAYOUT:
      - WithoutNAT
      KUBERNETES_VERSION:
      - "1.16"
      - "1.19"
    - PROVIDER: GCP
      LAYOUT:
      - WithoutNAT
      KUBERNETES_VERSION:
      - "1.16"
      - "1.19"
    - PROVIDER: Yandex.Cloud
      LAYOUT:
      - WithoutNAT
      KUBERNETES_VERSION:
      - "1.16"
      - "1.19"
  artifacts:
    when: always
    paths:
    - testing/cloud_layouts
    - layouts-tests-tmp
    expire_in: 30 days
  needs:
  - "Build"
  - "Build Modules Images"
