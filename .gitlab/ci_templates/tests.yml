.Matrix Tests template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run tests
      --docker-options="-w /deckhouse"
      -- ginkgo -timeout=${TEST_TIMEOUT} -vet=off --slowSpecThreshold=30 ./testing/matrix/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Hooks Configuration Tests template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run tests
      --docker-options="-w /deckhouse"
      -- ginkgo -timeout=${TEST_TIMEOUT} -vet=off --slowSpecThreshold=30 ./testing/hooks_configuration/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Tests template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run tests
     --docker-options="-w /deckhouse"
     -- go test -timeout=${TEST_TIMEOUT} -vet=off ./modules/... ./global-hooks/...
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.No Cyrillic Validation template:
  stage: testing
  script:
  - pwd
  - ./testing/validate_no_cyrillic.sh ${CI_PROJECT_ID} ${CI_COMMIT_SHA} ${FOX_ACCESS_TOKEN}
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Content Validation template:
  stage: testing
  script:
  - ./testing/validate_doc_changes.sh ${FOX_ACCESS_TOKEN}
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Web links test:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - export BASEDIR=$(pwd)/docs
  - export _TMPDIR=$(mktemp -d -t -p ${BASEDIR})
  - bash testing/check_links.sh
  after_script:
  - |
      if [ "$_TMPDIR" != "" ] ; then
        rm -rf $_TMPDIR
      fi
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  allow_failure: true
  needs:
    - "Doc web build"
    - "Main web build"
    - "Build Modules Images"
  interruptible: true

.Dhctl Tests template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run dhctl-tests --docker-options="-v $(pwd):/deckhouse -w /deckhouse/dhctl" -- make ci
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"

.GolangCI Lint template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run tests
    --docker-options="-w /deckhouse -e "TERM=xterm-256color""
    -- golangci-lint run
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"

.OpenAPI Test Cases template:
  stage: testing
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - echo $DECKHOUSE_REGISTRY_READ_PASSWORD | docker login --username="$DECKHOUSE_REGISTRY_READ_USER" --password-stdin $DECKHOUSE_REGISTRY_READ_HOST > /dev/null
  - pwd
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - werf run tests
    --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
    -- ginkgo -vet=off ./testing/openapi_cases/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true
