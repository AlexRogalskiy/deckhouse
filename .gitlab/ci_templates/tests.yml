.Matrix Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
  - type werf && source $(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose --as-file)
  - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
      -- ginkgo -timeout=${TEST_TIMEOUT} -vet=off --slowSpecThreshold=30 ./testing/matrix/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Hooks Configuration Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
  - type werf && source $(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose --as-file)
  - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
      -- ginkgo -timeout=${TEST_TIMEOUT} -vet=off --slowSpecThreshold=30 ./testing/hooks_configuration/
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  - rm -rf shell-operator || true
  - git submodule update --init --recursive
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
  - type werf && source $(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose --as-file)
  - chmod -R 0777 testing
  - |
    >testing/dummy_dirs
    for dir in $(find -L global-hooks modules/*/hooks -type d); do
      echo "$dir" >> testing/dummy_dirs
      cat > "$dir/dummy" <<"EOF"
        #!/bin/bash
    EOF
    done
  - >
    werf run tests --docker-options="-v $(pwd):/deckhouse -w /deckhouse" --
    go test -timeout=${TEST_TIMEOUT} -vet=off ./modules/... ./global-hooks/...
  after_script:
  - docker run --rm -v $(pwd)/testing:/testing -w /deckhouse ${BASE_ALPINE} chmod -R 0777 /testing
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.No Cyrillic Validation template:
  stage: testing
  script:
  - pwd
  - ./testing/validate_no_cyrillic.sh ${CI_PROJECT_ID} ${CI_COMMIT_SHA} ${FOX_ACCESS_TOKEN}
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Translation Validation template:
  stage: testing
  script:
  - ./testing/validate_doc_changes.sh ${FOX_ACCESS_TOKEN}
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"
  interruptible: true

.Web links test:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-web
  script:
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - cd docs/
  - export BASEDIR=$(pwd)
  - export _TMPDIR=$(mktemp -d -t -p ${BASEDIR})
  - bash ./check_links.sh
  after_script:
  - |
      if [ "$_TMPDIR" != "" ] ; then
        rm -rf $_TMPDIR
      fi
  except:
    - schedules
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  allow_failure: true
  needs:
    - "Build"
    - "Build Modules Images"
  interruptible: true

.Dhctl Tests template:
  stage: testing
  before_script:
  - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
  - pwd
  - eval "${STAGES_STORAGE_LOGIN_CMD}"
  - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
  - type werf && source $(werf ci-env gitlab --config werf-web.yaml --verbose --as-file)
  - werf run dhctl-tests --docker-options="-v $(pwd):/deckhouse -w /deckhouse/dhctl/hack/" -- bash test.sh --gitlab
  except:
  - schedules
  - alpha
  - beta
  - early-access
  - stable
  - rock-solid
  needs:
  - "Build"
  - "Build Modules Images"

.GolangCI Lint template:
  stage: testing
  before_script:
    - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
  script:
    - pwd
    - eval "${STAGES_STORAGE_LOGIN_CMD}"
    - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
    - type werf && source $(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose --as-file)
    - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse -e "TERM=xterm-256color""
      -- golangci-lint run
  except:
    - schedules
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  needs:
    - "Build"
    - "Build Modules Images"

.OpenAPI Test Cases template:
  stage: testing
  before_script:
    - export WERF_STAGES_STORAGE=${WERF_STAGES_REPO_BASE}/stages-deckhouse
    - rm -rf shell-operator || true
    - git submodule update --init --recursive
  script:
    - pwd
    - eval "${STAGES_STORAGE_LOGIN_CMD}"
    - type multiwerf && source $(multiwerf use 1.1 ${WERF_CHANNEL} --as-file)
    - type werf && source $(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose --as-file)
    - werf run tests
      --docker-options="-v $(pwd):/deckhouse -w /deckhouse"
      -- ginkgo -vet=off ./testing/openapi_cases/
  except:
    - schedules
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  needs:
    - "Build"
    - "Build Modules Images"
  interruptible: true
