.base_deploy_template:
  stage: deploy
  before_script:
  # Variables
  #   1. CE/EE/FE -> ce/ee/fe
  - REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
  - echo "Registry suffix - ${REGISTRY_SUFFIX}"
  #   2. alpha: [EE] -> alpha , beta: [CE] -> beta
  - RELEASE_CHANNEL=$(cut -d ":" -f1 <<< ${CI_JOB_NAME})
  - echo "Release channel - ${RELEASE_CHANNEL}"
  #   3. Source images
  - SOURCE_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG}
  - SOURCE_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG}
  #   4. Destination dev images
  - DESTINATION_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL}
  - DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL}
  #   5. Destination prod images
  - DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL}
  - DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL}
  script:
  - echo ${DECKHOUSE_DEV_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_DEV_REGISTRY_USER}" --password-stdin ${DECKHOUSE_DEV_REGISTRY_HOST} 2>/dev/null
  - echo ${DECKHOUSE_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_USER}" --password-stdin ${DECKHOUSE_REGISTRY_HOST} 2>/dev/null

  - docker image pull ${SOURCE_IMAGE}

  - echo "Push ${SOURCE_IMAGE} to ${DESTINATION_IMAGE}"
  - docker image tag ${SOURCE_IMAGE} ${DESTINATION_IMAGE}
  - docker image push ${DESTINATION_IMAGE}

  - echo "Push ${SOURCE_IMAGE} to ${DECKHOUSE_DESTINATION_IMAGE}"
  - docker image tag ${SOURCE_IMAGE} ${DECKHOUSE_DESTINATION_IMAGE}
  - docker image push ${DECKHOUSE_DESTINATION_IMAGE}

  - docker image pull ${SOURCE_INSTALL_IMAGE}

  - echo "Push ${SOURCE_INSTALL_IMAGE} to ${DESTINATION_INSTALL_IMAGE}"
  - docker image tag ${SOURCE_INSTALL_IMAGE} ${DESTINATION_INSTALL_IMAGE}
  - docker image push ${DESTINATION_INSTALL_IMAGE}

  - echo "Push ${SOURCE_INSTALL_IMAGE} to ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}"
  - docker image tag ${SOURCE_INSTALL_IMAGE} ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}
  - docker image push ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}
  after_script:
  # Delete local images
  - echo "Delete local image ${SOURCE_IMAGE}" && docker image rmi ${SOURCE_IMAGE}
  - echo "Delete local image ${SOURCE_INSTALL_IMAGE}" && docker image rmi ${SOURCE_INSTALL_IMAGE}
  - echo "Delete local image ${DESTINATION_IMAGE}" && docker image rmi ${DESTINATION_IMAGE}
  - echo "Delete local image ${DESTINATION_INSTALL_IMAGE}" && docker image rmi ${DESTINATION_INSTALL_IMAGE}
  - echo "Delete local image ${DECKHOUSE_DESTINATION_IMAGE}" && docker image rmi ${DECKHOUSE_DESTINATION_IMAGE}
  - echo "Delete local image ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}" && docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}
  dependencies:
    - "Build Modules Images"
  when: manual
  except:
    - schedules
