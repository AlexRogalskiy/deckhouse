.Go Generate template:
  stage: build_modules_images
  script:
  - docker run -v $(pwd):/deckhouse -w /deckhouse/tools ${BASE_GOLANG_ALPINE} go generate .
  - git diff --exit-code
  except:
    variables:
      - $CI_PIPELINE_SOURCE == "schedule" && $CLOUD_LAYOUTS_SCHEDULE != "1"
    refs:
      - alpha
      - beta
      - early-access
      - stable
      - rock-solid
  interruptible: true

.Build Modules Images template:
  stage: build_modules_images
  script:
  - ./modules_images_werf bp
  except:
    variables:
    - $CI_PIPELINE_SOURCE == "schedule" && $CLOUD_LAYOUTS_SCHEDULE != "1"
    refs:
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  interruptible: true
  artifacts:
    when: always
    paths:
    - modules/images_tags_${WERF_ENV}.json
    expire_in: 30 days

.Build template:
  stage: build
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - echo ${DECKHOUSE_DEV_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_DEV_REGISTRY_USER}" --password-stdin ${DECKHOUSE_DEV_REGISTRY_HOST} 2>/dev/null
  - echo ${DECKHOUSE_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_USER}" --password-stdin ${DECKHOUSE_REGISTRY_HOST} 2>/dev/null
  - echo ${DECKHOUSE_REGISTRY_READ_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_READ_USER}" --password-stdin ${DECKHOUSE_REGISTRY_READ_HOST} 2>/dev/null
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - export WERF_REPO="${DEV_REGISTRY_PATH}"
  - werf build
  - docker pull $(werf stage image dev)
  - docker pull $(werf stage image dev/install)
  - REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]') # CE/EE/FE -> ce/ee/fe
  - if [[ -n ${CI_COMMIT_TAG} ]]; then
      werf build --repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX} --secondary-repo $WERF_REPO;
      DESTINATION_IMAGE=${DEV_REGISTRY_PATH}:${CI_COMMIT_TAG};
      DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/install:${CI_COMMIT_TAG};
      DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG};
      DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG};
      docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
      docker image tag $(werf stage image dev) ${DECKHOUSE_DESTINATION_IMAGE};
      docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
      docker image tag $(werf stage image dev/install) ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
      docker image push ${DESTINATION_IMAGE};
      docker image push ${DESTINATION_INSTALL_IMAGE};
      docker image push ${DECKHOUSE_DESTINATION_IMAGE};
      docker image push ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
      docker image rmi ${DESTINATION_IMAGE};
      docker image rmi ${DESTINATION_INSTALL_IMAGE};
      docker image rmi ${DECKHOUSE_DESTINATION_IMAGE};
      docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
    fi
  - if [[ -n ${CI_COMMIT_BRANCH} ]]; then
      DESTINATION_IMAGE=${DEV_REGISTRY_PATH}/dev:${CI_COMMIT_BRANCH};
      DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/dev/install:${CI_COMMIT_BRANCH};
      docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
      docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
      docker image push ${DESTINATION_IMAGE};
      docker image push ${DESTINATION_INSTALL_IMAGE};
      docker image rmi ${DESTINATION_IMAGE};
      docker image rmi ${DESTINATION_INSTALL_IMAGE};
    fi
  except:
    variables:
    - $CI_PIPELINE_SOURCE == "schedule" && $CLOUD_LAYOUTS_SCHEDULE != "1"
    refs:
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  interruptible: true
